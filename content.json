{"meta":{"title":"Jiwon's Blog","subtitle":"","description":"","author":"Jiwon Kang","url":"http://gonekng.github.io","root":"/"},"pages":[{"title":"","date":"2022-10-05T05:40:07.922Z","updated":"2022-10-05T05:40:07.922Z","comments":true,"path":"images/R/R_sample.html","permalink":"http://gonekng.github.io/images/R/R_sample.html","excerpt":"","text":"Sample // Pandoc 2.9 adds attributes on both header and div. We remove the former (to // be compatible with the behavior of Pandoc < 2.8). document.addEventListener('DOMContentLoaded', function(e) { var hs = document.querySelectorAll(\"div.section[class*='level'] > :first-child\"); var i, h, a; for (i = 0; i < hs.length; i++) { h = hs[i]; if (!/^h[1-6]$/i.test(h.tagName)) continue; // it should be a header h1-h6 a = h.attributes; while (a.length > 0) h.removeAttribute(a[0].name); } }); /*! jQuery v3.6.0 | (c) OpenJS Foundation and other contributors | jquery.org/license */ !function(e,t){\"use strict\";\"object\"==typeof module&&\"object\"==typeof module.exports?module.exports=e.document?t(e,!0):function(e){if(!e.document)throw new Error(\"jQuery requires a window with a document\");return t(e)}:t(e)}(\"undefined\"!=typeof window?window:this,function(C,e){\"use strict\";var t=[],r=Object.getPrototypeOf,s=t.slice,g=t.flat?function(e){return t.flat.call(e)}:function(e){return t.concat.apply([],e)},u=t.push,i=t.indexOf,n={},o=n.toString,v=n.hasOwnProperty,a=v.toString,l=a.call(Object),y={},m=function(e){return\"function\"==typeof e&&\"number\"!=typeof e.nodeType&&\"function\"!=typeof e.item},x=function(e){return null!=e&&e===e.window},E=C.document,c={type:!0,src:!0,nonce:!0,noModule:!0};function b(e,t,n){var r,i,o=(n=n||E).createElement(\"script\");if(o.text=e,t)for(r in c)(i=t[r]||t.getAttribute&&t.getAttribute(r))&&o.setAttribute(r,i);n.head.appendChild(o).parentNode.removeChild(o)}function w(e){return null==e?e+\"\":\"object\"==typeof e||\"function\"==typeof e?n[o.call(e)]||\"object\":typeof e}var f=\"3.6.0\",S=function(e,t){return new S.fn.init(e,t)};function p(e){var t=!!e&&\"length\"in e&&e.length,n=w(e);return!m(e)&&!x(e)&&(\"array\"===n||0===t||\"number\"==typeof t&&0"},{"title":"","date":"2022-10-05T05:40:07.195Z","updated":"2022-10-05T05:40:07.195Z","comments":true,"path":"images/R/R_basic_stat.html","permalink":"http://gonekng.github.io/images/R/R_basic_stat.html","excerpt":"","text":"R_basic_statistics // Pandoc 2.9 adds attributes on both header and div. We remove the former (to // be compatible with the behavior of Pandoc < 2.8). document.addEventListener('DOMContentLoaded', function(e) { var hs = document.querySelectorAll(\"div.section[class*='level'] > :first-child\"); var i, h, a; for (i = 0; i < hs.length; i++) { h = hs[i]; if (!/^h[1-6]$/i.test(h.tagName)) continue; // it should be a header h1-h6 a = h.attributes; while (a.length > 0) h.removeAttribute(a[0].name); } }); /*! jQuery v3.6.0 | (c) OpenJS Foundation and other contributors | jquery.org/license */ !function(e,t){\"use strict\";\"object\"==typeof module&&\"object\"==typeof module.exports?module.exports=e.document?t(e,!0):function(e){if(!e.document)throw new Error(\"jQuery requires a window with a document\");return t(e)}:t(e)}(\"undefined\"!=typeof window?window:this,function(C,e){\"use strict\";var t=[],r=Object.getPrototypeOf,s=t.slice,g=t.flat?function(e){return t.flat.call(e)}:function(e){return t.concat.apply([],e)},u=t.push,i=t.indexOf,n={},o=n.toString,v=n.hasOwnProperty,a=v.toString,l=a.call(Object),y={},m=function(e){return\"function\"==typeof e&&\"number\"!=typeof e.nodeType&&\"function\"!=typeof e.item},x=function(e){return null!=e&&e===e.window},E=C.document,c={type:!0,src:!0,nonce:!0,noModule:!0};function b(e,t,n){var r,i,o=(n=n||E).createElement(\"script\");if(o.text=e,t)for(r in c)(i=t[r]||t.getAttribute&&t.getAttribute(r))&&o.setAttribute(r,i);n.head.appendChild(o).parentNode.removeChild(o)}function w(e){return null==e?e+\"\":\"object\"==typeof e||\"function\"==typeof e?n[o.call(e)]||\"object\":typeof e}var f=\"3.6.0\",S=function(e,t){return new S.fn.init(e,t)};function p(e){var t=!!e&&\"length\"in e&&e.length,n=w(e);return!m(e)&&!x(e)&&(\"array\"===n||0===t||\"number\"==typeof t&&0"}],"posts":[{"title":"AARRR 프레임워크","slug":"데이터분석/AARRR","date":"2024-12-21T14:16:11.000Z","updated":"2024-12-21T14:18:13.486Z","comments":true,"path":"2024/12/21/데이터분석/AARRR/","link":"","permalink":"http://gonekng.github.io/2024/12/21/%EB%8D%B0%EC%9D%B4%ED%84%B0%EB%B6%84%EC%84%9D/AARRR/","excerpt":"","text":"AARRR 프레임워크란?획득(Acquisition), 활성화(Activation), 유지(Retention), 수익(Revenue), 추천(Referral)의 앞글자를 따서 만든 프레임워크로, 고객이 일련의 서비스를 경험하는 과정에서의 5가지 사용자 행동 지표를 의미한다. Acquisition (획득) 고객들이 어떠한 경로로 우리 서비스에 방문하는가 Activation (활성화) 고객들이 우리 서비스를 의도한대로 잘 경험하는가 Retention (리텐션) 고객들이 우리 서비스를 지속적으로 사용하고 있는가 Revenue (수익) 고객들이 실제로 우리 서비스에 비용을 지불하는가 Referral (추천) 고객들이 우리 서비스를 다른 사람들에게 추천하는가 1: 고객 유치(Acquisition)새로운 사람들이 어떠한 경로를 통하여 우리 서비스를 방문하였는지 분석하는 단계 단순히 많은 사람들이 들어오는 것이 전체 목표가 되어서는 안 되며, 다양한 매체들의 유입량과 전환율을 분석하여 고객 유치에 대한 통제권을 확보하는 것이 중요하다. 어떤 채널이 우리 서비스에 의미있는 이벤트를 가장 많이 발생시켰는가를 분석하여 마케팅 예산을 효율적으로 집행하는 것이 주된 목표이다. 핵심지표 : DAU, MAU, 고착도(Stickiness), 광고클릭률(CTR) 등 2: 활성화(Activation)유입된 사람들이 우리 서비스에 얼마나 머물렀고, 어떠한 액션으로 이어졌는지 분석하는 단계 처음으로 서비스를 경험한 후 계정을 만들거나 특정 기능을 사용하는 등 제품에 흥미를 느끼고 상호작용을 하도록 유도하는 것이 주된 목표이다. 활성화 단계에서는 서비스의 UI&#x2F;UX 디자인이 가장 중요하며, 사용자 경험이 의도한대로 잘 이루어지는지 지속적으로 살펴볼 필요가 있다. 핵심지표 : 전환율, 이탈률, 체류시간, 페이지뷰(PV), 가입률 등 3: 리텐션(Retention)활성화된 사용자들이 얼마나 우리 서비스를 재방문, 재사용하였는지 분석하는 단계 AARRR 프레임워크 중 가장 다루기 어려운 지표로, 한번 서비스를 이용한 고객들을 모니터링하여 지속적으로 서비스를 재방문할 수 있도록 유도하는 것이 주된 목표이다. 활성 사용자가 일회성 서비스 이용으로만 그치면 계속 신규 사용자를 확보해야 하는 어려움이 생기며, 기존 사용자의 재방문이나 재구매율을 높이는 것이 비용도 훨씬 덜 든다. 핵심지표 : 리텐션(클래식, 롤링 등), 이탈률, 고객생애가치(LTV) 등 4: 수익화(Revenue)실제로 사용자들이 우리 서비스에 대하여 얼마의 금액을 지불하는지 분석하는 단계 아무리 힘들게 신규 고객을 유치하고, 기존 고객을 꾸준히 유지시켜도 결국 수익이 나지 않으면 서비스를 지속할 수 없기 때문에 가장 필수적인 단계라고 할 수 있다. 앞서 사용자들을 잘 정착시켰다면, 수익화 단계에서는 사업 규모 자체를 확장할 수 있다. 또한 벌어들인 수익을 다시 서비스에 재투자할 수 있으므로 지속적인 성장의 발판이 된다. 핵심지표 : ARPU, ARPPU, ROI, ROAS, 고객생애가치(LTV) 등 5: 추천(Referral)기존 사용자가 우리 서비스를 다른 사람들에게 얼마나 추천하는지 분석하는 단계 서비스에 대한 사용자들의 만족도가 높은 경우 자연스럽게 추천이 이루어지지만, 추가적으로 사람들의 적극적인 추천을 유도할 수 있는 맥락을 만드는 것이 중요하다. 서비스 내에서 사용자 추천 맥락을 자연스럽게 제공한 대표적인 사례로 드롭박스(친구 추천을 하면 저장 용량 추가 제공), 카카오뱅크(모임통장 서비스를 통한 신규 계좌 연결) 등이 있다. 핵심지표 : 바이럴 계수, SNS 공유&#x2F;추천 수, 앱스토어 평점, 추천 가입률 등 ReferenceAARRR 프레임워크(해적지표)란 무엇일까? - 어센트 코리아 AARRR 의미 자세히 파헤쳐보기 AARRR 프레임워크 (해적지표) - 1편 : AARRR의 의미와 단계별 목표 달성 전략, 지표 데이터 분석 기법, AARRR 프레임 워크","categories":[{"name":"데이터 분석","slug":"데이터-분석","permalink":"http://gonekng.github.io/categories/%EB%8D%B0%EC%9D%B4%ED%84%B0-%EB%B6%84%EC%84%9D/"}],"tags":[{"name":"데이터 분석","slug":"데이터-분석","permalink":"http://gonekng.github.io/tags/%EB%8D%B0%EC%9D%B4%ED%84%B0-%EB%B6%84%EC%84%9D/"},{"name":"비즈니스 분석","slug":"비즈니스-분석","permalink":"http://gonekng.github.io/tags/%EB%B9%84%EC%A6%88%EB%8B%88%EC%8A%A4-%EB%B6%84%EC%84%9D/"}],"author":"Jiwon Kang"},{"title":"[Git] .gitignore 다루기","slug":"etc/[Git] .gitignore 다루기","date":"2024-12-16T12:31:11.000Z","updated":"2024-12-16T12:40:17.871Z","comments":true,"path":"2024/12/16/etc/[Git] .gitignore 다루기/","link":"","permalink":"http://gonekng.github.io/2024/12/16/etc/[Git]%20.gitignore%20%EB%8B%A4%EB%A3%A8%EA%B8%B0/","excerpt":"","text":".gitignore란?Git으로 프로젝트를 관리할 때, 특정 파일이나 디렉토리를 Git이 추적하지 않도록 설정하는 파일로, 일반적으로 다음과 같은 파일들을 Git 추적 대상에서 제외한다: 빌드 결과물 (build&#x2F;, dist&#x2F; 등) 의존성 파일 (node_modules&#x2F;, vendor&#x2F; 등) IDE 설정 파일 (.idea&#x2F;, .vscode&#x2F; 등) 환경 설정 파일 (.env, config.json 등) 로그 파일 (*.log) .gitignore 파일 생성다음의 명령어를 실행하여 .gitignore 파일을 생성하며, 편집기에서 파일의 내용을 작성한 다음 add, commit, push의 순서로 실행하여 적용할 수 있다. 1$ touch .gitignore touch 명령어는 파일의 생성 및 날짜&#x2F;시간을 수정하는 명령어 해당 파일이 없을 경우 크기가 0인 파일을 생성하며, 이미 존재할 경우 수정 시간이 업데이트된다. (파일 내용 수정 X) (TIP) .gitignore 파일을 생성해주는 사이트gitignore.io .gitignore 작성 방법루트 디렉토리에 .gitignore 파일을 생성하고 다음과 같은 패턴을 활용하여 작성한다. # : 주석 표기 * : 모든 문자와 매칭 ? : 한 개의 문자와 매칭 ** : 모든 디렉토리 검색 / : 디렉토리 구분 /로 시작하면 하위 디렉토리에 적용되지 않음 /로 끝나면 해당 디렉토리 전체로 간주 ! : 무시하지 않음 (예외 처리) 예시12345678910111213141516171819202122232425# ignore all .a files*.a# exclude lib.class from &quot;*.a&quot;, meaning all lib.a are still tracked!lib.a# only ignore the TODO file in the current directory, not subdir/TODO/TODO# ignore all json files whose name begin with &#x27;temp-&#x27;temp-*.json# only ignore the build.log file in current directory, not those in its subdirectories/build.log# specify a folder with slash in the end# ignore all files in the build/ directorybuild/# ignore doc/notes.txt, but not doc/server/arch.txtdoc/*.txt# ignore all .pdf files in the doc/ directory# /** matches 0 or more directoriesdoc/**/*.pdf 적용 시 주의사항 .gitignore 파일은 Git이 추적을 시작하기 전에 설정하는 것이 좋다. 이미 Git이 추적 중인 파일은 .gitignore에 추가해도 즉시 적용되지 않으며, 추가로 적용하려면 다음의 명령어를 실행해야 한다. 12345678# Git의 캐시를 삭제git rm -r --cached .# 모든 파일을 다시 추가git add .# 변경사항을 커밋git commit -m &quot;Apply .gitignore&quot; Reference[Git] .gitignore 이해 및 적용하기 [Git] Xcode 프로젝트에 .gitignore 파일 생성하기","categories":[{"name":"etc","slug":"etc","permalink":"http://gonekng.github.io/categories/etc/"}],"tags":[{"name":"git","slug":"git","permalink":"http://gonekng.github.io/tags/git/"}],"author":"Jiwon Kang"},{"title":"RFM 고객 세분화 분석","slug":"데이터분석/RFM","date":"2024-12-09T13:07:15.000Z","updated":"2024-12-09T13:39:45.494Z","comments":true,"path":"2024/12/09/데이터분석/RFM/","link":"","permalink":"http://gonekng.github.io/2024/12/09/%EB%8D%B0%EC%9D%B4%ED%84%B0%EB%B6%84%EC%84%9D/RFM/","excerpt":"","text":"RFM 분석이란?고객 관계 관리(CRM)를 위해 고객의 구매 행동 데이터를 기반으로 고객을 세분화하는 분석 기법으로, 다음의 3가지 지표를 기반으로 한다. Recency : 얼마나 최근에 구매하였는가 마지막으로 구매한 시점이 가까울수록 브랜드에 대한 관심도가 높다 Frequency : 얼마나 자주 구매하였는가 방문한 빈도가 높을수록 브랜드에 대한 충성도 및 재구매 확률이 높다 Monetary : 얼마나 많은 금액을 지출하였는가 지출한 금액이 많을수록 브랜드에 더 큰 가치를 부여할 확률이 높다 RFM 고객 세분화 예시다음은 최근 구매일, 총 구매횟수, 총 구매금액을 기준으로 RFM 값을 부여한 예시이다. Recency : 2024-12-09 기준 한 달 이내에 구매한 고객은 ‘recent’, 그 외에는 ‘past’ Frequency : 총 5회 이상 구매한 고객은 ‘high’, 그 외에는 ‘low’ Monetary : 총 10만원 이상 구매한 고객은 ‘high’, 그 외에는 ‘low’ 번호 최근 구매일 총 구매횟수(회) 총 구매금액(천원) Recency Frequency Monetary 1 2024-11-28 15 125.5 recent high high 2 2024-12-01 9 21.8 recent high low 3 2024-11-25 2 3.5 recent low low 4 2024-12-02 1 210.0 recent low high 5 2024-09-11 7 315.3 past high high 6 2024-10-31 10 85.9 past high low 7 2024-11-05 3 151.2 past low high 8 2024-10-12 1 12.5 past low low RFM 값을 기준으로 그룹을 나누어 볼 때, 그룹별 특징을 다음과 같이 추정할 수 있다. 번호 Recency Frequency Monetary 특징 1 recent high high 가장 브랜드 충성도가 높은 고객군 2 recent high low 브랜드 관심도에 비해 매출 기여도는 낮은 고객군 3 recent low low 최근에 구매는 했으나 브랜드 충성도는 낮은 고객군 4 recent low high 최근까지 고가의 제품에 관심이 많은 고객군 5 past high high 브랜드 충성도가 높았으나 최근 구매가 없는 고객군 6 past high low 최근 구매가 없고 매출 기여도도 낮은 고객군 7 past low high 고가의 제품에 관심 있으나 최근 구매가 없는 고객군 8 past low low 이탈 가능성이 가장 높은 고객군 각 그룹에 대하여 어떠한 마케팅이 효과적일지도 다음과 같이 적용해볼 수 있다. 번호 Recency Frequency Monetary 마케팅 전략 1 recent high high 개인 맞춤형 추천, 초대 이벤트, 멤버십 혜택 등 2 recent high low 기간 한정 세일, 묶음 판매, 할인 쿠폰 등 3 recent low low 재구매 유도 이벤트, 사용자 리뷰 공유 등 4 recent low high VIP 전용 제품 소개, 고급 제품 대상 특별 할인 등 5 past high high 개인 맞춤형 리마인드, 과거 구매 기반 제품 추천 등 6 past high low 가격 비교 정보 제공, 재구매 할인 쿠폰 등 7 past low high 고급 제품 위주의 카탈로그 홍보 등 8 past low low 고객 리뷰 요청, 브랜드 이미지 홍보 등 SQL 쿼리 예시 With문에서 recency, frequency, monetary 컬럼을 각각 생성 window 함수 NTILE()을 사용하여 각각 5단계로 구분 123456789101112131415161718-- RFM 점수 계산을 위한 기본 쿼리WITH rfm_calc AS ( SELECT customer_id, DATEDIFF(day, MAX(purchase_date), CURRENT_DATE) as recency, COUNT(order_id) as frequency, SUM(amount) as monetary FROM orders GROUP BY customer_id),rfm_scores AS ( SELECT *, NTILE(5) OVER (ORDER BY recency DESC) as R, # Recency 5단계 구분 NTILE(5) OVER (ORDER BY frequency ASC) as F, # Frequency 5단계 구분 NTILE(5) OVER (ORDER BY monetary ASC) as M # Monetary 5단계 구분 FROM rfm_calc)SELECT * FROM rfm_scores; RFM 적용 시 고려사항비즈니스의 특성에 따라 고객 세분화 기준 등을 다르게 적용할 필요가 있다. Recency, Frequency, Monetary 지표의 분류 기준 및 단계 설정 쿠팡, 배달의민족 등 자주 이용하는 플랫폼의 경우 한 달 이내 구매하지 않은 고객의 Recency 단계가 낮아질 수 있으나, 여행상품을 판매하는 항공사, 숙박업체 등은 최소 3개월에서 6개월 정도 구매이력이 없더라도 Recency가 떨어진다고 보기 어렵다. 웨딩 서비스 등은 재구매가 거의 이루어지지 않으므로 Frequency는 사실상 의미가 없다. Frequency, Monetary 지표의 집계 기간 설정 Frequency와 Monetary 집계 기간을 서비스 출시 이후로 설정할 경우 오랜 기간 구매하지 않아 사실상 이탈한 고객의 Frequency, Monetary가 필요 이상으로 집계될 수 있으므로 적절한 집계 기간을 설정할 필요가 있다. Reference데이터리안 블로그 : RFM 고객 세분화 분석이란 무엇일까요Velog 블로그 : RFM 고객 세분화 (Segmentation)","categories":[{"name":"데이터 분석","slug":"데이터-분석","permalink":"http://gonekng.github.io/categories/%EB%8D%B0%EC%9D%B4%ED%84%B0-%EB%B6%84%EC%84%9D/"}],"tags":[{"name":"sql","slug":"sql","permalink":"http://gonekng.github.io/tags/sql/"},{"name":"데이터 분석","slug":"데이터-분석","permalink":"http://gonekng.github.io/tags/%EB%8D%B0%EC%9D%B4%ED%84%B0-%EB%B6%84%EC%84%9D/"},{"name":"비즈니스 분석","slug":"비즈니스-분석","permalink":"http://gonekng.github.io/tags/%EB%B9%84%EC%A6%88%EB%8B%88%EC%8A%A4-%EB%B6%84%EC%84%9D/"}],"author":"Jiwon Kang"},{"title":"Pandas EX2 : 데이터프레임 구조화","slug":"Python/Pandas/pandas_exercise2","date":"2024-12-07T07:17:30.000Z","updated":"2024-12-07T07:22:41.295Z","comments":true,"path":"2024/12/07/Python/Pandas/pandas_exercise2/","link":"","permalink":"http://gonekng.github.io/2024/12/07/Python/Pandas/pandas_exercise2/","excerpt":"","text":"Python 라이브러리 Pandas에는 데이터프레임을 구조화하는 함수들이 있다.각 인덱스(행)와 컬럼(열)을 통해 데이터에 접근 및 조작이 가능하다. 데이터프레임 구조화 함수 pivot() : 특정 열을 기준으로 데이터를 재구성하는 함수 pivot_table() : pivot() 함수와 비슷하나, aggfunc 매개변수를 활용하여 다양한 집계 함수를 적용할 수 있음 stack() : 특정 열을 인덱스로 변환해서 행으로 쌓아올리는 함수 unstack() : stack() 함수의 반대 과정으로, 특정 인덱스를 열로 다시 변환하는 함수 melt() : 여러 열을 하나의 열로 묶는 함수로, 이 경우 열 이름을 담는 열과 값을 담는 열로 구분됨 데이터프레임 구조화 예시아래는 Pandas 데이터프레임을 생성하고, 순서대로 pivot(), pivot_table(), stack(), unstack(), melt() 함수를 적용하는 예시이다. 데이터프레임 생성1234567891011121314import pandas as pd# 샘플 데이터프레임 생성data = &#123; &#x27;date&#x27;: [&#x27;2024-01-01&#x27;, &#x27;2024-01-01&#x27;, &#x27;2024-01-01&#x27;, &#x27;2024-01-02&#x27;, &#x27;2024-01-02&#x27;, &#x27;2024-01-02&#x27;, &#x27;2024-01-01&#x27;, &#x27;2024-01-02&#x27;], &#x27;city&#x27;: [&#x27;Seoul&#x27;, &#x27;Busan&#x27;, &#x27;Incheon&#x27;, &#x27;Seoul&#x27;, &#x27;Busan&#x27;, &#x27;Incheon&#x27;, &#x27;Seoul&#x27;, &#x27;Busan&#x27;], &#x27;temperature&#x27;: [5, 7, 6, 8, 9, 7, 6, 10], &#x27;humidity&#x27;: [55, 60, 58, 50, 65, 70, 58, 62], &#x27;wind_speed&#x27;: [5.0, 7.5, 6.0, 3.5, 4.0, 5.5, 6.5, 8.0]&#125;df = pd.DataFrame(data)print(&quot;원본 데이터프레임:&quot;)print(df) 12345678910원본 데이터프레임: date city temperature humidity wind_speed0 2024-01-01 Seoul 5 55 5.01 2024-01-01 Busan 7 60 7.52 2024-01-01 Incheon 6 58 6.03 2024-01-02 Seoul 8 50 3.54 2024-01-02 Busan 9 65 4.05 2024-01-02 Incheon 7 70 5.56 2024-01-01 Seoul 6 58 6.57 2024-01-02 Busan 10 62 8.0 1. pivot()1234try: pivoted = df.pivot(index=&#x27;date&#x27;, columns=&#x27;city&#x27;, values=&#x27;temperature&#x27;)except ValueError as e: print(&quot;pivot() 오류 발생&quot;) 1pivot() 오류 발생 temperature의 값이 중복되므로 pivot() 함수는 오류를 발생시킨다. 이를 해결하기 위해 pivot_table() 함수를 사용할 수 있다. 2. pivot_table()123pivot_table = df.pivot_table(index=&#x27;date&#x27;, columns=&#x27;city&#x27;, values=&#x27;temperature&#x27;, aggfunc=&#x27;mean&#x27;)print(&quot;pivot_table() 결과:&quot;)print(pivot_table) 12345pivot_table() 결과:city Busan Incheon Seouldate 2024-01-01 7.0 6.0 5.52024-01-02 9.5 7.0 8.0 3. stack()123stacked = pivot_table.stack()print(&quot;stack() 결과:&quot;)print(stacked) 123456789stack() 결과:date city 2024-01-01 Busan 7.0 Incheon 6.0 Seoul 5.52024-01-02 Busan 9.5 Incheon 7.0 Seoul 8.0dtype: float64 4. unstack()123unstacked = stacked.unstack()print(&quot;unstack() 결과:&quot;)print(unstacked) 12345unstack() 결과:city Busan Incheon Seouldate 2024-01-01 7.0 6.0 5.52024-01-02 9.5 7.0 8.0 5. melt()123melted = pd.melt(df, id_vars=[&#x27;date&#x27;, &#x27;city&#x27;], value_vars=[&#x27;temperature&#x27;, &#x27;humidity&#x27;, &#x27;wind_speed&#x27;])print(&quot;melt() 결과:&quot;)print(melted) 1234567891011121314151617181920melt() 결과: date city variable value0 2024-01-01 Seoul temperature 5.01 2024-01-01 Busan temperature 7.02 2024-01-01 Incheon temperature 6.03 2024-01-02 Seoul temperature 8.04 2024-01-02 Busan temperature 9.05 2024-01-02 Incheon temperature 7.06 2024-01-01 Seoul humidity 55.07 2024-01-01 Busan humidity 60.08 2024-01-01 Incheon humidity 58.09 2024-01-02 Seoul humidity 50.010 2024-01-02 Busan humidity 65.011 2024-01-02 Incheon humidity 70.012 2024-01-01 Seoul wind_speed 5.013 2024-01-01 Busan wind_speed 7.514 2024-01-01 Incheon wind_speed 6.015 2024-01-02 Seoul wind_speed 3.516 2024-01-02 Busan wind_speed 4.017 2024-01-02 Incheon wind_speed 5.5 ReferenceAPI reference — pandas 2.2.3 documentation[Pandas] 데이터프레임 재구조화하기(Stack,Unstack)","categories":[{"name":"python","slug":"python","permalink":"http://gonekng.github.io/categories/python/"},{"name":"pandas","slug":"python/pandas","permalink":"http://gonekng.github.io/categories/python/pandas/"}],"tags":[{"name":"python","slug":"python","permalink":"http://gonekng.github.io/tags/python/"},{"name":"pandas","slug":"pandas","permalink":"http://gonekng.github.io/tags/pandas/"}],"author":"Jiwon Kang"},{"title":"Django를 활용한 API 서버 만들기","slug":"Python/Django/Django를 활용한 API 서버 만들기","date":"2024-09-03T10:06:20.000Z","updated":"2024-12-16T12:34:26.406Z","comments":true,"path":"2024/09/03/Python/Django/Django를 활용한 API 서버 만들기/","link":"","permalink":"http://gonekng.github.io/2024/09/03/Python/Django/Django%EB%A5%BC%20%ED%99%9C%EC%9A%A9%ED%95%9C%20API%20%EC%84%9C%EB%B2%84%20%EB%A7%8C%EB%93%A4%EA%B8%B0/","excerpt":"","text":"0. Django란?Django는 파이썬으로 작성된 웹 프레임워크로, 신속한 웹 애플리케이션 개발을 가능하게 하며, 다음과 같은 특징이 있음 MTV 아키텍처 모델(Model), 템플릿(Template), 뷰(View) 구조로, 코드의 재사용성과 유지보수성이 향상됨 ORM(Object-Relational Mapping) 데이터베이스와의 상호작용을 객체 지향적으로 처리하기 때문에 SQL 쿼리 없이도 데이터베이스 작업 가능 관리자 인터페이스 기본적으로 제공하는 관리 패널을 통해 데이터베이스 관리 및 CRUD(Create, Read, Update, Delete) 작업을 보다 쉽게 수행 가능 1. Django 설치 파이썬 가상 환경 설정 12python -m venv venvsource venv\\Scripts\\activate 가상 환경을 사용하면 프로젝트마다 독립된 패키지 설치 가능 Django 설치 12pip install djangopip install djangorestframework 2. Django 프로젝트 생성Django 프로젝트를 생성하여 웹 애플리케이션의 최상위 구조 정의 Django 프로젝트 생성: 12django-admin startproject myprojectcd myproject myproject라는 새 Django 프로젝트 생성 → 기본적인 설정 파일 및 디렉토리 구조 포함 3. 앱 생성 및 등록앱(App) : Django 프로젝트 내에서 기능별로 구분된 모듈 Django 앱 생성 1python manage.py startapp myapp myapp이라는 새 앱 생성 → 각 앱은 독립적인 기능을 가지며, 모델, 뷰, 템플릿 등 포함 settings.py 1234INSTALLED_APPS = [ ... &#x27;myapp&#x27;,] 앱을 Django 프로젝트에 등록하여 Django가 myapp에 있는 모델 및 뷰를 인식하도록 함 4. 모델 정의 및 적용Django의 모델을 정의하여 데이터베이스 테이블을 앱 내에서 구현 myapp/models.py 123456from django.db import modelsclass YourModel(models.Model): category = models.CharField(max_length=100) value1 = models.IntegerField() value2 = models.FloatField() YourModel 클래스는 데이터베이스 테이블을, 각 필드는 데이터베이스의 컬럼을 정의 CharField, IntegerField, FloatField는 각각 문자열, 정수형, 실수형 데이터 필드 마이그레이션 생성 및 적용 12python manage.py makemigrationspython manage.py migrate 모델 변경 사항을 감지하는 마이그레이션 파일 생성 후 데이터베이스에 변경 사항 적용 YourModel에 대한 테이블이 데이터베이스에 생성됨 ※ 마이그레이션(Migration) Django에서 데이터베이스의 스키마를 관리하는 방법 모델 변경 관리 : Django 모델을 수정하면 변경 사항을 데이터베이스에 반영 버전 관리 : 각 마이그레이션은 고유한 번호를 가지며, 데이터베이스를 이전 버전으로 되돌리거나 특정 버전으로 이동 가능 파일 자동 생성 : Django는 모델의 변경 사항을 감지하여 마이그레이션 파일을 자동 생성하므로, 수동으로 SQL 쿼리를 작성할 필요 없음 5. CSV 데이터 로드CSV 파일에서 데이터를 읽어 데이터베이스에 저장 myapp/load_data.py 1234567891011import pandas as pdfrom myapp.models import YourModeldef load_data_from_csv(file_path): data = pd.read_csv(file_path) for index, row in data.iterrows(): YourModel.objects.create( category = row[&#x27;COLUMN1&#x27;], value1 = row[&#x27;COLUMN2&#x27;], value2 = row[&#x27;COLUMN3&#x27;], ) Django Shell 스크립트 실행 1python manage.py shell 12from myapp.load_data import load_data_from_csvload_data_from_csv(&#x27;path/to/your/data.csv&#x27;) 6. API 시리얼라이저 및 뷰 정의API 개발을 위하여 시리얼라이저(Serializer) 및 뷰(View) 생성 myapp/serializers.py 1234567from rest_framework import serializersfrom .models import YourModelclass YourModelSerializer(serializers.ModelSerializer): class Meta: model = YourModel fields = &#x27;__all__&#x27; myapp/views.py 1234567891011from rest_framework import viewsetsfrom .models import YourModelfrom .serializers import YourModelSerializerclass YourModelViewSet(viewsets.ModelViewSet): queryset = YourModel.objects.all() serializer_class = YourModelSerializer def get_queryset(self): queryset = super().get_queryset() field1 = self.request.query get_queryset(self) : field1 컬럼을 키값으로 하여 데이터를 조회하는 쿼리 함수 ※ 시리얼라이저(Serializer) Django REST Framework(DRF)에서 데이터 변환을 담당하는 구성요소 데이터 직렬화(Serialization) : Python 객체(Django 모델 인스턴스 등)을 JSON, XML 등의 직렬화된 형태로 변환하여 웹 API를 통하여 데이터를 전송 및 수신할 수 있게 함 유효성 검사 : 사용자가 API를 통해 보낸 데이터가 올바른 형식인지, 필요한 필드가 포함되었는지 확인 데이터 구조화 : 포함할 필드, 제외할 필드 등 데이터 구조 정의 CRUD 작업 지원 : 데이터베이스와의 CRUD(Create, Read, Update, Delete) 작업을 지원 7. CSV 파일 다운로드URL 파라미터를 사용하여 데이터를 CSV 파일로 다운로드하는 기능 구현 myapp/view.py 12345678910111213141516171819def export_to_csv(request): category= request.GET.get(&#x27;category&#x27;, None) if category: data = YourModel.objects.filter(category = category) else: data = YourModel.objects.all() response = HttpResponse(content_type=&#x27;text/csv; charset=utf-8&#x27;) response[&#x27;Content-Disposition&#x27;] = &#x27;attachment; filename=&quot;data.csv&quot;&#x27; response.write(u&#x27;\\ufeff&#x27;.encode(&#x27;utf-8&#x27;)) writer = csv.writer(response) writer.writerow([&#x27;category&#x27;, &#x27;value1&#x27;, &#x27;value2&#x27;]) for item in data: writer.writerow([item.category, item.value1, item.value2]) return response category 컬럼을 키값으로 하는 필터링 기능 구현 받아온 데이터를 data.csv 파일에 저장하며, BOM을 추가하여 UTF-8 인코딩 설정 8. URL 설정API를 호출할 수 있도록 앱의 URLconf 설정 myapp/urls.py 1234567891011from django.urls import path, includefrom rest_framework.routers import DefaultRouterfrom .views import YourModelViewSetrouter = DefaultRouter()router.register(r&#x27;your-model&#x27;, YourModelViewSet)urlpatterns = [ path(&#x27;&#x27;, include(router.urls)), path(&#x27;export/csv/&#x27;, export_to_csv, name=&#x27;export_to_csv&#x27;),] myproject/urls.py 1234567from django.contrib import adminfrom django.urls import path, includeurlpatterns = [ path(&#x27;admin/&#x27;, admin.site.urls), path(&#x27;api/&#x27;, include(&#x27;myapp.urls&#x27;)),] include() 함수를 사용하여 myapp의 URL 패턴을 프로젝트의 URL 패턴에 추가 api/your-model, api/export/csv 등으로 접근 가능 9. Host 설정Django의 ALLOWED_HOSTS 설정을 통해 웹 서버가 받아들일 수 있는 호스트 지정 settings.py 12345ALLOWED_HOSTS = [ &#x27;127.0.0.1&#x27;, &#x27;localhost&#x27;, &#x27;192.168.0.39&#x27;,] 10. 최종 서버 실행 Django 서버 실행 1python manage.py runserver 192.168.0.39:8000 실행화면(예시)","categories":[{"name":"python","slug":"python","permalink":"http://gonekng.github.io/categories/python/"},{"name":"django","slug":"python/django","permalink":"http://gonekng.github.io/categories/python/django/"}],"tags":[{"name":"development","slug":"development","permalink":"http://gonekng.github.io/tags/development/"},{"name":"python","slug":"python","permalink":"http://gonekng.github.io/tags/python/"},{"name":"django","slug":"django","permalink":"http://gonekng.github.io/tags/django/"},{"name":"api","slug":"api","permalink":"http://gonekng.github.io/tags/api/"}],"author":"Jiwon Kang"},{"title":"Django 웹개발 튜토리얼 (5)","slug":"Python/Django/Django 웹개발 튜토리얼 (5)","date":"2024-03-05T13:18:50.000Z","updated":"2024-03-05T13:23:22.310Z","comments":true,"path":"2024/03/05/Python/Django/Django 웹개발 튜토리얼 (5)/","link":"","permalink":"http://gonekng.github.io/2024/03/05/Python/Django/Django%20%EC%9B%B9%EA%B0%9C%EB%B0%9C%20%ED%8A%9C%ED%86%A0%EB%A6%AC%EC%96%BC%20(5)/","excerpt":"","text":"Polls 어플리케이션 완성하기 데이터베이스에 Question과 Choice 만들기 (admin 페이지) 이전 데이터는 모두 삭제한 후 Question 하나 추가 detail 템플릿 완성하기 polls&#x2F;templates&#x2F;polls&#x2F;detail.html 123456789101112&lt;h1&gt;&#123;&#123; question.question_text &#125;&#125;&lt;/h1&gt;&#123;% if error_message %&#125;&lt;p&gt;&lt;strong&gt;&#123;&#123; error_message &#125;&#125;&lt;/strong&gt;&lt;/p&gt;&#123;% endif %&#125;&lt;form action=&quot;&#123;% url &#x27;polls:vote&#x27; question.id %&#125;&quot; method=&quot;post&quot;&gt;&#123;% csrf_token %&#125;&#123;% for choice in question.choice_set.all %&#125; &lt;input type=&quot;radio&quot; name=&quot;choice&quot; id=&quot;choice&#123;&#123; forloop.counter &#125;&#125;&quot; value=&quot;&#123;&#123; choice.id &#125;&#125;&quot;&gt; &lt;label for=&quot;choice&#123;&#123; forloop.counter &#125;&#125;&quot;&gt;&#123;&#123; choice.choice_text &#125;&#125;&lt;/label&gt;&lt;br&gt;&#123;% endfor %&#125;&lt;input type=&quot;submit&quot; value=&quot;Vote&quot;&gt;&lt;/form&gt; form 태그를 이용하여 투표 기능 삽입 &lt;form action=&quot;&#123;% url 'polls:vote' question.id %&#125;&quot; method=&quot;post&quot;&gt; : form 데이터를 POST request 방식으로 vote 뷰에 전송함 &lt;input type=&quot;radio&quot; name=&quot;choice&quot; id=&quot;choice&#123;&#123; forloop.counter &#125;&#125;&quot; value=&quot;&#123;&#123; choice.id &#125;&#125;&quot;&gt; → 데이터는 key, value 형태로 전달되며 이때 key는 name=&quot;choice&quot;, value는 value=&quot;&#123;&#123;choice.id&#125;&#125;&quot; 를 의미한다. forloop.counter : for문 반복횟수 출력 csrf_token : django에서 제공하는 보안기능 서버 출력화면 vote 뷰 구현하기 polls&#x2F;views.py 12345678910111213141516from .models import Question, Choice...def vote(request, question_id): question = get_object_or_404(Question, pk=question_id) try: selected_choice = question.choice_set.get(pk=request.POST[&#x27;choice&#x27;]) # key, value 값으로 데이터 받아옴 except (KeyError, Choice.DoesNotExist): # Redisplay the question voting form. return render(request, &#x27;polls/detail.html&#x27;, &#123; &#x27;question&#x27;: question, &#x27;error_message&#x27;: &quot;You didn&#x27;t select a choice.&quot;, &#125;) else: selected_choice.votes += 1 selected_choice.save() return HttpResponseRedirect(reverse(&#x27;polls:results&#x27;, args=(question.id,))) question.choice_set.get(pk=request.POST[&#39;choice&#39;]) : key, value 형태로 전달되므로 request.POST[”key”]의 형태로 불러옴 except : 데이터 전송에 실패하면 detail 뷰로 넘어가서 에러메시지 출력 else : 데이터 전송에 성공하면 votes 변수에 1을 더한 후 저장 reverse 함수 : url의 name을 url로 거꾸로 바꿔주는 함수 → reverse(&#39;polls:results&#39;, args=(question.id,)) : polls:results를 url로 바꾼 후 url에 필요한 변수를 args에 추가함 result 뷰 구현하기 polls&#x2F;views.py 123def results(request, question_id): question = get_object_or_404(Question, pk=question_id) return render(request, &#x27;polls/results.html&#x27;, &#123;&#x27;question&#x27;: question&#125;) polls&#x2F;templates&#x2F;polls&#x2F;results.html 123456789&lt;h1&gt;&#123;&#123; question.question_text &#125;&#125;&lt;/h1&gt;&lt;ul&gt;&#123;% for choice in question.choice_set.all %&#125; &lt;li&gt;&#123;&#123; choice.choice_text &#125;&#125; -- &#123;&#123; choice.votes &#125;&#125; vote&#123;&#123; choice.votes|pluralize &#125;&#125;&lt;/li&gt;&#123;% endfor %&#125;&lt;/ul&gt;&lt;a href=&quot;&#123;% url &#x27;polls:detail&#x27; question.id %&#125;&quot;&gt;Vote again?&lt;/a&gt; 해당 question에서 각 choice가 몇개씩 투표되었는지 출력 &#123;&#123; | &#125;&#125; : filter 기능 → python의 변수를 특정 형태로 바꿔주는 역할 → &#123;&#123; choice.votes|pluralize &#125;&#125; : choice.votes 값이 2 이상일 경우 뒤에 s를 추가 서버 출력화면 Reference django Documentation : https://docs.djangoproject.com/en/3.2/intro/tutorial01/ 참고 블로그 : https://lucky516.tistory.com/59","categories":[{"name":"python","slug":"python","permalink":"http://gonekng.github.io/categories/python/"},{"name":"django","slug":"python/django","permalink":"http://gonekng.github.io/categories/python/django/"}],"tags":[{"name":"development","slug":"development","permalink":"http://gonekng.github.io/tags/development/"},{"name":"python","slug":"python","permalink":"http://gonekng.github.io/tags/python/"},{"name":"django","slug":"django","permalink":"http://gonekng.github.io/tags/django/"}],"author":"Jiwon Kang"},{"title":"Django 웹개발 튜토리얼 (4)","slug":"Python/Django/Django 웹개발 튜토리얼 (4)","date":"2024-02-19T13:45:02.000Z","updated":"2024-02-19T13:57:18.930Z","comments":true,"path":"2024/02/19/Python/Django/Django 웹개발 튜토리얼 (4)/","link":"","permalink":"http://gonekng.github.io/2024/02/19/Python/Django/Django%20%EC%9B%B9%EA%B0%9C%EB%B0%9C%20%ED%8A%9C%ED%86%A0%EB%A6%AC%EC%96%BC%20(4)/","excerpt":"","text":"새로운 View 추가하기 django의 MTV에서 View는 웹페이지와 서버의 중간다리 (MVC 패턴의 컨트롤러 역할) polls 어플리케이션의 구조 index 페이지 : Question에 대한 정보 출력 detail 페이지 : Question의 text를 상세히 출력 (투표형태) result 페이지 : Question에 대한 결과 출력 → Vote Action : 투표 기능 구현 필요 polls&#x2F;views.py &gt;&gt; detail, results, vote 추가 123456789101112131415from django.shortcuts import renderfrom django.http import HttpResponsedef index(request): return HttpResponse(&quot;Hello, World. You&#x27;re at the polls index.&quot;)def detail(request, question_id): return HttpResponse(&quot;You&#x27;re looking at question %s.&quot; % question_id)def results(request, question_id): response = &quot;You&#x27;re looking at the results of question %s.&quot; return HttpResponse(response % question_id)def vote(request, question_id): return HttpResponse(&quot;You&#x27;re voting on question %s.&quot; % question_id) polls&#x2F;urls.py &gt;&gt; 새로 추가한 view를 url에 연결 123456789101112131415from django.urls import pathfrom . import views# root주소 http://127.0.0.1:8000//polls/urlpatterns = [ # ex: /polls/ path(&#x27;&#x27;, views.index, name=&#x27;index&#x27;), # ex: /polls/5/ path(&#x27;&lt;int:question_id&gt;/&#x27;, views.detail, name=&#x27;detail&#x27;), # ex: /polls/5/results/ path(&#x27;&lt;int:question_id&gt;/results/&#x27;, views.results, name=&#x27;results&#x27;), # ex: /polls/5/vote/ path(&#x27;&lt;int:question_id&gt;/vote/&#x27;, views.vote, name=&#x27;vote&#x27;),] 실제 View 기능 구현하기 polls&#x2F;views.py &gt;&gt; 다음 코드 입력 12345678910from django.http import HttpResponsefrom .models import Questiondef index(request): latest_question_list = Question.objects.order_by(&#x27;-pub_date&#x27;)[:5] output = &#x27;, &#x27;.join([q.question_text for q in latest_question_list]) return HttpResponse(output)# 나머지 view (detail, results, vote) 내용은 그대로 Question 모델에서 pub_date 기준 최신 데이터 5개를 불러와서 하나의 문자열로 출력하는 내용 admin 페이지에서 question 데이터 추가 index 페이지 정상출력 여부 확인 Template 이용하기 Template : 사용자에게 보여지는 화면 → HTML 코드 일부를 파이썬으로 작성할 수 있음(&#123;% %&#125;) 템플릿 파일 저장위치 : 어플리케이션폴더이름&#x2F;templates&#x2F;어플리케이션폴더이름&#x2F;템플릿파일이름 django에서는 templates 폴더 안에 있는 템플릿파일이름을 기준으로 불러오기 때문에, 다른 어플리케이션의 같은 이름을 가진 템플릿 파일과 충돌하는 경우를 방지하기 위해 templates 폴더 안에 어플리케이션폴더를 한번 더 만드는 것을 권장함 → template namespacing polls&#x2F;templates&#x2F;polls&#x2F;index.html 123456789&#123;% if latest_question_list %&#125; &lt;ul&gt; &#123;% for question in latest_question_list %&#125; &lt;li&gt;&lt;a href=&quot;/polls/&#123;&#123; question.id &#125;&#125;/&quot;&gt;&#123;&#123; question.question_text &#125;&#125;&lt;/a&gt;&lt;/li&gt; &#123;% endfor %&#125; &lt;/ul&gt;&#123;% else %&#125; &lt;p&gt;No polls are available.&lt;/p&gt;&#123;% endif %&#125; &#123;% %&#125; (tag) : html 내에서 파이썬 코드를 실행하는 문법 &#123;&#123; &#125;&#125; (variable) : view에서 전달된 변수에 접근하는 문법 polls&#x2F;views.py &gt;&gt; index 템플릿을 view에 연동 1234567891011121314from django.http import HttpResponsefrom django.template import loaderfrom .models import Questiondef index(request): latest_question_list = Question.objects.order_by(&#x27;-pub_date&#x27;)[:5] template = loader.get_template(&#x27;polls/index.html&#x27;) context = &#123; &#x27;latest_question_list&#x27;: latest_question_list, &#125; return HttpResponse(template.render(context, request))# 나머지 view (detail, results, vote) 내용은 그대로 model의 Question 데이터를 추출하여 template에 전달 wrapping 함수 사용하기 여러 개의 함수를 한번에 묶어서 호출하는 함수 render() polls&#x2F;views.py 코드의 loader 및 httpreponse 작업은 render() 함수로 간략하게 표현 가능 다음 코드는 기존의 코드와 같은 기능을 구현함 12345678910from django.shortcuts import renderfrom .models import Questiondef index(request): latest_question_list = Question.objects.order_by(&#x27;-pub_date&#x27;)[:5] context = &#123;&#x27;latest_question_list&#x27;: latest_question_list&#125; return render(request, &#x27;polls/index.html&#x27;, context)# 나머지 view (detail, results, vote) 내용은 그대로 get_object_or_404() detail view의 템플릿 작성 polls&#x2F;views.py 123456789from django.http import Http404from .models import Questiondef detail(request, question_id): try: question = Question.objects.get(pk=question_id) except Question.DoesNotExist: raise Http404(&quot;Question does not exist&quot;) return render(request, &#x27;polls/detail.html&#x27;, &#123;&#x27;question&#x27;: question&#125;) polls&#x2F;templates&#x2F;polls&#x2F;detail.html 123456&lt;h1&gt;&#123;&#123; question.question_text &#125;&#125;&lt;/h1&gt;&lt;ul&gt;&#123;% for choice in question.choice_set.all %&#125; &lt;li&gt;&#123;&#123; choice.choice_text &#125;&#125;&lt;/li&gt;&#123;% endfor %&#125;&lt;/ul&gt; 해당 question이 있는 경우 (question 및 choice 출력) 해당 question이 없는 경우 (404 에러 출력) detail view의 404 에러를 일으키는 코드 → get_object_or_404() 함수로 간략하게 표현 가능 polls&#x2F;view.py 123456from django.shortcuts import get_object_or_404from .models import Questiondef detail(request, question_id): question = get_object_or_404(Question, pk=question_id) return render(request, &#x27;polls/detail.html&#x27;, &#123;&#x27;question&#x27;: question&#125;) URL 하드코드 제거하기 &#123;% url %&#125; 태그를 사용하면 하드코드가 아닌 유동적인 코드로 작성 가능 → &#123;% url (원하는 view의 url 이름) (url에 들어갈 입력변수) %&#125; polls&#x2F;templates&#x2F;polls&#x2F;index.html 123456789&#123;% if latest_question_list %&#125; &lt;ul&gt; &#123;% for question in latest_question_list %&#125; &lt;li&gt;&lt;a href=&quot;/polls/&#123;&#123; question.id &#125;&#125;/&quot;&gt;&#123;&#123; question.question_text &#125;&#125;&lt;/a&gt;&lt;/li&gt; &#123;% endfor %&#125; &lt;/ul&gt;&#123;% else %&#125; &lt;p&gt;No polls are available.&lt;/p&gt;&#123;% endif %&#125; &quot;/polls/&#123;&#123; question.id &#125;&#125;/&quot; : detail 뷰로 이동하는 링크 → &quot;&#123;% url 'detail' question.id %&#125;&quot; polls&#x2F;urls.py에서 detail 뷰의 name 확인 12345urlpatterns = [ ... path(&#x27;&lt;int:question_id&gt;/&#x27;, views.detail, name=&#x27;detail&#x27;), ...] URL namespacing 여러 application에서 같은 url 이름을 가지고 있는 경우 충돌을 막기 위해 django에서 url namespacing 기능 제공 polls&#x2F;urls.py 코드에서 app_name 지정 12345from django.urls import pathfrom . import viewsapp_name = &#x27;polls&#x27;... polls&#x2F;templates&#x2F;polls&#x2F;detail.html 코드에서 url 정보 수정 123...&lt;li&gt;&lt;a href=&quot;&#123;% url &#x27;polls:detail&#x27; question.id %&#125;&quot;&gt;&#123;&#123; question.question_text &#125;&#125;&lt;/a&gt;&lt;/li&gt;... Reference django Documentation : https://docs.djangoproject.com/en/3.2/intro/tutorial01/ 참고 블로그 : https://lucky516.tistory.com/58","categories":[{"name":"python","slug":"python","permalink":"http://gonekng.github.io/categories/python/"},{"name":"django","slug":"python/django","permalink":"http://gonekng.github.io/categories/python/django/"}],"tags":[{"name":"development","slug":"development","permalink":"http://gonekng.github.io/tags/development/"},{"name":"python","slug":"python","permalink":"http://gonekng.github.io/tags/python/"},{"name":"django","slug":"django","permalink":"http://gonekng.github.io/tags/django/"}],"author":"Jiwon Kang"},{"title":"Django 웹개발 튜토리얼 (3)","slug":"Python/Django/Django 웹개발 튜토리얼 (3)","date":"2024-02-19T13:43:23.000Z","updated":"2024-02-19T13:45:32.350Z","comments":true,"path":"2024/02/19/Python/Django/Django 웹개발 튜토리얼 (3)/","link":"","permalink":"http://gonekng.github.io/2024/02/19/Python/Django/Django%20%EC%9B%B9%EA%B0%9C%EB%B0%9C%20%ED%8A%9C%ED%86%A0%EB%A6%AC%EC%96%BC%20(3)/","excerpt":"","text":"Model 데이터 추가 Model에 데이터를 추가하는 방법 서버 개발자가 admin 페이지에서 직접 데이터 추가하기 서버 개발자가 django shell에서 직접 데이터 추가하기 웹페이지 view에서 model에 DB추가하도록 요청하는 기능 구현하기 Admin 페이지에서 직접 추가 admin 페이지 : 사이트 운영자가 사용하는 페이지 → django에서는 기본 제공됨 운영자 계정(superuser) 생성 python manage.py createsuperuser → 이름, 이메일, 비밀번호 등 설정 이때, 비밀번호는 8글자 이상의 숫자와 문자를 조합하여 작성하도록 되어있음 Bypass 안내문에 y를 입력할 경우 그대로 진행되나, 권장하지 않음 비밀번호 설정 후 superuser 계정 생성 완료 서버 실행 후 admin 페이지 접속 앞서 생성한 운영자 계정으로 로그인 admin 페이지에서 모델에 데이터를 직접 추가 가능 → 앞서 polls에서 만든 모델을 admin 페이지에도 따로 추가해야 가능 admin 페이지에 모델 및 데이터 추가 polls&#x2F;admin.py → 다음 코드 입력하여 admin 페이지에 모델 추가 12345from django.contrib import adminfrom .models import Question, Choiceadmin.site.register(Question)admin.site.register(Choice) 각 모델(Question, Choices)에 직접 데이터 추가 Django Shell에서 직접 추가 python manage.py shell 입력 (django shell 실행) 다음 커맨드를 순차적으로 입력하여 Question 모델에 데이터 추가 1234&gt;&gt;&gt; from polls.models import Choice, Question&gt;&gt;&gt; from django.utils import timezone&gt;&gt;&gt; q = Question(question_text=&quot;What&#x27;s new?&quot;, pub_date=timezone.now())&gt;&gt;&gt; q.save() 앞서 저장한 데이터의 id 및 내용 확인 데이터 수정 및 업데이트 가능 admin 페이지에서도 업데이트된 데이터 확인 가능 Reference django Documentation : https://docs.djangoproject.com/en/3.2/intro/tutorial01/ 참고 블로그 : https://lucky516.tistory.com/55","categories":[{"name":"python","slug":"python","permalink":"http://gonekng.github.io/categories/python/"},{"name":"django","slug":"python/django","permalink":"http://gonekng.github.io/categories/python/django/"}],"tags":[{"name":"development","slug":"development","permalink":"http://gonekng.github.io/tags/development/"},{"name":"python","slug":"python","permalink":"http://gonekng.github.io/tags/python/"},{"name":"django","slug":"django","permalink":"http://gonekng.github.io/tags/django/"}],"author":"Jiwon Kang"},{"title":"Django 웹개발 튜토리얼 (2)","slug":"Python/Django/Django 웹개발 튜토리얼 (2)","date":"2024-02-16T14:23:08.000Z","updated":"2024-02-19T13:32:55.782Z","comments":true,"path":"2024/02/16/Python/Django/Django 웹개발 튜토리얼 (2)/","link":"","permalink":"http://gonekng.github.io/2024/02/16/Python/Django/Django%20%EC%9B%B9%EA%B0%9C%EB%B0%9C%20%ED%8A%9C%ED%86%A0%EB%A6%AC%EC%96%BC%20(2)/","excerpt":"","text":"Model 생성 polls&#x2F;model.py 작성 12345678910from django.db import modelsclass Question(models.Model): question_text = models.CharField(max_length=200) pub_date = models.DateTimeField(&#x27;date published&#x27;)class Choice(models.Model): question = models.ForeignKey(Question, on_delete=models.CASCADE) choice_text = models.CharField(max_length=200) votes = models.IntegerField(default=0) Question : 질문내용, 발행일자 모델 Choice : 질문내용, 선택내용, 투표번호 모델 Question과 Choice는 외래키로 연결되며, Question이 삭제되면 Choice도 함께 삭제되도록 설정 CharField : 문자열 데이터 필드 DateTimeField : 날짜 및 시간 데이터 필드 IntegerField : 정수형 숫자 데이터 필드 Model 활성화 프로젝트에 Application을 넣을 때, url 연결 외에도 Application의 모델을 프로젝트 모델 스키마에 연결해야 하는 작업 필요 mysite&#x2F;settings.py에 있는 INSTALLED_APPS 리스트에 투표 Application 등록 투표 Application의 클래스 이름은 polls&#x2F;apps.py에서 확인가능 → PollsConfig Migration : 기존 프로젝트의 모델에 Application 모델을 이식시키는 과정 makemigrations : python manage.py makemigrations polls 입력 polls 폴더 안에 migrations 폴더와 0001_initial.py가 생성됨 migrate : python manage.py migrate 입력 makemigrations와 migrate의 차이 migration은 sql로 진행됨 → 0001_initial.py와 같이 파이썬으로 표현한 다음(makemigrations), 이를 바탕으로 다시 sql로 변환하여 프로젝트에 반영함(migrate) makemigrations : application의 모델에 대한 변화를 기록 migrate : makemigrations의 변화 기록을 보고 실제로 프로젝트 모델 스키마에 application의 모델에 대한 변화를 반영 이후 모델링을 수정하고 migration 작업을 실시하면 0002, 0003… 등의 파이썬 파일이 쌓이게 됨 실제 이행되는 sql 쿼리 확인 : python manage.py sqlmigrate polls 변경기록번호 Reference django Documentation : https://docs.djangoproject.com/en/3.2/intro/tutorial01/ 참고 블로그 : https://lucky516.tistory.com/54","categories":[{"name":"python","slug":"python","permalink":"http://gonekng.github.io/categories/python/"},{"name":"django","slug":"python/django","permalink":"http://gonekng.github.io/categories/python/django/"}],"tags":[{"name":"development","slug":"development","permalink":"http://gonekng.github.io/tags/development/"},{"name":"python","slug":"python","permalink":"http://gonekng.github.io/tags/python/"},{"name":"django","slug":"django","permalink":"http://gonekng.github.io/tags/django/"}],"author":"Jiwon Kang"},{"title":"Django 웹개발 튜토리얼 (1)","slug":"Python/Django/Django 웹개발 튜토리얼 (1)","date":"2024-02-16T13:59:22.000Z","updated":"2024-02-16T14:17:16.074Z","comments":true,"path":"2024/02/16/Python/Django/Django 웹개발 튜토리얼 (1)/","link":"","permalink":"http://gonekng.github.io/2024/02/16/Python/Django/Django%20%EC%9B%B9%EA%B0%9C%EB%B0%9C%20%ED%8A%9C%ED%86%A0%EB%A6%AC%EC%96%BC%20(1)/","excerpt":"","text":"Django란? 파이썬으로 작성된 무료 오픈 소스 웹 프레임워크 웹 개발을 보다 쉽게 구현할 수 있으며, 보안, 확장성, 빠른 개발을 위한 다양한 기능 제공 Model-View-Template (MVT) 아키텍처 기반으로 이루어짐 데이터베이스 구조(Model), 사용자 인터페이스(Template), 애플리케이션 로직(View) → 일반적인 MVC 패턴과 용어의 차이가 있으나 원리는 동일함 Django 설치 및 서버 구동 python 인터프리터에서 django 설치 pip install django 입력 원하는 경로에 새로운 프로젝트 생성 django-admin startproject mysite 입력 개발 서버 구동 cd mysite &gt; python manage.py makemigrations &gt; python manage.py migrate &gt; python manage.py runserver 이후 http://127.0.0.1:8000/에 접속하면 다음과 같은 화면이 뜬다. 투표 Application 개발 Django는 Application 단위로 웹페이지를 개발하도록 되어 있으며, Application은 프로젝트 폴더에 넣었다 뺐다 할 수 있음 새로운 application 생성 python manage.py startapp polls 입력 polls 폴더 안에 생성된 views.py 코드 작성 12345from django.shortcuts import renderfrom django.http import HttpResponsedef index(request): return HttpResponse(&quot;Hello, World. You&#x27;re at the polls index.&quot;) index() : http 리퀘스트를 받아서 response 메시지 출력하는 함수 polls 폴더 안에 urls.py 생성 1234567from django.urls import pathfrom . import viewsurlpatterns = [ path(&#x27;&#x27;, views.index, name=&#x27;index&#x27;),] mysite 폴더 안에 있는 urls.py 코드 작성 프로젝트에 application을 넣고 빼는 작업은 url 연결로 가능함 1234567from django.contrib import adminfrom django.urls import include, pathurlpatterns = [ path(&#x27;polls/&#x27;, include(&#x27;polls.urls&#x27;)), path(&#x27;admin/&#x27;, admin.site.urls),] http://127.0.0.1:8000/polls에 접속하면 다음과 같은 화면 출력 Reference django Documentation : https://docs.djangoproject.com/en/3.2/intro/tutorial01/ 참고 블로그 : https://lucky516.tistory.com/52, https://lucky516.tistory.com/53","categories":[{"name":"python","slug":"python","permalink":"http://gonekng.github.io/categories/python/"},{"name":"django","slug":"python/django","permalink":"http://gonekng.github.io/categories/python/django/"}],"tags":[{"name":"development","slug":"development","permalink":"http://gonekng.github.io/tags/development/"},{"name":"python","slug":"python","permalink":"http://gonekng.github.io/tags/python/"},{"name":"django","slug":"django","permalink":"http://gonekng.github.io/tags/django/"}],"author":"Jiwon Kang"},{"title":"Pandas EX1 : split()을 이용한 텍스트 컬럼 생성","slug":"Python/Pandas/pandas_exercise1","date":"2024-02-13T13:51:00.000Z","updated":"2024-02-13T14:14:42.455Z","comments":true,"path":"2024/02/13/Python/Pandas/pandas_exercise1/","link":"","permalink":"http://gonekng.github.io/2024/02/13/Python/Pandas/pandas_exercise1/","excerpt":"","text":"연도별 전국읍면동_인구통계 데이터를 Pandas를 활용하여 통합정리하는 코드 텍스트 컬럼에 split() 함수를 적용하여 새로운 컬럼을 생성함 0 :: 필요한 라이브러리 임포트12345import osimport numpy as npimport pandas as pdimport warningswarnings.filterwarnings(&quot;ignore&quot;) 1 :: 파일 불러오기123456file_list = [file for file in os.listdir(&quot;전국읍면동_인구통계&quot;) if file.endswith(&#x27;csv&#x27;)]for i, file in enumerate(file_list): df = pd.read_csv(&quot;전국읍면동_인구통계&quot; + file, encoding=&#x27;cp949&#x27;) df = df.iloc[:,[0,1,5,9,13,17,21,25,29,33,37,41,45]] df[&#x27;행정구역&#x27;] = df[&#x27;행정구역&#x27;].str[:-12].apply(lambda x: x.strip()) df.columns = [&#x27;행정구역&#x27;, &#x27;1월&#x27;,&#x27;2월&#x27;,&#x27;3월&#x27;,&#x27;4월&#x27;,&#x27;5월&#x27;,&#x27;6월&#x27;,&#x27;7월&#x27;,&#x27;8월&#x27;,&#x27;9월&#x27;,&#x27;10월&#x27;,&#x27;11월&#x27;,&#x27;12월&#x27;] ‘전국읍면동_인구통계’ 폴더 하의 CSV 파일을 차례대로 불러오는 코드 인구수_전국_2010.csv 2 :: 텍스트 컬럼 SPLIT1234567df[&#x27;토큰_개수&#x27;] = df[&#x27;행정구역&#x27;].apply(lambda x: len(str(x).split()))for tokens in range(1, df[&#x27;토큰_개수&#x27;].max() + 1): df.loc[df[&#x27;토큰_개수&#x27;] == tokens, [f&#x27;토큰_&#123;i+1&#125;&#x27; for i in range(tokens)]] = df.loc[df[&#x27;토큰_개수&#x27;] == tokens, &#x27;행정구역&#x27;].str.split().tolist()df1 = df[df[&#x27;토큰_개수&#x27;] == 1]df2 = df[df[&#x27;토큰_개수&#x27;] == 2]df3 = df[df[&#x27;토큰_개수&#x27;] == 3]df4 = df[df[&#x27;토큰_개수&#x27;] == 4] 행정구역 컬럼 값이 단일값으로 되어있음 (ex. 서울특별시 종로구 삼청동) 따라서 split() 함수를 사용하여 공백을 기준으로 시도, 시군구, 행정동 컬럼을 구분함 → 텍스트 분할의 결과 토큰은 1~4개로 나타나며, 각 케이스의 특징을 데이터를 통해 확인하였음 123df1[&#x27;시도&#x27;] = df1[&#x27;토큰_1&#x27;]df1[&#x27;시군구&#x27;] = &#x27;전체&#x27;df1[&#x27;행정동&#x27;] = &#x27;전체&#x27; 토큰이 1개인 경우 시도 → 시도 전체 전체 ex. 서울특별시 → 서울특별시 전체 전체 1234567df2.loc[df2[&#x27;토큰_1&#x27;] != &#x27;세종특별자치시&#x27;, &#x27;시도&#x27;] = df2.loc[df2[&#x27;토큰_1&#x27;] != &#x27;세종특별자치시&#x27;, &#x27;토큰_1&#x27;]df2.loc[df2[&#x27;토큰_1&#x27;] != &#x27;세종특별자치시&#x27;, &#x27;시군구&#x27;] = df2.loc[df2[&#x27;토큰_2&#x27;] != &#x27;세종특별자치시&#x27;, &#x27;토큰_2&#x27;]df2.loc[df2[&#x27;토큰_1&#x27;] != &#x27;세종특별자치시&#x27;, &#x27;행정동&#x27;] = &#x27;전체&#x27;df2.loc[df2[&#x27;토큰_1&#x27;] == &#x27;세종특별자치시&#x27;, &#x27;시도&#x27;] = df2.loc[df2[&#x27;토큰_1&#x27;] == &#x27;세종특별자치시&#x27;, &#x27;토큰_1&#x27;]df2.loc[df2[&#x27;토큰_1&#x27;] == &#x27;세종특별자치시&#x27;, &#x27;시군구&#x27;] = df2.loc[df2[&#x27;토큰_1&#x27;] == &#x27;세종특별자치시&#x27;, &#x27;토큰_1&#x27;]df2.loc[df2[&#x27;토큰_1&#x27;] == &#x27;세종특별자치시&#x27;, &#x27;행정동&#x27;] = df2.loc[df2[&#x27;토큰_1&#x27;] == &#x27;세종특별자치시&#x27;, &#x27;토큰_2&#x27;] 토큰이 2개인 경우 시도 시군구 → 시도 시군구 전체 ex. 서울특별시 종로구 → 서울특별시 종로구 전체 세종특별자치시 행정동 → 세종특별자치시 세종특별자치시 행정동 ex. 세종특별자치시 한솔동 → 세종특별자치시 세종특별자치시 한솔동 1234567df3.loc[df3[&#x27;토큰_1&#x27;] != df3[&#x27;토큰_2&#x27;], &#x27;시도&#x27;] = df3.loc[df3[&#x27;토큰_1&#x27;] != df3[&#x27;토큰_2&#x27;], &#x27;토큰_1&#x27;]df3.loc[df3[&#x27;토큰_1&#x27;] != df3[&#x27;토큰_2&#x27;], &#x27;시군구&#x27;] = df3.loc[df3[&#x27;토큰_1&#x27;] != df3[&#x27;토큰_2&#x27;], &#x27;토큰_2&#x27;]df3.loc[df3[&#x27;토큰_1&#x27;] != df3[&#x27;토큰_2&#x27;], &#x27;행정동&#x27;] = df3.loc[df3[&#x27;토큰_1&#x27;] != df3[&#x27;토큰_2&#x27;], &#x27;토큰_3&#x27;]df3.loc[df3[&#x27;토큰_1&#x27;] == df3[&#x27;토큰_2&#x27;], &#x27;시도&#x27;] = df3.loc[df3[&#x27;토큰_1&#x27;] == df3[&#x27;토큰_2&#x27;], &#x27;토큰_1&#x27;]df3.loc[df3[&#x27;토큰_1&#x27;] == df3[&#x27;토큰_2&#x27;], &#x27;시군구&#x27;] = df3.loc[df3[&#x27;토큰_1&#x27;] == df3[&#x27;토큰_2&#x27;], &#x27;토큰_3&#x27;]df3.loc[df3[&#x27;토큰_1&#x27;] == df3[&#x27;토큰_2&#x27;], &#x27;행정동&#x27;] = &#x27;전체&#x27; 토큰이 3개인 경우 시도 시군구 행정동 → 시도 시군구 행정동 ex. 서울특별시 종로구 삼청동 → 서울특별시 종로구 삼청동 시도 시도 시군구 → 시도 시군구 전체 ex. 서울특별시 서울특별시 종로구 → 서울특별시 종로구 전체 1234567df4.loc[df4[&#x27;토큰_1&#x27;] != df4[&#x27;토큰_2&#x27;], &#x27;시도&#x27;] = df4.loc[df4[&#x27;토큰_1&#x27;] != df4[&#x27;토큰_2&#x27;], &#x27;토큰_1&#x27;]df4.loc[df4[&#x27;토큰_1&#x27;] != df4[&#x27;토큰_2&#x27;], &#x27;시군구&#x27;] = df4.loc[df4[&#x27;토큰_1&#x27;] != df4[&#x27;토큰_2&#x27;], &#x27;토큰_2&#x27;] + &quot; &quot; + df4.loc[df4[&#x27;토큰_1&#x27;] != df4[&#x27;토큰_2&#x27;], &#x27;토큰_3&#x27;]df4.loc[df4[&#x27;토큰_1&#x27;] != df4[&#x27;토큰_2&#x27;], &#x27;행정동&#x27;] = df4.loc[df4[&#x27;토큰_1&#x27;] != df4[&#x27;토큰_2&#x27;], &#x27;토큰_4&#x27;]df4.loc[df4[&#x27;토큰_1&#x27;] == df4[&#x27;토큰_2&#x27;], &#x27;시도&#x27;] = df4.loc[df4[&#x27;토큰_1&#x27;] == df4[&#x27;토큰_2&#x27;], &#x27;토큰_1&#x27;]df4.loc[df4[&#x27;토큰_1&#x27;] == df4[&#x27;토큰_2&#x27;], &#x27;시군구&#x27;] = df4.loc[df4[&#x27;토큰_1&#x27;] == df4[&#x27;토큰_2&#x27;], &#x27;토큰_3&#x27;] + &quot; &quot; + df4.loc[df4[&#x27;토큰_1&#x27;] == df4[&#x27;토큰_2&#x27;], &#x27;토큰_4&#x27;]df4.loc[df4[&#x27;토큰_1&#x27;] == df4[&#x27;토큰_2&#x27;], &#x27;행정동&#x27;] = &#x27;전체&#x27; 토큰이 4개인 경우 시도 시군구1 시군구2 행정동 → 시도 시군구1+2 행정동 ex. 경기도 용인시 수지구 죽전동 → 경기도 용인시 수지구 죽전동 시도 시도 시군구1 시군구2 → 시도 시군구1+2 전체 ex. 경기도 경기도 용인시 수지구 → 경기도 용인시 수지구 전체 3 :: 테이블 취합 및 가공12345678df = pd.concat([df1,df2,df3,df4], sort=True)df = df[[&#x27;시도&#x27;, &#x27;시군구&#x27;, &#x27;행정동&#x27;, &#x27;1월&#x27;,&#x27;2월&#x27;,&#x27;3월&#x27;,&#x27;4월&#x27;,&#x27;5월&#x27;,&#x27;6월&#x27;,&#x27;7월&#x27;,&#x27;8월&#x27;,&#x27;9월&#x27;,&#x27;10월&#x27;,&#x27;11월&#x27;,&#x27;12월&#x27;]]df[&#x27;연도&#x27;] = file[-8:-4]df = pd.melt(df, id_vars=[&#x27;시도&#x27;, &#x27;시군구&#x27;, &#x27;행정동&#x27;, &#x27;연도&#x27;], var_name=&#x27;월&#x27;, value_name=&#x27;인구수&#x27;)df[&#x27;월&#x27;] = df[&#x27;월&#x27;].str[:-1]df.drop_duplicates(inplace=True)df[&#x27;인구수&#x27;] = pd.to_numeric(df[&#x27;인구수&#x27;].str.replace(&#x27;,&#x27;, &#x27;&#x27;), errors=&#x27;coerce&#x27;)df = df[df[&#x27;인구수&#x27;] &gt; 0] concat() 함수로 각각의 데이터프레임을 행을 기준으로 병합함 1월부터 12월까지의 데이터가 각 컬럼으로 구분되어있어, melt() 함수로 각각의 행으로 나누어 데이터 형태를 변환함 4 :: CSV 파일 통합저장1234if i==0: df.to_csv(&quot;인구수_전체데이터.csv&quot;, mode=&#x27;w&#x27;, index=False, encoding=&#x27;cp949&#x27;)else: df.to_csv(&quot;인구수_전체데이터.csv&quot;, mode=&#x27;a&#x27;, index=False, header=False, encoding=&#x27;cp949&#x27;) for문의 첫번째 루프에서는 to_csv() 함수의 덮어쓰기(write) 모드를, 이후의 루프에서는 이어쓰기(append) 모드를 적용함 전체 코드123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687import osimport numpy as npimport pandas as pdimport warningswarnings.filterwarnings(&quot;ignore&quot;)file_list = [file for file in os.listdir(&quot;전국읍면동_인구통계&quot;) if file.endswith(&#x27;csv&#x27;)]for i, file in enumerate(file_list): # CSV 파일 세팅 df = pd.read_csv(&quot;전국읍면동_인구통계&quot; + file, encoding=&#x27;cp949&#x27;) df = df.iloc[:,[0,1,5,9,13,17,21,25,29,33,37,41,45]] df[&#x27;행정구역&#x27;] = df[&#x27;행정구역&#x27;].str[:-12].apply(lambda x: x.strip()) df.columns = [&#x27;행정구역&#x27;, &#x27;1월&#x27;,&#x27;2월&#x27;,&#x27;3월&#x27;,&#x27;4월&#x27;,&#x27;5월&#x27;,&#x27;6월&#x27;,&#x27;7월&#x27;,&#x27;8월&#x27;,&#x27;9월&#x27;,&#x27;10월&#x27;,&#x27;11월&#x27;,&#x27;12월&#x27;] # -- 행정구역 컬럼 값이 단일값으로 되어있음 (ex. 서울특별시 종로구 삼청동) # -- 따라서 split 함수를 사용하여 공백을 기준으로 시도, 시군구, 행정동 컬럼을 구분함 # 토큰개수 1~4 df[&#x27;토큰_개수&#x27;] = df[&#x27;행정구역&#x27;].apply(lambda x: len(str(x).split())) for tokens in range(1, df[&#x27;토큰_개수&#x27;].max() + 1): df.loc[df[&#x27;토큰_개수&#x27;] == tokens, [f&#x27;토큰_&#123;i+1&#125;&#x27; for i in range(tokens)]] = df.loc[df[&#x27;토큰_개수&#x27;] == tokens, &#x27;행정구역&#x27;].str.split().tolist() df1 = df[df[&#x27;토큰_개수&#x27;] == 1] df2 = df[df[&#x27;토큰_개수&#x27;] == 2] df3 = df[df[&#x27;토큰_개수&#x27;] == 3] df4 = df[df[&#x27;토큰_개수&#x27;] == 4] # --- 토큰이 1개인 경우 --- # 시도 -&gt; 시도 / 전체 / 전체 # ex. 서울특별시 -&gt; 서울특별시 / 전체 / 전체 df1[&#x27;시도&#x27;] = df1[&#x27;토큰_1&#x27;] df1[&#x27;시군구&#x27;] = &#x27;전체&#x27; df1[&#x27;행정동&#x27;] = &#x27;전체&#x27; # --- 토큰이 2개인 경우 --- # 시도 시군구 -&gt; 시도 / 시군구 / 전체 # ex. 서울특별시 종로구 -&gt; 서울특별시 / 종로구 / 전체 df2.loc[df2[&#x27;토큰_1&#x27;] != &#x27;세종특별자치시&#x27;, &#x27;시도&#x27;] = df2.loc[df2[&#x27;토큰_1&#x27;] != &#x27;세종특별자치시&#x27;, &#x27;토큰_1&#x27;] df2.loc[df2[&#x27;토큰_1&#x27;] != &#x27;세종특별자치시&#x27;, &#x27;시군구&#x27;] = df2.loc[df2[&#x27;토큰_2&#x27;] != &#x27;세종특별자치시&#x27;, &#x27;토큰_2&#x27;] df2.loc[df2[&#x27;토큰_1&#x27;] != &#x27;세종특별자치시&#x27;, &#x27;행정동&#x27;] = &#x27;전체&#x27; # 세종특별자치시 행정동 -&gt; 세종특별자치시 / 세종특별자치시 / 행정동 # ex. 세종특별자치시 한솔동 -&gt; 세종특별자치시 / 세종특별자치시 / 한솔동 df2.loc[df2[&#x27;토큰_1&#x27;] == &#x27;세종특별자치시&#x27;, &#x27;시도&#x27;] = df2.loc[df2[&#x27;토큰_1&#x27;] == &#x27;세종특별자치시&#x27;, &#x27;토큰_1&#x27;] df2.loc[df2[&#x27;토큰_1&#x27;] == &#x27;세종특별자치시&#x27;, &#x27;시군구&#x27;] = df2.loc[df2[&#x27;토큰_1&#x27;] == &#x27;세종특별자치시&#x27;, &#x27;토큰_1&#x27;] df2.loc[df2[&#x27;토큰_1&#x27;] == &#x27;세종특별자치시&#x27;, &#x27;행정동&#x27;] = df2.loc[df2[&#x27;토큰_1&#x27;] == &#x27;세종특별자치시&#x27;, &#x27;토큰_2&#x27;] # --- 토큰이 3개인 경우 --- # 시도 시군구 행정동 -&gt; 시도 / 시군구 / 행정동 # ex. 서울특별시 종로구 삼청동 -&gt; 서울특별시 / 종로구 / 삼청동 df3.loc[df3[&#x27;토큰_1&#x27;] != df3[&#x27;토큰_2&#x27;], &#x27;시도&#x27;] = df3.loc[df3[&#x27;토큰_1&#x27;] != df3[&#x27;토큰_2&#x27;], &#x27;토큰_1&#x27;] df3.loc[df3[&#x27;토큰_1&#x27;] != df3[&#x27;토큰_2&#x27;], &#x27;시군구&#x27;] = df3.loc[df3[&#x27;토큰_1&#x27;] != df3[&#x27;토큰_2&#x27;], &#x27;토큰_2&#x27;] df3.loc[df3[&#x27;토큰_1&#x27;] != df3[&#x27;토큰_2&#x27;], &#x27;행정동&#x27;] = df3.loc[df3[&#x27;토큰_1&#x27;] != df3[&#x27;토큰_2&#x27;], &#x27;토큰_3&#x27;] # 시도 시도 시군구 -&gt; 시도 / 시군구 / 전체 # ex. 서울특별시 서울특별시 종로구 -&gt; 서울특별시 / 종로구 / 전체 df3.loc[df3[&#x27;토큰_1&#x27;] == df3[&#x27;토큰_2&#x27;], &#x27;시도&#x27;] = df3.loc[df3[&#x27;토큰_1&#x27;] == df3[&#x27;토큰_2&#x27;], &#x27;토큰_1&#x27;] df3.loc[df3[&#x27;토큰_1&#x27;] == df3[&#x27;토큰_2&#x27;], &#x27;시군구&#x27;] = df3.loc[df3[&#x27;토큰_1&#x27;] == df3[&#x27;토큰_2&#x27;], &#x27;토큰_3&#x27;] df3.loc[df3[&#x27;토큰_1&#x27;] == df3[&#x27;토큰_2&#x27;], &#x27;행정동&#x27;] = &#x27;전체&#x27; # --- 토큰이 4개인 경우 --- # 시도 시군구1 시군구2 행정동 -&gt; 시도 / 시군구1+2 / 행정동 # ex. 경기도 용인시 수지구 죽전동 -&gt; 경기도 / 용인시 수지구 / 죽전동 df4.loc[df4[&#x27;토큰_1&#x27;] != df4[&#x27;토큰_2&#x27;], &#x27;시도&#x27;] = df4.loc[df4[&#x27;토큰_1&#x27;] != df4[&#x27;토큰_2&#x27;], &#x27;토큰_1&#x27;] df4.loc[df4[&#x27;토큰_1&#x27;] != df4[&#x27;토큰_2&#x27;], &#x27;시군구&#x27;] = df4.loc[df4[&#x27;토큰_1&#x27;] != df4[&#x27;토큰_2&#x27;], &#x27;토큰_2&#x27;] + &quot; &quot; + df4.loc[df4[&#x27;토큰_1&#x27;] != df4[&#x27;토큰_2&#x27;], &#x27;토큰_3&#x27;] df4.loc[df4[&#x27;토큰_1&#x27;] != df4[&#x27;토큰_2&#x27;], &#x27;행정동&#x27;] = df4.loc[df4[&#x27;토큰_1&#x27;] != df4[&#x27;토큰_2&#x27;], &#x27;토큰_4&#x27;] # 시도 시도 시군구1 시군구2 -&gt; 시도 / 시군구1+2 / 전체 # ex. 경기도 경기도 용인시 수지구 -&gt; 경기도 / 용인시 수지구 / 전체 df4.loc[df4[&#x27;토큰_1&#x27;] == df4[&#x27;토큰_2&#x27;], &#x27;시도&#x27;] = df4.loc[df4[&#x27;토큰_1&#x27;] == df4[&#x27;토큰_2&#x27;], &#x27;토큰_1&#x27;] df4.loc[df4[&#x27;토큰_1&#x27;] == df4[&#x27;토큰_2&#x27;], &#x27;시군구&#x27;] = df4.loc[df4[&#x27;토큰_1&#x27;] == df4[&#x27;토큰_2&#x27;], &#x27;토큰_3&#x27;] + &quot; &quot; + df4.loc[df4[&#x27;토큰_1&#x27;] == df4[&#x27;토큰_2&#x27;], &#x27;토큰_4&#x27;] df4.loc[df4[&#x27;토큰_1&#x27;] == df4[&#x27;토큰_2&#x27;], &#x27;행정동&#x27;] = &#x27;전체&#x27; # 테이블 취합 및 가공 df = pd.concat([df1,df2,df3,df4], sort=True) df = df[[&#x27;시도&#x27;, &#x27;시군구&#x27;, &#x27;행정동&#x27;, &#x27;1월&#x27;,&#x27;2월&#x27;,&#x27;3월&#x27;,&#x27;4월&#x27;,&#x27;5월&#x27;,&#x27;6월&#x27;,&#x27;7월&#x27;,&#x27;8월&#x27;,&#x27;9월&#x27;,&#x27;10월&#x27;,&#x27;11월&#x27;,&#x27;12월&#x27;]] df[&#x27;연도&#x27;] = file[-8:-4] df = pd.melt(df, id_vars=[&#x27;시도&#x27;, &#x27;시군구&#x27;, &#x27;행정동&#x27;, &#x27;연도&#x27;], var_name=&#x27;월&#x27;, value_name=&#x27;인구수&#x27;) df[&#x27;월&#x27;] = df[&#x27;월&#x27;].str[:-1] df.drop_duplicates(inplace=True) df[&#x27;인구수&#x27;] = pd.to_numeric(df[&#x27;인구수&#x27;].str.replace(&#x27;,&#x27;, &#x27;&#x27;), errors=&#x27;coerce&#x27;) df = df[df[&#x27;인구수&#x27;] &gt; 0] # CSV 파일 통합저장 if i==0: df.to_csv(&quot;인구수_전체데이터.csv&quot;, mode=&#x27;w&#x27;, index=False, encoding=&#x27;cp949&#x27;) else: df.to_csv(&quot;인구수_전체데이터.csv&quot;, mode=&#x27;a&#x27;, index=False, header=False, encoding=&#x27;cp949&#x27;)","categories":[{"name":"python","slug":"python","permalink":"http://gonekng.github.io/categories/python/"},{"name":"pandas","slug":"python/pandas","permalink":"http://gonekng.github.io/categories/python/pandas/"}],"tags":[{"name":"python","slug":"python","permalink":"http://gonekng.github.io/tags/python/"},{"name":"pandas","slug":"pandas","permalink":"http://gonekng.github.io/tags/pandas/"}],"author":"Jiwon Kang"},{"title":"Streamlit & Sqlite3 연동 예제","slug":"Python/Streamlit/streamlit_exersice2","date":"2024-02-08T02:17:52.000Z","updated":"2024-02-13T13:52:45.765Z","comments":true,"path":"2024/02/08/Python/Streamlit/streamlit_exersice2/","link":"","permalink":"http://gonekng.github.io/2024/02/08/Python/Streamlit/streamlit_exersice2/","excerpt":"","text":"Streamlit 기반 웹 대시보드를 Sqlite DB와 연동하는 작업 Sqlite : 별도의 프로그램 설치 없이 Python 코드로 손쉽게 DB를 구성할 수 있음 0 :: 필요한 라이브러리 임포트123456import time, sys, osimport numpy as npimport pandas as pdimport sqlite3import streamlit as st 1 :: 새로운 데이터베이스 생성 및 연동123456789101112131415161718192021222324252627def create_connection(db_file): conn = None try: conn = sqlite3.connect(db_file) except Exception as e: st.write(e) return conndef create_database(): st.write(&quot;# PAGE1 : 데이터베이스 만들기&quot;) st.write(&quot;---&quot;) db_filename = st.text_input(&quot;데이터베이스 이름을 입력하세요.&quot;) create_db = st.button(&#x27;데이터베이스 생성&#x27;) if create_db: if db_filename.endswith(&#x27;.db&#x27;): if db_filename not in [file for file in os.listdir(os.getcwd())]: conn = create_connection(db_filename) st.success(&#x27;데이터베이스 생성 완료.&#x27;) else: st.error(&#x27;이미 존재하는 데이터베이스입니다. 다시 입력하세요.&#x27;) else: st.error(&#x27;파일이름은 .db로 끝나야 합니다. 다시 입력하세요.&#x27;) sqlite3 라이브러리의 connect 함수를 통해 db_file을 연동 ‘데이터베이스 생성’ 버튼을 클릭하면 텍스트로 입력받은 이름의 .db 파일을 생성 파일이름은 .db로 끝나야 하며, 이미 존재하는 이름인 경우 에러 발생 2 :: CSV 파일 업로드 및 DB 저장123456789101112131415161718192021222324252627282930313233343536373839def upload_data(): st.write(&quot;# PAGE2 : 파일 업로드하기&quot;) st.write(&quot;---&quot;) sqlite_dbs = [file for file in os.listdir(&#x27;.&#x27;) if file.endswith(&#x27;.db&#x27;)] db_filename = st.selectbox(&#x27;데이터베이스를 선택하세요.&#x27;, sqlite_dbs) if db_filename is not None: conn = create_connection(db_filename) cursor = conn.cursor() cursor.execute(&quot;SELECT name FROM sqlite_master WHERE type=&#x27;table&#x27;;&quot;) tables = cursor.fetchall() tables = [table[0] for table in tables] table_name = st.text_input(&#x27;테이블 이름을 입력하세요.&#x27;) if len(table_name) &gt; 0: if table_name not in tables: uploaded_file = st.file_uploader(&#x27;업로드할 파일을 첨부하세요.&#x27;) if uploaded_file is not None: try: df = pd.read_csv(uploaded_file, encoding=&#x27;cp949&#x27;) st.write(&#x27;**Data loaded successfully. These are the first 3 rows.**&#x27;) st.dataframe(df.head(3), use_container_width=True) col1, col2 = st.columns([8,1]) is_apply = col2.button(&#x27;Upload&#x27;, use_container_width=True) if is_apply: pg_bar = col1.progress(0, text=&quot;⏩Progress&quot;) for percent_complete in range(100): time.sleep(0.01) pg_bar.progress(percent_complete + 1, text=&quot;Progress&quot;) df.to_sql(name=table_name, con=conn, if_exists=&#x27;replace&#x27;, index=False) time.sleep(0.1) st.success(&quot;업로드가 완료되었습니다.&quot;) except Exception as e: st.write(e) else: st.error(&quot;이미 존재하는 테이블입니다. 다시 입력하세요.&quot;) else: st.error(&#x27;DB 파일이 존재하지 않습니다. DB 파일을 먼저 생성하세요.&#x27;) 현재 경로의 .db 파일 중 하나를 선택하고, CSV 파일을 불러온 후 테이블에 저장 텍스트로 입력받은 테이블 이름이 이미 존재하는 경우 에러 발생 CSV 파일을 불러온 후 첫 3행 출력 내용을 확인한 후 업로드하도록 설정 업로드 버튼 클릭 시 바로 테이블에 저장이 됨 → Progress Bar는 보여주기용 3 :: SQL 쿼리로 데이터 조작 및 CSV 파일로 저장1234567891011121314151617181920212223242526272829303132def run_query(): st.write(&quot;# PAGE3 : SQL 쿼리로 데이터 조작하기&quot;) st.write(&quot;---&quot;) sqlite_dbs = [file for file in os.listdir(&#x27;.&#x27;) if file.endswith(&#x27;.db&#x27;)] db_filename = st.selectbox(&#x27;DB Filename&#x27;, sqlite_dbs) query = st.text_area(&#x27;SQL Query&#x27;, height=150) if db_filename is not None: if len(query) == 0: is_disabled = True else: is_disabled = False submitted = st.button(&#x27;Run Query&#x27;, disabled=is_disabled) if submitted: conn = create_connection(db_filename) query = conn.execute(query) cols = [column[0] for column in query.description] results_df= pd.DataFrame.from_records( data = query.fetchall(), columns = cols ) st.dataframe(results_df) if st.button(&#x27;Download&#x27;): convert_df(results_df) else: st.error(&#x27;DB 파일이 존재하지 않습니다. DB 파일을 먼저 생성하세요.&#x27;)def convert_df(df): return df.to_csv(index=False).encode(&#x27;cp949&#x27;) 현재 경로의 .db 파일 중 하나를 선택하고, SQL 쿼리를 입력하여 해당 DB의 데이터를 조작(CRUD) SQL 쿼리를 입력해야 Run Query 버튼이 활성화되도록 설정 convert_df : 쿼리 실행 후의 데이터 테이블을 CSV 파일로 저장하는 함수 4 :: 기본 화면 구성 및 사이드바 설정123456789101112131415161718192021222324252627282930def main(): # Page Configuration st.set_page_config( page_title=&quot;Sqlite3 DB Connect with Streamlit&quot;, page_icon=&quot;⚒️&quot;, layout=&quot;wide&quot;, initial_sidebar_state=&quot;auto&quot;, menu_items=&#123; &#x27;Get Help&#x27;: &#x27;mailto:donumm64@gmail.com&#x27;, &#x27;About&#x27;: &quot;*Made by gonekng*&quot; &#125; ) # 사이드바 설정 st.sidebar.subheader(&quot;🎈Streamlit으로 Sqlite3 DB 연동하기&quot;) st.sidebar.write(&quot;---&quot;) page_names_to_funcs = &#123; &quot;Create Database&quot;: create_database, &quot;Upload Data&quot;: upload_data, &quot;Run Query&quot;: run_query, &#125; selected_page = st.sidebar.selectbox(&quot;Select a page&quot;, page_names_to_funcs.keys(), label_visibility=&#x27;collapsed&#x27;) page_names_to_funcs[selected_page]()if __name__ == &quot;__main__&quot;: main() st.set_page_config : 기본 페이지 설정 page_names_to_funcs : 각 페이지를 구성하는 함수 매칭 Reference Streamlit Documentation : https://docs.streamlit.io/ 참고블로그 : https://blog.naver.com/v-world/222009887650 전체 코드123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124125126127128129130131132133134135136137138139140141142143144import time, sys, osimport numpy as npimport pandas as pdimport sqlite3import streamlit as st# DB 연동def create_connection(db_file): conn = None try: conn = sqlite3.connect(db_file) except Exception as e: st.write(e) return conn# DB 생성def create_database(): st.write(&quot;# PAGE1 : 데이터베이스 만들기&quot;) st.write(&quot;---&quot;) db_filename = st.text_input(&quot;데이터베이스 이름을 입력하세요.&quot;) create_db = st.button(&#x27;데이터베이스 생성&#x27;) if create_db: if db_filename.endswith(&#x27;.db&#x27;): if db_filename not in [file for file in os.listdir(os.getcwd())]: conn = create_connection(db_filename) st.success(&#x27;데이터베이스 생성 완료.&#x27;) else: st.error(&#x27;이미 존재하는 데이터베이스입니다. 다시 입력하세요.&#x27;) else: st.error(&#x27;파일이름은 .db로 끝나야 합니다. 다시 입력하세요.&#x27;)# 데이터 업로드def upload_data(): st.write(&quot;# PAGE2 : 파일 업로드하기&quot;) st.write(&quot;---&quot;) sqlite_dbs = [file for file in os.listdir(&#x27;.&#x27;) if file.endswith(&#x27;.db&#x27;)] db_filename = st.selectbox(&#x27;데이터베이스를 선택하세요.&#x27;, sqlite_dbs) if db_filename is not None: conn = create_connection(db_filename) cursor = conn.cursor() cursor.execute(&quot;SELECT name FROM sqlite_master WHERE type=&#x27;table&#x27;;&quot;) tables = cursor.fetchall() tables = [table[0] for table in tables] table_name = st.text_input(&#x27;테이블 이름을 입력하세요.&#x27;) if len(table_name) &gt; 0: if table_name not in tables: uploaded_file = st.file_uploader(&#x27;업로드할 파일을 첨부하세요.&#x27;) if uploaded_file is not None: try: df = pd.read_csv(uploaded_file, encoding=&#x27;cp949&#x27;) st.write(&#x27;**Data loaded successfully. These are the first 3 rows.**&#x27;) st.dataframe(df.head(3), use_container_width=True) col1, col2 = st.columns([8,1]) is_apply = col2.button(&#x27;Upload&#x27;, use_container_width=True) if is_apply: pg_bar = col1.progress(0, text=&quot;⏩Progress&quot;) for percent_complete in range(100): time.sleep(0.01) pg_bar.progress(percent_complete + 1, text=&quot;Progress&quot;) df.to_sql(name=table_name, con=conn, if_exists=&#x27;replace&#x27;, index=False) time.sleep(0.1) st.success(&quot;업로드가 완료되었습니다.&quot;) except Exception as e: st.write(e) else: st.error(&quot;이미 존재하는 테이블입니다. 다시 입력하세요.&quot;) else: st.error(&#x27;DB 파일이 존재하지 않습니다. DB 파일을 먼저 생성하세요.&#x27;)# 쿼리 실행def run_query(): st.write(&quot;# PAGE3 : SQL 쿼리로 데이터 조작하기&quot;) st.write(&quot;---&quot;) sqlite_dbs = [file for file in os.listdir(&#x27;.&#x27;) if file.endswith(&#x27;.db&#x27;)] db_filename = st.selectbox(&#x27;DB Filename&#x27;, sqlite_dbs) query = st.text_area(&#x27;SQL Query&#x27;, height=150) if db_filename is not None: if len(query) == 0: is_disabled = True else: is_disabled = False submitted = st.button(&#x27;Run Query&#x27;, disabled=is_disabled) if submitted: conn = create_connection(db_filename) query = conn.execute(query) cols = [column[0] for column in query.description] results_df= pd.DataFrame.from_records( data = query.fetchall(), columns = cols ) st.dataframe(results_df) if st.button(&#x27;Download&#x27;): convert_df(results_df) else: st.error(&#x27;DB 파일이 존재하지 않습니다. DB 파일을 먼저 생성하세요.&#x27;)def convert_df(df): return df.to_csv(index=False).encode(&#x27;cp949&#x27;)# --------------------- 메인 함수 --------------------- #def main(): # Page Configuration st.set_page_config( page_title=&quot;Sqlite3 DB Connect with Streamlit&quot;, page_icon=&quot;⚒️&quot;, layout=&quot;wide&quot;, initial_sidebar_state=&quot;auto&quot;, menu_items=&#123; &#x27;Get Help&#x27;: &#x27;mailto:donumm64@gmail.com&#x27;, &#x27;About&#x27;: &quot;*Made by gonekng*&quot; &#125; ) # 사이드바 설정 st.sidebar.subheader(&quot;🎈Streamlit으로 Sqlite3 DB 연동하기&quot;) st.sidebar.write(&quot;---&quot;) page_names_to_funcs = &#123; &quot;Create Database&quot;: create_database, &quot;Upload Data&quot;: upload_data, &quot;Run Query&quot;: run_query, &#125; selected_page = st.sidebar.selectbox(&quot;Select a page&quot;, page_names_to_funcs.keys(), label_visibility=&#x27;collapsed&#x27;) page_names_to_funcs[selected_page]()if __name__ == &quot;__main__&quot;: main()","categories":[{"name":"python","slug":"python","permalink":"http://gonekng.github.io/categories/python/"},{"name":"streamlit","slug":"python/streamlit","permalink":"http://gonekng.github.io/categories/python/streamlit/"}],"tags":[{"name":"python","slug":"python","permalink":"http://gonekng.github.io/tags/python/"},{"name":"pandas","slug":"pandas","permalink":"http://gonekng.github.io/tags/pandas/"},{"name":"streamlit","slug":"streamlit","permalink":"http://gonekng.github.io/tags/streamlit/"},{"name":"sqlite","slug":"sqlite","permalink":"http://gonekng.github.io/tags/sqlite/"}],"author":"Jiwon Kang"},{"title":"Streamlit을 이용한 지도 시각화 예제","slug":"Python/Streamlit/streamlit_exersice1","date":"2023-04-06T13:29:04.000Z","updated":"2023-04-06T14:10:37.222Z","comments":true,"path":"2023/04/06/Python/Streamlit/streamlit_exersice1/","link":"","permalink":"http://gonekng.github.io/2023/04/06/Python/Streamlit/streamlit_exersice1/","excerpt":"","text":"Streamlit이란?Python으로 작성된 데이터 시각화 및 웹 애플리케이션 개발용 프레임워크 웹 어플리케이션 개발 시간을 줄일 수 있고, 데이터 시각화 라이브러리와 연동하여 직관적인 분석이 가능 다른 웹 프레임워크에 비해 고급 기능이나 복잡한 애플리케이션을 만드는 데에는 다소 제한적 Streamlit 예제이번 예제는 지인들과의 약속 장소를 정하던 중 Streamlit을 이용하여 홍대입구역까지의 거리를 알아보기 위해 만든 간단한 웹애플리케이션이다. Folium 패키지를 이용하여 지도 상에 각 위치를 표시하고, Streamlit에서 제공하는 탭 기능을 이용하여 데이터와 지도를 함께 제공한다. 이때 Vworld에서 제공하는 API를 통해 지도에 배경 레이어를 삽입하여 보기 쉽게 시각화하였다. 1. 필요한 라이브러리 Import123456import numpy as npimport pandas as pdimport streamlit as stfrom PIL import Imageimport foliumimport vworld_key numpy : 수치 계산을 위한 라이브러리 pandas : 데이터를 다루기 위한 라이브러리 streamlit : 파이썬 기반의 웹 애플리케이션 개발 도구 PIL : 이미지 처리 라이브러리 folium : 지도 시각화 라이브러리 vworld_key : 지도 API를 사용하기 위한 API 키 (비공개) 2. 페이지 기본 설정1st.set_page_config(page_title=&#x27;Where to meet&#x27;, page_icon=&#x27;🌱&#x27;, layout=&quot;wide&quot;) streamlit에서 제공하는 set_page_config() 함수를 사용하여 페이지 설정 가능 layout : 페이지의 레이아웃 설정 (wide, centered 등) theme : 페이지의 테마 설정 (light, dark, colorblind 등) 3. 사이드바 커스터마이징12345678910st.sidebar.image(Image.open(&#x27;streamlit_logo.png&#x27;))st.sidebar.write(&quot;---&quot;)rainbow = [&#x27;red&#x27;, &#x27;orange&#x27;, &#x27;yellow&#x27;, &#x27;green&#x27;, &#x27;blue&#x27;, &#x27;navy&#x27;, &#x27;purple&#x27;]color = [&#x27;black&#x27;, &#x27;black&#x27;, &#x27;black&#x27;, &#x27;white&#x27;, &#x27;white&#x27;, &#x27;white&#x27;, &#x27;white&#x27;]text = &#x27;WELCOME&#x27;for r, c, t in zip(rainbow, color, text): st.sidebar.markdown(f&quot;&lt;h3 style=&#x27;color:&#123;c&#125;; background-color:&#123;r&#125;&#x27;&gt;__&#123;t&#125;:&lt;/h3&gt;&quot;, unsafe_allow_html=True)st.sidebar.write(&quot;---&quot;)st.sidebar.text(&quot;This is Jiwon!\\nNice to meet you!&quot;) st.sidebar 함수를 사용하여 사이드바를 커스터마이징할 수 있음 st.sidebar.image() 함수로 이미지를 출력 Image 라이브러리의 open 함수를 사용하여 저장된 이미지 파일을 불러옴 st.sidebar.write() &#x2F; st.sidebar.markdown() &#x2F; st.sidebar.text() write 함수에 “—“ 입력하여 화면에 구분선 추가 unsafe_allow_html : html 태그를 사용할 수 있도록 허용하는 기능 4. 메인 화면 작성123st.header(&quot;A Letter From Peter&quot;)st.subheader(&#x27;:blue[&quot;Let me know where we will meet on Satuerday, with the dashboard made by streamlit.&quot;]&#x27;)st.write(&quot;---&quot;) st.header() &#x2F; st.subheader() 함수로 제목 및 부제목을 지정 4-1. 레이아웃 (컬럼 분할)123456col1, col2 = st.columns([1,2])with col1: st.image(Image.open(&#x27;question.jpg&#x27;))with col2: st.subheader(&#x27;:blue[&quot;What about 홍대입구?&quot;]&#x27;) st.columns() : 화면을 분할하고자 하는 컬럼 개수 및 크기만큼 리스트 형태로 입력 with 구문으로 각 컬럼에서 출력하고자 하는 내용 작성 4-2. 데이터 Load12345center = [37.5575,126.9245] # 홍대입구역 좌표# 데이터 불러오기df = pd.read_csv(&quot;place.csv&quot;, encoding=&#x27;utf-8&#x27;)df[&#x27;to_홍대&#x27;] = np.round(np.sqrt(np.power((df[&#x27;Lat&#x27;]-center[0]),2) + np.power((df[&#x27;Lon&#x27;]-center[1]),2)),2) 본 예제에서는 기준점으로 사용할 데이터로 홍대입구역의 좌표를 사용함 csv 파일을 불러온 후, 각 지역에 대하여 홍대입구와의 거리를 나타내는 to_홍대 라는 새로운 컬럼 생성 np.power() : 첫번째 인수를 두번째 인수만큼 거듭제곱하는 함수 np.sqrt() : 양의 제곱근을 계산하는 함수 np.round() : 첫번째 인수를 두번째 인수의 자릿수까지 반올림하는 함수 4-3. 탭 기능 추가1234567tab1, tab2 = st.tabs([&#x27;On Map&#x27;, &#x27;Raw Data&#x27;])with tab2: st.write(df) with tab1: st.write(&quot;---&quot;) st.tabs() : 화면에 출력하고자 하는 탭의 이름을 리스트 형태로 입력 with 구문으로 각 탭에서 출력하고자 하는 내용 작성 5. 지도 시각화5-1. 지도 객체 생성1m = folium.Map(location=center, zoom_start=11, min_zoom=9, max_zoom=12) folium 라이브러리의 Map() 함수를 사용하여 지도 객체를 생성 location : 지도의 중심점 좌표 정보가 담긴 변수를 전달 zoom_start : 초기 확대&#x2F;축소 수준을 지정합니다. min_zoom &#x2F; max_zoom : 최소&#x2F;최대 줌 수준 지정 5-2. 배경 레이어 삽입(*vworld API)1234567tiles = f&quot;http://api.vworld.kr/req/wmts/1.0.0/&#123;vworld_key.key&#125;/Base/&#123;&#123;z&#125;&#125;/&#123;&#123;y&#125;&#125;/&#123;&#123;x&#125;&#125;.png&quot;folium.TileLayer( tiles=tiles, attr=&quot;Vworld&quot;, overlay=True, control=True).add_to(m) 지도의 배경 레이어는 공간정보 오픈플랫폼 오픈API(https://www.vworld.kr/dev/v4api.do)를 사용하여 삽입하였음 &#123;&#123;z&#125;&#125;, &#123;&#123;y&#125;&#125;, &#123;&#123;x&#125;&#125;는 folium에서 동적으로 생성되는 변수로, tiles URL에 삽입되어 해당 위치의 타일을 요청함 folium.TileLayer() : 지도 객체의 배경 레이어를 설정하는 함수 tiles : 타일 이미지의 URL 또는 타일 이미지를 제공하는 Provider의 이름을 지정 attr : 타일 제공자의 속성 정보를 설정 overlay : 타일 레이어가 지도의 오버레이로 표시될지 여부 설정 control : 타일 레이어를 지도의 컨트롤에 표시할지 여부 설정 .add_to(m) : 지도 객체에 추가하는 메소드 5-3. 마커 및 직선 삽입1234for idx, row in df.iterrows(): folium.Marker(location = [row[&#x27;Lat&#x27;],row[&#x27;Lon&#x27;]], tooltip=row[&#x27;Name&#x27;], icon=folium.Icon(color=&#x27;gray&#x27;)).add_to(m) folium.PolyLine(locations = [center, [row[&#x27;Lat&#x27;],row[&#x27;Lon&#x27;]]], tooltip=row[&#x27;to_홍대&#x27;]).add_to(m) folium.Marker(location = center, tooltip=&#x27;홍대입구역&#x27;, icon=folium.Icon(color=&#x27;red&#x27;)).add_to(m) df.iterrows() : 데이터프레임의 각 행을 이터레이터 객체로 변환 folium.Marker() : 지도 객체에 마커를 추가하는 함수 location : 마커를 추가할 좌표 지정 tooltip : 마커 위에 마우스를 올렸을 때 출력할 값 지정 icon : 마커 아이콘 설정 → folium.Icon() 함수를 통해 마커의 스타일 설정 folium.PolyLine() : 지도 객체에 직선을 추가하는 함수 locations : 직선의 양 끝 좌표 지정 tooltip : 직선 위에 마우스를 올렸을 때 출력할 값 지정 5-4. 경계선 맞추기1m.fit_bounds(m.get_bounds()) m.get_bounds() : 지도 객체에 포함된 모든 마커와 경로들의 경계를 계산하여 반환 m.fit_bounds() : 인자로 받은 경계값에 맞게 지도 객체의 위치를 조정 → 지도가 현재 표시되는 모든 데이터가 보일 수 있도록 자동으로 지도의 중심과 확대&#x2F;축소 레벨을 조정하는 코드 5-5. 지도 저장 및 출력12m.save(&#x27;map.html&#x27;)st.components.v1.html(open(&quot;map.html&quot;, &quot;rb&quot;).read(), height=600) 지도 객체를 HTML 파일로 저장한 다음, 해당 파일을 바이트 형태로 불러온 후 화면에 출력하는 코드 Result Reference Streamlit Documentation : https://docs.streamlit.io/ OpenAPI 발급 방법 : https://blog.naver.com/v-world/222009887650 웹앱 배포 방법 : https://dschloe.github.io/python/2022/11/streamlit_deploy&#x2F; 전체 코드12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758596061626364656667686970717273747576777879import numpy as npimport pandas as pdimport streamlit as stfrom PIL import Imageimport foliumimport vworld_keydef main(): # 페이지 설정 st.set_page_config(page_title=&#x27;Where to meet&#x27;, layout=&quot;wide&quot;) # 사이드바 st.sidebar.image(Image.open(&#x27;streamlit_logo.png&#x27;)) st.sidebar.write(&quot;---&quot;) rainbow = [&#x27;red&#x27;, &#x27;orange&#x27;, &#x27;yellow&#x27;, &#x27;green&#x27;, &#x27;blue&#x27;, &#x27;navy&#x27;, &#x27;purple&#x27;] color = [&#x27;black&#x27;, &#x27;black&#x27;, &#x27;black&#x27;, &#x27;white&#x27;, &#x27;white&#x27;, &#x27;white&#x27;, &#x27;white&#x27;] text = &#x27;WELCOME&#x27; for r, c, t in zip(rainbow, color, text): st.sidebar.markdown(f&quot;&lt;h3 style=&#x27;color:&#123;c&#125;; background-color:&#123;r&#125;&#x27;&gt;__&#123;t&#125;:&lt;/h3&gt;&quot;, unsafe_allow_html=True) st.sidebar.write(&quot;---&quot;) st.sidebar.text(&quot;This is Jiwon!\\nNice to meet you!&quot;) # 메인 화면 st.header(&quot;A Letter From Peter&quot;) st.subheader(&#x27;:blue[&quot;Let me know where we will meet on Satuerday, with the dashboard made by streamlit.&quot;]&#x27;) st.write(&quot;---&quot;) # 레이아웃(2분할) col1, col2 = st.columns([1,2]) with col1: st.image(Image.open(&#x27;question.jpg&#x27;)) with col2: st.subheader(&#x27;:blue[&quot;What about 홍대입구?&quot;]&#x27;) center = [37.5575,126.9245] # 홍대입구역 좌표 # 데이터 불러오기 df = pd.read_csv(&quot;place.csv&quot;, encoding=&#x27;utf-8&#x27;) df[&#x27;to_홍대&#x27;] = np.round(np.sqrt(np.power((df[&#x27;Lat&#x27;]-center[0]),2) + np.power((df[&#x27;Lon&#x27;]-center[1]),2)),2) # 탭 만들기 tab1, tab2 = st.tabs([&#x27;On Map&#x27;, &#x27;Raw Data&#x27;]) with tab2: st.write(df) with tab1: # 지도 객체 만들기 m = folium.Map(location=center, zoom_start=11) # 배경 레이어 삽입 (*vworld API) tiles = f&quot;http://api.vworld.kr/req/wmts/1.0.0/&#123;vworld_key.key&#125;/Base/&#123;&#123;z&#125;&#125;/&#123;&#123;y&#125;&#125;/&#123;&#123;x&#125;&#125;.png&quot; folium.TileLayer( tiles=tiles, attr=&quot;Vworld&quot;, overlay=True, control=True ).add_to(m) # 마커 및 직선 삽입 for idx, row in df.iterrows(): folium.Marker(location = [row[&#x27;Lat&#x27;],row[&#x27;Lon&#x27;]], tooltip=row[&#x27;Name&#x27;], icon=folium.Icon(color=&#x27;gray&#x27;)).add_to(m) folium.PolyLine(locations = [center, [row[&#x27;Lat&#x27;],row[&#x27;Lon&#x27;]]], tooltip=row[&#x27;to_홍대&#x27;]).add_to(m) folium.Marker(location = center, tooltip=&#x27;홍대입구역&#x27;, icon=folium.Icon(color=&#x27;red&#x27;)).add_to(m) # 경계선 맞추기 m.fit_bounds(m.get_bounds()) # 지도 저장 및 화면 출력 m.save(&#x27;map.html&#x27;) st.components.v1.html(open(&quot;map.html&quot;, &quot;rb&quot;).read(), height=600) st.write(&quot;---&quot;) if __name__ == &#x27;__main__&#x27;: main()","categories":[{"name":"python","slug":"python","permalink":"http://gonekng.github.io/categories/python/"},{"name":"streamlit","slug":"python/streamlit","permalink":"http://gonekng.github.io/categories/python/streamlit/"}],"tags":[{"name":"python","slug":"python","permalink":"http://gonekng.github.io/tags/python/"},{"name":"streamlit","slug":"streamlit","permalink":"http://gonekng.github.io/tags/streamlit/"}],"author":"Jiwon Kang"},{"title":"파이썬 가상환경 설정하기 (Git Bash)","slug":"Python/etc/venv","date":"2023-02-06T14:47:10.000Z","updated":"2024-12-16T12:34:49.471Z","comments":true,"path":"2023/02/06/Python/etc/venv/","link":"","permalink":"http://gonekng.github.io/2023/02/06/Python/etc/venv/","excerpt":"","text":"가상환경(virtual environment)이란? 현재 설치된 파이썬 환경과 별개로 존재하는 독립적인 환경을 의미 다수의 프로그램을 개발할때 패키지 간의 버전이 달라서 발생하는 문제를 해결 표준 라이브러리 : venv 비표준 라이브러리 : virtualvenv, pyenv, pipenv 등등 가상환경 설정 Git Bash에서 프로젝트 폴더로 이동한 후 가상환경 디렉토리를 생성한다. 1python -m venv 가상환경이름 생성한 가성환경을 활성화한다. 12345# 활성화(Windows)source 가상환경이름/Scripts/activate# 활성화(Mac)source 가상환경이름/bin/activate 비활성화 : deactivate 패키지 관리 패키지 추가 패키지의 특정 버전을 지정하여 설치할 수 있음 1python -m pip install 패키지이름 패키지 업데이트 1python -m pip install --upgrade 패키지이름 패키지 조회 12345# 가상환경에 설치된 패키지명 및 버전 조회pip list# 가상환경에 설치된 패키지명 및 버전을 txt 파일로 저장pip freeze &gt; requirements.txt Reference https://potato-potahto.tistory.com/entry/GIT파이썬-가상환경가상환경-설정","categories":[{"name":"python","slug":"python","permalink":"http://gonekng.github.io/categories/python/"},{"name":"etc","slug":"python/etc","permalink":"http://gonekng.github.io/categories/python/etc/"}],"tags":[{"name":"python","slug":"python","permalink":"http://gonekng.github.io/tags/python/"},{"name":"git","slug":"git","permalink":"http://gonekng.github.io/tags/git/"}],"author":"Jiwon Kang"},{"title":"Feature Encoding","slug":"Python/ML/Feature Encoding","date":"2022-12-22T14:21:54.000Z","updated":"2022-12-22T14:58:43.429Z","comments":true,"path":"2022/12/22/Python/ML/Feature Encoding/","link":"","permalink":"http://gonekng.github.io/2022/12/22/Python/ML/Feature%20Encoding/","excerpt":"","text":"데이터 인코딩Scikit-learn 알고리즘은 수치형 변수만 입력값으로 허용하기 때문에,머신러닝을 위해서는 모든 문자열 데이터를 인코딩하여 수치형으로 변환해야 한다. 일반적으로 문자열 데이터는 범주형 데이터와 텍스트 데이터를 의미하는데,범주형 데이터는 각 범주에 대응하는 수치형 변수로 변환하는 것이 효과적이지만텍스트 데이터는 구분자 역할이거나 추가적인 정보를 제공하기 위한 경우가 많다. 이런 경우에는 머신러닝 수행에 있어서 불필요할 가능성이 높으므로형식적인 인코딩보다는 변수의 특성을 잘 살펴본 후 삭제하는 것이 좋다. 머신러닝을 위한 대표적인 인코딩 방식으로는Label Encoding(레이블 인코딩)과 One-Hot Encoding(원-핫 인코딩)이 있다. Label Encoding레이블 인코딩은 간단하게 문자열 값을 각 범주에 해당하는 숫자로 변환하는 방식이다. 하지만 이는 단순히 구분을 위한 숫자이기 때문에일부 알고리즘에서는 각 숫자를 가중치로 해석하여 값을 왜곡하고결과적으로 모델의 예측 성능이 떨어지는 경우도 발생한다. 따라서 레이블 인코딩은 선형 회귀와 같은 알고리즘에는 적용하지 않는 것이 좋다.반면 트리 계열의 비선형 알고리즘은 이러한 특성을 반영하지 않으므로 적용해도 좋다. Scikit-learn의 LabelEncoder를 활용한다. 123456789from sklearn.preprocessing import LabelEncodercities = [&#x27;Seoul&#x27;, &#x27;LA&#x27;, &#x27;Paris&#x27;, &#x27;Tokyo&#x27;, &#x27;LA&#x27;, &#x27;London&#x27;, &#x27;Seoul&#x27;, &#x27;Berlin&#x27;]encoder = LabelEncoder()encoder.fit(cities)labels = encoder.transform(cities)print(labels)# [4 1 3 5 1 2 4 0] classes_ 속성을 통해 각 숫자가 가리키는 범주를 알 수 있다. 123print(encoder.classes_)# [&#x27;Berlin&#x27; &#x27;LA&#x27; &#x27;London&#x27; &#x27;Paris&#x27; &#x27;Seoul&#x27; &#x27;Tokyo&#x27;] inverse_transform 속성을 통해 역변환 할 수 있다. 123print(encoder.inverse_transform([1,4,5,0,2,3]))# [&#x27;LA&#x27; &#x27;Seoul&#x27; &#x27;Tokyo&#x27; &#x27;Berlin&#x27; &#x27;London&#x27; &#x27;Paris&#x27;] One-Hot Encoding원-핫 인코딩은 각 범주에 대응되는 새로운 변수를 추가하여해당 범주에 대응하는 칼럼에만 1을 표시하고 나머지는 0을 표시하는 방식이다. 따라서 인코딩에 앞서 모든 문자열 값이 숫자형으로 변환되어야 하며,Encoder의 입력 값으로 2차원 데이터가 필요하다. 단, 범주가 많을 경우 과도하게 많은 변수가 생성될 수 있기 때문에상황에 맞게 레이블 인코딩과 적절하게 혼용하는 것이 좋다. Scikit-learn의 OneHotEncoder 클래스 123456789101112131415161718192021222324252627282930from sklearn.preprocessing import OneHotEncoderimport numpy as npcities = [&#x27;Seoul&#x27;, &#x27;LA&#x27;, &#x27;Paris&#x27;, &#x27;Tokyo&#x27;, &#x27;LA&#x27;, &#x27;London&#x27;, &#x27;Seoul&#x27;, &#x27;Berlin&#x27;]#Step1: 모든 문자를 숫자형으로 변환합니다.encoder = LabelEncoder()encoder.fit(cities)labels = encoder.transform(cities)#Step2: 2차원 데이터로 변환합니다.labels = labels.reshape(-1, 1)#Step3: One-Hot Encoding 적용합니다.oh_encoder = OneHotEncoder()oh_encoder.fit(labels)oh_labels = oh_encoder.transform(labels)print(oh_labels.toarray())print(oh_labels.shape)# [[0. 0. 0. 0. 1. 0.]# [0. 1. 0. 0. 0. 0.]# [0. 0. 0. 1. 0. 0.]# [0. 0. 0. 0. 0. 1.]# [0. 1. 0. 0. 0. 0.]# [0. 0. 1. 0. 0. 0.]# [0. 0. 0. 0. 1. 0.]# [1. 0. 0. 0. 0. 0.]]# (8, 6) Pandas의 get_dummies 함수 123456import pandas as pdcities = [&#x27;Seoul&#x27;, &#x27;LA&#x27;, &#x27;Paris&#x27;, &#x27;Tokyo&#x27;, &#x27;LA&#x27;, &#x27;London&#x27;, &#x27;Seoul&#x27;, &#x27;Berlin&#x27;]df = pd.DataFrame(&#123;&#x27;item&#x27;:cities&#125;)print(pd.get_dummies(df)) Reference데이터 전처리하기 : 레이블 인코딩 (Label Encoding), 원-핫 인코딩(One-Hot Encoding), get_dummies()를 Pandas에서 사용하기","categories":[{"name":"python","slug":"python","permalink":"http://gonekng.github.io/categories/python/"},{"name":"ML","slug":"python/ML","permalink":"http://gonekng.github.io/categories/python/ML/"}],"tags":[{"name":"python","slug":"python","permalink":"http://gonekng.github.io/tags/python/"},{"name":"machine learning","slug":"machine-learning","permalink":"http://gonekng.github.io/tags/machine-learning/"},{"name":"scikit-learn","slug":"scikit-learn","permalink":"http://gonekng.github.io/tags/scikit-learn/"}],"author":"Jiwon Kang"},{"title":"Feature Scaling","slug":"Python/ML/Feature Scaling","date":"2022-12-02T11:18:35.000Z","updated":"2022-12-02T11:33:27.103Z","comments":true,"path":"2022/12/02/Python/ML/Feature Scaling/","link":"","permalink":"http://gonekng.github.io/2022/12/02/Python/ML/Feature%20Scaling/","excerpt":"","text":"정규화 vs 표준화정규화 : 데이터의 범위의 차이를 왜곡하지 않고 공통 척도로 변경하는 것표준화 : 데이터가 표준정규분포의 속성을 갖도록 재조정되는 것 정규화(Normalization) 표준화(Standardization) Scaling에 최대&#x2F;최소값 사용 Scaling에 평균 및 표준편차 사용 [0,1] 또는 [-1,1] 사이의 값으로 변환 특정 범위로 제한되지 않음 Feature의 크기(범위)가 다를 때 사용 평균을 0, 표준편차를 1로 만들고자 할 때 사용 Feature의 분포에 대해 모를 때 유용 Feature가 정규분포(에 근사)인 경우 유용 MinMaxScaler, MinAbsScaler, Normalizer StandardScaler, RobustScaler Scaler 종류StandardScaler 평균이 0, 분산이 1인 표준정규분포화 이상치의 영향 많이 받음 123456from sklearn.preprocessing import StandardScalerstd = StandardScaler()std.fit(X_train)X_train_scaled = std.transform(X_train)X_test_scaled = std.transform(X_test) RobustScaler 평균과 분산 대신 중간값과 사분위값을 사용 이상치의 영향 최소화 123456from sklearn.preprocessing import StandardScalerstd = StandardScaler()std.fit(X_train)X_train_scaled = std.transform(X_train)X_test_scaled = std.transform(X_test) MinMaxScaler 0과 1 사이의 값으로 변환 이상치의 영향 많이 받음 123456from sklearn.preprocessing import MinMaxScalermms = MinMaxScaler()mms.fit(X_train)X_train_scaled = mms.transform(X_train)X_test_scaled = mms.transform(X_test) MaxAbsScaler -1과 1 사이의 값으로 변환 이상치의 영향 많이 받음 123456from sklearn.preprocessing import MaxAbsScalermas = MaxAbsScaler()mas.fit(X_train)X_train_scaled = mas.transform(X_train)X_test_scaled = mas.transform(X_test) Normalizer 각 열이 아닌 행마다 정규화 수행 한 행의 모든 피처들 사이의 유클리드 거리가 1이 되도록 함 학습이 빠르고, 과대적합 가능성을 낮출 수 있음 12345from sklearn.preprocessing import RobustScalerrbs = RobustScaler()X_train_scaled = rbs.fit_transform(X_train)X_test_scaled = rbs.transform(X_test)","categories":[{"name":"python","slug":"python","permalink":"http://gonekng.github.io/categories/python/"},{"name":"ML","slug":"python/ML","permalink":"http://gonekng.github.io/categories/python/ML/"}],"tags":[{"name":"python","slug":"python","permalink":"http://gonekng.github.io/tags/python/"},{"name":"machine learning","slug":"machine-learning","permalink":"http://gonekng.github.io/tags/machine-learning/"},{"name":"scikit-learn","slug":"scikit-learn","permalink":"http://gonekng.github.io/tags/scikit-learn/"}],"author":"Jiwon Kang"},{"title":"Jupyter Notebook에서 SQL 실행하기","slug":"SQL/Jupyter Notebook에서 SQL 실행하기","date":"2022-11-18T14:37:04.000Z","updated":"2022-11-18T14:46:58.121Z","comments":true,"path":"2022/11/18/SQL/Jupyter Notebook에서 SQL 실행하기/","link":"","permalink":"http://gonekng.github.io/2022/11/18/SQL/Jupyter%20Notebook%EC%97%90%EC%84%9C%20SQL%20%EC%8B%A4%ED%96%89%ED%95%98%EA%B8%B0/","excerpt":"","text":"라이브러리 설치 공통적으로 다음 라이브러리를 설치한다 1pip install ipython-sql 접속하고자 하는 DB에 맞게 라이브러리를 설치한다 1234567891011# sql serverpip install pyodbc# PostgreSQL pip install pyscopg2# MySQLpip install PyMySQL# Oraclepip install cx_Oracle Jupyter Notebook에서 설정하기 Jupyter Notebook에서 매직명령어로 익스텐션을 로드한다. 1%load_ext sql 다음과 같은 창이 뜨면 Install을 누른다. 설치하면 정상적으로 실행이 된다 접속하려는 DB에 맞는 코드를 입력 후 실행 1234567891011# SQL Server%sql mssql+pyodbc://user_name:password@host:port_number/db# PostgreSQL%sql postgresql://user_name:password@host:port_number/db # MySQL%sql mysql://user_name:password@host:port_number/db# Oracle%sql oracle://user_name:password@127.0.0.1:port_number/db 연결이 되었으면 코드 앞에 %%sql을 붙이고 쿼리를 실행한다 (세미콜론 제외) Jupyterlab에서 잘 실행되는 것을 확인할 수 있다. Reference 참고1 : https://95pbj.tistory.com/47 참고2 : https://towardsdatascience.com/heres-how-to-run-sql-in-jupyter-notebooks-f26eb90f3259","categories":[{"name":"sql","slug":"sql","permalink":"http://gonekng.github.io/categories/sql/"}],"tags":[{"name":"sql","slug":"sql","permalink":"http://gonekng.github.io/tags/sql/"},{"name":"oracle","slug":"oracle","permalink":"http://gonekng.github.io/tags/oracle/"}],"author":"Jiwon Kang"},{"title":"Disqus로 블로그 댓글 기능 설정","slug":"hexo/disqus_comment","date":"2022-11-16T09:55:51.000Z","updated":"2022-11-16T10:10:34.615Z","comments":true,"path":"2022/11/16/hexo/disqus_comment/","link":"","permalink":"http://gonekng.github.io/2022/11/16/hexo/disqus_comment/","excerpt":"","text":"Hexo 블로그의 Hueman 테마는 기본적으로 Disqus 서비스를 지원하며, 이를 통해 블로그의 댓글 기능을 설정할 수 있다. (Hexo 블로그 Hueman 테마 설정) Disqus 회원가입 Disqus 사이트에 회원가입 후 로그인한다. Disqus 사이트 추가 메인 페이지에서 Get Started 클릭 I want to install Disqus on my site 클릭 Website Name, Category, Language 지정 Basic 요금제 선택 I don’t see my platform listed, install manually with Universal Code 클릭 configure 클릭 Website URL 항목에 블로그 주소 입력 후 Next 클릭 Balanced 옵션 선택 후 Complete Setup 클릭 Dismiss Setup 클릭 오른쪽 상단에 있는 Edit Settings 클릭 Shortname 항목에 있는 나의 Shortname 확인 _config.icarus.yml에 Shortname 설정하기 블로그 테마 폴더의 _config.yml 파일에서 다음 위치에 나의 Disqus Shortname을 입력한다. 123# Commentcomment: disqus: gonekng # enter disqus shortname here Reference https://chinsun9.github.io/2020/09/23/hexo/disqus로-블로그-댓글-사용하기/","categories":[{"name":"hexo","slug":"hexo","permalink":"http://gonekng.github.io/categories/hexo/"}],"tags":[{"name":"hexo","slug":"hexo","permalink":"http://gonekng.github.io/tags/hexo/"},{"name":"hueman","slug":"hueman","permalink":"http://gonekng.github.io/tags/hueman/"},{"name":"disqus","slug":"disqus","permalink":"http://gonekng.github.io/tags/disqus/"}],"author":"Jiwon Kang"},{"title":"Hexo 블로그 Hueman 테마 설정","slug":"hexo/hueman_theme","date":"2022-11-16T08:01:23.000Z","updated":"2022-11-16T10:02:01.966Z","comments":true,"path":"2022/11/16/hexo/hueman_theme/","link":"","permalink":"http://gonekng.github.io/2022/11/16/hexo/hueman_theme/","excerpt":"","text":"Install theme 블로그와 연결된 루트 폴더에서 git 명령어로 Hueman 테마를 다운로드한다. 1$ git clone [https://github.com/ppoffice/hexo-theme-hueman.git](https://github.com/ppoffice/hexo-theme-hueman.git) themes/hueman 블로그의 _config.yml을 수정합니다. 1theme: hueman themes 폴더 안에 있는 _config.yml.example의 이름을 _config.yml로 수정한다. 검색 기능을 위해 hexo-generator-json-content를 설치한다. 1$ npm install -S hexo-generator-json-content Change settings앞에서 이름을 변경했던 _config.yml 파일을 수정하면 각종 설정을 변경할 수 있다. 메뉴123456# Menusmenu: Home: / # Delete this row if you don&#x27;t want categories in your header nav bar Categories: About: https://about.me/gonekng 각 메뉴를 클릭했을 때 이동할 경로를 지정할 수 있다. 이때 카테고리는 따로 지정하지 않아도 각 게시글에서 지정한대로 자동 적용된다. About 메뉴는 블로그 주인에 대한 자기소개 페이지로 이동하기 위한 것으로, 필자는 About.me 라는 사이트를 이용하여 만든 프로필 URL을 연결했다. 커스터마이징1234567891011121314# Customizecustomize: logo: width: 165 height: 60 url: images/logo-header.png theme_color: &#x27;#006bde&#x27; highlight: androidstudio sidebar: right # sidebar position, options: left, right thumbnail: false # enable posts thumbnail, options: true, false favicon: # path to favicon social_links: # for more icons, please see http://fontawesome.io/icons/#brand instagram: https://instagram.com/gone_kng github: https://github.com/gonekng 메뉴 위에 삽입할 로고 파일 url을 지정할 수 있다. hueman/source/css/images 폴더 내부에 저장된 이미지를 사용할 수도 있고, 웹 이미지 url도 가능하다. 테마의 색상을 지정할 수 있다. 게시글에 포함된 코드 블럭에서 적용되는 하이라이트를 지정할 수 있다. 기본값은 androidstudio이며, hueman/source/css/_highlight 폴더에 있는 것들 중 선택할 수 있다. 사이드바의 위치를 조정할 수 있다. 게시글의 썸네일을 표시하거나 숨길 수 있다. 게시글의 썸네일은 게시글에 포함된 첫번째 사진이 기본값이며, 게시글의 front-matter 부분에서 경로를 추가하면 변경 가능하다. 123title: Hello Worlddate: 2022/11/16 16:36:10thumbnail: images/example.jpg 파비콘(URL 앞에 붙는 작은 아이콘)을 지정할 수 있다. 연결하고자 하는 SNS 링크를 추가할 수 있다. 아이콘은 FontAwesome에서 선택하여 이름과 URL을 지정하면 적용된다. 위젯12345678# Widgetswidgets: - recent_posts - category - archive - tagcloud - tag - links 사이드바에 추가되는 다양한 위젯을 지정할 수 있으며, 작성한 순서대로 차례로 보여지게 된다. 링크 위젯에 들어갈 내용은 _config.yml 하단에서 다음의 코드를 통해 추가할 수 있다. 12345# Miscellaneousmiscellaneous: links: Hexo: http://hexo.io Naver blog: https://blog.naver.com/donumm 검색12345# Searchsearch: insight: true # you need to install `hexo-generator-json-content` before using Insight Search swiftype: # enter swiftype install key here baidu: false # you need to disable other search engines to use Baidu search, options: true, false 블로그 내의 검색 기능을 설정할 수 있다. 필자는 테마에서 기본적으로 제공하는 Insight Search를 사용하였다. 앞서 언급했듯이 hexo-generator-json-content를 설치해야 사용 가능하다. 댓글123# Commentcomment: disqus: gonekng # enter disqus shortname here 댓글 기능은 기본적으로 제공하는 Disqus 서비스를 사용하면 된다. Disqus 사이트에 회원가입 및 로그인 후 해당하는 아이디를 입력한다. 자세한 내용은 Disqus로 블로그 댓글 기능 설정 참조 공유12# Shareshare: default # options: jiathis, bdshare, addtoany, default 해당 게시글의 공유 기능에도 몇가지 옵션이 있으나, 필자는 기본값으로 설정하였다. Result Reference https://futurecreator.github.io/2016/06/14/hexo-apply-hueman-theme/","categories":[{"name":"hexo","slug":"hexo","permalink":"http://gonekng.github.io/categories/hexo/"}],"tags":[{"name":"hexo","slug":"hexo","permalink":"http://gonekng.github.io/tags/hexo/"},{"name":"hueman","slug":"hueman","permalink":"http://gonekng.github.io/tags/hueman/"}],"author":"Jiwon Kang"},{"title":"Coding Test Ex.2","slug":"Python/Exercise/coding_test_ex2","date":"2022-11-15T07:45:15.000Z","updated":"2022-11-15T07:43:28.504Z","comments":true,"path":"2022/11/15/Python/Exercise/coding_test_ex2/","link":"","permalink":"http://gonekng.github.io/2022/11/15/Python/Exercise/coding_test_ex2/","excerpt":"","text":"성격유형검사문제나만의 카카오 성격 유형 검사지를 만들려고 합니다. 성격 유형 검사는 다음과 같은 4개 지표로 성격 유형을 구분합니다. 성격은 각 지표에서 두 유형 중 하나로 결정됩니다. 지표 번호 성격 유형 1번 지표 라이언형(R), 튜브형(T) 2번 지표 콘형(C), 프로도형(F) 3번 지표 제이지형(J), 무지형(M) 4번 지표 어피치형(A), 네오형(N) 4개의 지표가 있으므로 성격 유형은 총 16(&#x3D;2 x 2 x 2 x 2)가지가 나올 수 있습니다. 예를 들어, “RFMN”이나 “TCMA”와 같은 성격 유형이 있습니다. 검사지에는 총 n개의 질문이 있고, 각 질문에는 아래와 같은 7개의 선택지가 있습니다. 매우 비동의 비동의 약간 비동의 모르겠음 약간 동의 동의 매우 동의 각 질문은 1가지 지표로 성격 유형 점수를 판단합니다. 예를 들어, 어떤 한 질문에서 4번 지표로 아래 표처럼 점수를 매길 수 있습니다. 선택지 성격 유형 점수 매우 비동의 네오형 3점 비동의 네오형 2점 약간 비동의 네오형 1점 모르겠음 어떤 성격 유형도 점수를 얻지 않습니다 약간 동의 어피치형 1점 동의 어피치형 2점 매우 동의 어피치형 3점 검사자가 질문에서 약간 동의 를 선택할 경우 어피치형(A) 성격 유형 1점을 받게 됩니다. 만약 검사자가 매우 비동의 를 선택할 경우 네오형(N) 성격 유형 3점을 받게 됩니다. 위 예시처럼 네오형이 비동의, 어피치형이 동의인 경우만 주어지지 않고, 질문에 따라 네오형이 동의, 어피치형이 비동의인 경우도 주어질 수 있습니다. 하지만 각 선택지는 고정적인 크기의 점수를 가지고 있습니다. 매우 동의나 매우 비동의 를 선택하면 3점을 얻습니다. 동의나 비동의 를 선택하면 2점을 얻습니다. 약간 동의나 약간 비동의 를 선택하면 1점을 얻습니다. 모르겠음 를 선택하면 점수를 얻지 않습니다. 검사 결과는 모든 질문의 성격 유형 점수를 더하여 각 지표에서 더 높은 점수를 받은 성격 유형이 검사자의 성격 유형이라고 판단합니다. 단, 하나의 지표에서 각 성격 유형 점수가 같으면, 두 성격 유형 중 사전 순으로 빠른 성격 유형을 검사자의 성격 유형이라고 판단합니다. 질문마다 판단하는 지표를 담은 1차원 문자열 배열 survey와 검사자가 각 질문마다 선택한 선택지를 담은 1차원 정수 배열 choices가 매개변수로 주어집니다. 이때, 검사자의 성격 유형 검사 결과를 지표 번호 순서대로 return 하도록 solution 함수를 완성해주세요. 제한사항 1 ≤ survey의 길이 ( &#x3D; n) ≤ 1,000 survey의 원소는 &quot;RT&quot;, &quot;TR&quot;, &quot;FC&quot;, &quot;CF&quot;, &quot;MJ&quot;, &quot;JM&quot;, &quot;AN&quot;, &quot;NA&quot; 중 하나입니다. survey[i]의 첫 번째 캐릭터는 i+1번 질문의 비동의 관련 선택지를 선택하면 받는 성격 유형을 의미합니다. survey[i]의 두 번째 캐릭터는 i+1번 질문의 동의 관련 선택지를 선택하면 받는 성격 유형을 의미합니다. choices의 길이 &#x3D; survey의 길이 choices[i]는 검사자가 선택한 i+1번째 질문의 선택지를 의미합니다. 1 ≤ choices의 원소 ≤ 7 choices 뜻 1 매우 비동의 2 비동의 3 약간 비동의 4 모르겠음 5 약간 동의 6 동의 7 매우 동의 입출력 예시 survey choices result [“AN”, “CF”, “MJ”, “RT”, “NA”] [5, 3, 2, 7, 5] “TCMA” [“TR”, “RT”, “TR”] [7, 1, 3] “RCJA” 입출력 예 #1 1번 질문의 점수 배치는 아래 표와 같습니다. 선택지 성격 유형 점수 매우 비동의 어피치형 3점 비동의 어피치형 2점 약간 비동의 어피치형 1점 모르겠음 어떤 성격 유형도 점수를 얻지 않습니다 약간 동의 네오형 1점 동의 네오형 2점 매우 동의 네오형 3점 1번 질문에서는 지문의 예시와 다르게 비동의 관련 선택지를 선택하면 어피치형(A) 성격 유형의 점수를 얻고, 동의 관련 선택지를 선택하면 네오형(N) 성격 유형의 점수를 얻습니다. 1번 질문에서 검사자는 약간 동의 선택지를 선택했으므로 네오형(N) 성격 유형 점수 1점을 얻게 됩니다. 2번 질문의 점수 배치는 아래 표와 같습니다. 선택지 성격 유형 점수 매우 비동의 콘형 3점 비동의 콘형 2점 약간 비동의 콘형 1점 모르겠음 어떤 성격 유형도 점수를 얻지 않습니다 약간 동의 프로도형 1점 동의 프로도형 2점 매우 동의 프로도형 3점 2번 질문에서 검사자는 약간 비동의 선택지를 선택했으므로 콘형(C) 성격 유형 점수 1점을 얻게 됩니다. 3번 질문의 점수 배치는 아래 표와 같습니다. 선택지 성격 유형 점수 매우 비동의 무지형 3점 비동의 무지형 2점 약간 비동의 무지형 1점 모르겠음 어떤 성격 유형도 점수를 얻지 않습니다 약간 동의 제이지형 1점 동의 제이지형 2점 매우 동의 제이지형 3점 3번 질문에서 검사자는 비동의 선택지를 선택했으므로 무지형(M) 성격 유형 점수 2점을 얻게 됩니다. 4번 질문의 점수 배치는 아래 표와 같습니다. 선택지 성격 유형 점수 매우 비동의 라이언형 3점 비동의 라이언형 2점 약간 비동의 라이언형 1점 모르겠음 어떤 성격 유형도 점수를 얻지 않습니다 약간 동의 튜브형 1점 동의 튜브형 2점 매우 동의 튜브형 3점 4번 질문에서 검사자는 매우 동의 선택지를 선택했으므로 튜브형(T) 성격 유형 점수 3점을 얻게 됩니다. 5번 질문의 점수 배치는 아래 표와 같습니다. 선택지 성격 유형 점수 매우 비동의 네오형 3점 비동의 네오형 2점 약간 비동의 네오형 1점 모르겠음 어떤 성격 유형도 점수를 얻지 않습니다 약간 동의 어피치형 1점 동의 어피치형 2점 매우 동의 어피치형 3점 5번 질문에서 검사자는 약간 동의 선택지를 선택했으므로 어피치형(A) 성격 유형 점수 1점을 얻게 됩니다. 1번부터 5번까지 질문의 성격 유형 점수를 합치면 아래 표와 같습니다. 지표 번호 성격 유형 점수 성격 유형 점수 1번 지표 라이언형(R) 0 튜브형(T) 3 2번 지표 콘형(C) 1 프로도형(F) 0 3번 지표 제이지형(J) 0 무지형(M) 2 4번 지표 어피치형(A) 1 네오형(N) 1 각 지표에서 더 점수가 높은 T,C,M이 성격 유형입니다.하지만, 4번 지표는 1점으로 동일한 점수입니다. 따라서, 4번 지표의 성격 유형은 사전순으로 빠른 A입니다. 따라서 &quot;TCMA&quot;를 return 해야 합니다. 입출력 예 #2 1번부터 3번까지 질문의 성격 유형 점수를 합치면 아래 표와 같습니다. 지표 번호 성격 유형 점수 성격 유형 점수 1번 지표 라이언형(R) 6 튜브형(T) 1 2번 지표 콘형(C) 0 프로도형(F) 0 3번 지표 제이지형(J) 0 무지형(M) 0 4번 지표 어피치형(A) 0 네오형(N) 0 1번 지표는 튜브형(T)보다 라이언형(R)의 점수가 더 높습니다. 따라서 첫 번째 지표의 성격 유형은 R입니다.하지만, 2, 3, 4번 지표는 모두 0점으로 동일한 점수입니다. 따라서 2, 3, 4번 지표의 성격 유형은 사전순으로 빠른 C, J, A입니다. 따라서 &quot;RCJA&quot;를 return 해야 합니다. 풀이 1123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124125126127128129130131132133134135136137138139140141142143144145def solution(survey, choices): answer = &#x27;&#x27; score = [[0,0], # R, T [0,0], # C, F [0,0], # J, M [0,0]] # A, N for i, string in enumerate(survey): if string == &quot;RT&quot;: if choices[i] == 1: score[0][0] += 3 elif choices[i] == 2: score[0][0] += 2 elif choices[i] == 3: score[0][0] += 1 elif choices[i] == 5: score[0][1] += 1 elif choices[i] == 6: score[0][1] += 2 elif choices[i] == 7: score[0][1] += 3 else: continue elif string == &quot;TR&quot;: if choices[i] == 1: score[0][1] += 3 elif choices[i] == 2: score[0][1] += 2 elif choices[i] == 3: score[0][1] += 1 elif choices[i] == 5: score[0][0] += 1 elif choices[i] == 6: score[0][0] += 2 elif choices[i] == 7: score[0][0] += 3 else: continue elif string == &quot;CF&quot;: if choices[i] == 1: score[1][0] += 3 elif choices[i] == 2: score[1][0] += 2 elif choices[i] == 3: score[1][0] += 1 elif choices[i] == 5: score[1][1] += 1 elif choices[i] == 6: score[1][1] += 2 elif choices[i] == 7: score[1][1] += 3 else: continue elif string == &quot;FC&quot;: if choices[i] == 1: score[1][1] += 3 elif choices[i] == 2: score[1][1] += 2 elif choices[i] == 3: score[1][1] += 1 elif choices[i] == 5: score[1][0] += 1 elif choices[i] == 6: score[1][0] += 2 elif choices[i] == 7: score[1][0] += 3 else: continue elif string == &quot;JM&quot;: if choices[i] == 1: score[2][0] += 3 elif choices[i] == 2: score[2][0] += 2 elif choices[i] == 3: score[2][0] += 1 elif choices[i] == 5: score[2][1] += 1 elif choices[i] == 6: score[2][1] += 2 elif choices[i] == 7: score[2][1] += 3 else: continue elif string == &quot;MJ&quot;: if choices[i] == 1: score[2][1] += 3 elif choices[i] == 2: score[2][1] += 2 elif choices[i] == 3: score[2][1] += 1 elif choices[i] == 5: score[2][0] += 1 elif choices[i] == 6: score[2][0] += 2 elif choices[i] == 7: score[2][0] += 3 else: continue elif string == &quot;AN&quot;: if choices[i] == 1: score[3][0] += 3 elif choices[i] == 2: score[3][0] += 2 elif choices[i] == 3: score[3][0] += 1 elif choices[i] == 5: score[3][1] += 1 elif choices[i] == 6: score[3][1] += 2 elif choices[i] == 7: score[3][1] += 3 else: continue elif string == &quot;NA&quot;: if choices[i] == 1: score[3][1] += 3 elif choices[i] == 2: score[3][1] += 2 elif choices[i] == 3: score[3][1] += 1 elif choices[i] == 5: score[3][0] += 1 elif choices[i] == 6: score[3][0] += 2 elif choices[i] == 7: score[3][0] += 3 else: continue if score[0][0] &gt;= score[0][1]: answer = answer + &#x27;R&#x27; else: answer = answer + &#x27;T&#x27; if score[1][0] &gt;= score[1][1]: answer = answer + &#x27;C&#x27; else: answer = answer + &#x27;F&#x27; if score[2][0] &gt;= score[2][1]: answer = answer + &#x27;J&#x27; else: answer = answer + &#x27;M&#x27; if score[3][0] &gt;= score[3][1]: answer = answer + &#x27;A&#x27; else: answer = answer + &#x27;N&#x27; return answer 풀이 21234567891011121314151617181920def solution(survey, choices): my_dict = &#123;&quot;RT&quot;:0,&quot;CF&quot;:0,&quot;JM&quot;:0,&quot;AN&quot;:0&#125; for A,B in zip(survey,choices): if A not in my_dict.keys(): A = A[::-1] my_dict[A] -= B-4 else: my_dict[A] += B-4 result = &quot;&quot; for name in my_dict.keys(): if my_dict[name] &gt; 0: result += name[1] elif my_dict[name] &lt; 0: result += name[0] else: result += sorted(name)[0] return result 풀이 3123456789101112131415161718192021222324252627282930313233343536373839404142434445def solution(설문_조사_배열, 선택지_배열): 지표 = &#123;&#125; 지표[&#x27;RT&#x27;] = 지표[&#x27;TR&#x27;] = &#123;&#x27;R&#x27;: 0, &#x27;T&#x27;: 0,&#125; 지표[&#x27;FC&#x27;] = 지표[&#x27;CF&#x27;] = &#123;&#x27;C&#x27;: 0, &#x27;F&#x27;: 0,&#125; 지표[&#x27;MJ&#x27;] = 지표[&#x27;JM&#x27;] = &#123;&#x27;J&#x27;: 0, &#x27;M&#x27;: 0,&#125; 지표[&#x27;AN&#x27;] = 지표[&#x27;NA&#x27;] = &#123;&#x27;A&#x27;: 0, &#x27;N&#x27;: 0,&#125; 점수 = &#123; &#x27;매우 비동의&#x27;: 3, &#x27;비동의&#x27;: 2, &#x27;약간 비동의&#x27;: 1, &#x27;모르겠음&#x27;: 0, &#x27;약간 동의&#x27;: 1, &#x27;동의&#x27;: 2, &#x27;매우 동의&#x27;: 3, &#125; 비동의 = [1, 2, 3] 동의 = [5, 6, 7] 선택지 = &#123; 1: &#x27;매우 비동의&#x27;, 2: &#x27;비동의&#x27;, 3: &#x27;약간 비동의&#x27;, 4: &#x27;모르겠음&#x27;, 5: &#x27;약간 동의&#x27;, 6: &#x27;동의&#x27;, 7: &#x27;매우 동의&#x27;, &#125; answer = &#x27;&#x27; for 인덱스 in range(len(설문_조사_배열)): 비동의_캐릭터, 동의_캐릭터 = 설문_조사_배열[인덱스] if 선택지_배열[인덱스] in 비동의: 지표[설문_조사_배열[인덱스]][비동의_캐릭터] += 점수[선택지[선택지_배열[인덱스]]] continue if 선택지_배열[인덱스] in 동의: 지표[설문_조사_배열[인덱스]][동의_캐릭터] += 점수[선택지[선택지_배열[인덱스]]] 결과_배열 = [지표[&#x27;RT&#x27;].items(), 지표[&#x27;FC&#x27;].items(), 지표[&#x27;MJ&#x27;].items(), 지표[&#x27;AN&#x27;].items()] 정렬된_배열 = [] for 결과 in 결과_배열: 정렬된_배열.append(sorted(결과, key=lambda x: -x[1])) return &#x27;&#x27;.join([캐릭터_점수_튜플[0] for [캐릭터_점수_튜플, _] in 정렬된_배열]) 출처 : Programmers","categories":[{"name":"python","slug":"python","permalink":"http://gonekng.github.io/categories/python/"},{"name":"coding test","slug":"python/coding-test","permalink":"http://gonekng.github.io/categories/python/coding-test/"}],"tags":[{"name":"python","slug":"python","permalink":"http://gonekng.github.io/tags/python/"},{"name":"programmers","slug":"programmers","permalink":"http://gonekng.github.io/tags/programmers/"}],"author":"Jiwon Kang"},{"title":"Coding Test Ex.1","slug":"Python/Exercise/coding_test_ex1","date":"2022-11-15T06:43:00.000Z","updated":"2022-11-15T07:37:30.102Z","comments":true,"path":"2022/11/15/Python/Exercise/coding_test_ex1/","link":"","permalink":"http://gonekng.github.io/2022/11/15/Python/Exercise/coding_test_ex1/","excerpt":"","text":"K번째수문제배열 array의 i번째 숫자부터 j번째 숫자까지 자르고 정렬했을 때, k번째에 있는 수를 구하려 합니다.예를 들어 array가 [1, 5, 2, 6, 3, 7, 4], i &#x3D; 2, j &#x3D; 5, k &#x3D; 3이라면, array의 2번째부터 5번째까지 자르면 [5, 2, 6, 3]입니다. 1에서 나온 배열을 정렬하면 [2, 3, 5, 6]입니다. 2에서 나온 배열의 3번째 숫자는 5입니다. 배열 array, [i, j, k]를 원소로 가진 2차원 배열 commands가 매개변수로 주어질 때, commands의 모든 원소에 대해 앞서 설명한 연산을 적용했을 때 나온 결과를 배열에 담아 return 하도록 solution 함수를 작성해주세요. 제한사항 array의 길이는 1 이상 100 이하입니다. array의 각 원소는 1 이상 100 이하입니다. commands의 길이는 1 이상 50 이하입니다. commands의 각 원소는 길이가 3입니다. 입출력 예시 array commands return [1, 5, 2, 6, 3, 7, 4] [[2, 5, 3], [4, 4, 1], [1, 7, 3]] [5, 6, 3] [1, 5, 2, 6, 3, 7, 4]를 2번째부터 5번째까지 자른 후 정렬합니다. [2, 3, 5, 6]의 세 번째 숫자는 5입니다. [1, 5, 2, 6, 3, 7, 4]를 4번째부터 4번째까지 자른 후 정렬합니다. [6]의 첫 번째 숫자는 6입니다. [1, 5, 2, 6, 3, 7, 4]를 1번째부터 7번째까지 자릅니다. [1, 2, 3, 4, 5, 6, 7]의 세 번째 숫자는 3입니다. 풀이 11234567def solution(array, commands): answer = [] for com in commands: temp = array[com[0]-1:com[1]] temp.sort() answer.append(temp[com[2]-1]) return answer 풀이 212def solution(array, commands): return list(map(lambda x:sorted(array[x[0]-1:x[1]])[x[2]-1], commands)) 풀이 3123456def solution(array, commands): answer = [] for command in commands: i,j,k = command answer.append(list(sorted(array[i-1:j]))[k-1]) return answer 출처 : Programmers","categories":[{"name":"python","slug":"python","permalink":"http://gonekng.github.io/categories/python/"},{"name":"coding test","slug":"python/coding-test","permalink":"http://gonekng.github.io/categories/python/coding-test/"}],"tags":[{"name":"python","slug":"python","permalink":"http://gonekng.github.io/tags/python/"},{"name":"programmers","slug":"programmers","permalink":"http://gonekng.github.io/tags/programmers/"}],"author":"Jiwon Kang"},{"title":"[Git] Windows11에서 Git 설치하기","slug":"etc/Git Installation in Windows11","date":"2022-10-17T07:14:08.000Z","updated":"2024-12-16T12:31:33.581Z","comments":true,"path":"2022/10/17/etc/Git Installation in Windows11/","link":"","permalink":"http://gonekng.github.io/2022/10/17/etc/Git%20Installation%20in%20Windows11/","excerpt":"","text":"Git 설치파일 다운로드 git-scm.com 에서 Downloads 클릭 현재 사용 중인 운영체제(Windows) 클릭 현재 사용 중인 시스템 아키텍처(64비트)에 해당하는 링크를 클릭하여 설치 파일 다운 Git Setup 마법사 실행 다운로드받은 Git Setup 파일을 실행 설치하기 위한 경로 지정 후 Next 클릭 설치할 구성요소 선택 후 Next 클릭 일반적으로 기본 상태 그대로 진행해도 무관 Additional icons On the Desktop : 바탕화면에 바로가기 아이콘 추가 Windows Explorer integration Git Bash Here : Git Bash 연결 기능 Git GUI Here : Git GUI 연결 기능 Git LFS ( Large File Support) : 대용량 파일 지원 여부 Associate .git* configuration files with the default text editor : Git 구성 파일을 기본 텍스트 편집기와 연결할지 여부 Associate .sh files to be run with Bash : .sh 확장자 파일을 Bash와 연결할지 선택 Check daily for Git for Windows updates : Git 업데이트를 매일 체크할지 여부 Add a Git Bash Profile to Windows Terminal : 윈도우 터미널에 Git Bash 추가할지 여부 시작 폴더 경로 지정 후 Next 클릭 기본 Git 에디터 선택 후 Next 클릭 기본 옵션은 Vim 편집기이며, Notepad, VSCode, Sublime 등등 선택 가능 Branch 이름 지정 옵션 선택 후 Next 클릭 Let Git decide : 기본적으로 master로 지정, 추후 변경 가능 Override the default branch name for new repositories : 입력한 이름으로 자동 지정 현재 대부분의 경우 main으로 통용되고 있음 이후 옵션들은 별도 지정이나 변경 없이 넘어가고, 마지막 Install 시 설치 진행 모든 설치가 완료된 후 Finish 클릭 Git Bash 사용자 정보 입력 Git Bash 실행 후 사용자 정보 등록 사용자 정보를 등록하면 로컬에서 Git 커밋 시 항상 이 정보가 사용됨 12git config --global user.name &quot;Name&quot;git config --global user.email &quot;Email&quot; .gitconfig에 저장되어 있는 설정 값 확인 : cat ~/.gitconfig Ref.https://iboxcomein.com/windows-git-install/","categories":[{"name":"etc","slug":"etc","permalink":"http://gonekng.github.io/categories/etc/"}],"tags":[{"name":"git","slug":"git","permalink":"http://gonekng.github.io/tags/git/"},{"name":"windows11","slug":"windows11","permalink":"http://gonekng.github.io/tags/windows11/"}],"author":"Jiwon Kang"},{"title":"SQL TEST 6-7","slug":"SQL/SQL TEST 6-7","date":"2022-05-02T03:08:45.000Z","updated":"2022-11-16T15:14:56.484Z","comments":true,"path":"2022/05/02/SQL/SQL TEST 6-7/","link":"","permalink":"http://gonekng.github.io/2022/05/02/SQL/SQL%20TEST%206-7/","excerpt":"","text":"SQL Subquery ‘오라클 SQL과 PL&#x2F;SQL을 다루는 기술 (길벗)’ Q1.populations 테이블에서 2015년 평균 기대수명보다 높은 모든 정보를 조회한다. A1.12345678SELECT * FROM populations WHERE year = 2015 AND life_expectancy &gt; (SELECT AVG(life_expectancy) as AVG FROM populations WHERE year = 2015 GROUP BY year); Q2.subquery_countries 테이블에 있는 capital과 매칭되는 cities 테이블의 정보를 조회한다. A2.123456SELECT a.name, a.country_code, a.urbanarea_pop FROM cities a WHERE a.name IN (SELECT b.capital FROM subquery_countries b) ORDER BY a.urbanarea_pop desc; Q3.economies 테이블에서 code, inflation_rate, unemployment_rate를 조회한다. inflation_rate 오름차순으로 정렬한다. subquery_countries 테이블내 gov_form 컬럼에서 Constitutional Monarchy 또는 Republic이 들어간 국가는 제외한다. A3.123456789SELECT a.code, a.inflation_rate, a.unemployment_rate FROM economies a WHERE a.year = 2015 AND a.code NOT IN (SELECT b.code FROM subquery_countries b WHERE b.gov_form = &#x27;Constitutional Monarchy&#x27; OR b.gov_form LIKE &#x27;%Republic%&#x27;) ORDER BY a.inflation_rate ASC; Q4.2015년 각 대륙별 inflation_rate가 가장 심한 국가와 inflation_rate를 구한다. 힌트) 아래 쿼리 실행 123456SELECT country_name, continent, inflation_rate FROM subquery_countries INNER JOIN economies USING (code) WHERE year = 2015; A4.123456789101112131415With basis AS ( SELECT country_name, continent, inflation_rate FROM subquery_countries INNER JOIN economies USING (code) WHERE year = 2015 ) , max_inf AS ( SELECT continent, MAX(inflation_rate) as inflation_rate FROM basis GROUP BY continent )SELECT a.country_name, b.continent, b.inflation_rate FROM basis a, max_inf b WHERE a.inflation_rate = b.inflation_rate; SQL Window FunctionQ1.각 행에 숫자를 1, 2, 3, … 형태로 추가한다. (row_n으로 표시) row_n 기준으로 오름차순으로 출력 테이블명에 alias를 적용한다. A1.12345678With sub_table AS ( SELECT ROWNUM-95 AS ROW_N , YEAR, CITY, SPORT, DISCIPLINE, ATHLETE FROM summer_medals )SELECT * FROM sub_table WHERE ROW_N &gt; 0; Q2.올림픽 년도를 오름차순 순번대로 작성한다. 힌트) 서브쿼리와 윈도우 함수를 이용한다. A2.12345SELECT year , ROW_NUMBER() OVER (ORDER BY year) as ROW_N FROM (SELECT year FROM summer_medals GROUP BY year); Q3.(1) WITH 절 사용하여 각 운동선수들이 획득한 메달 갯수를 내림차순으로 정렬하도록 한다.(2) (1) 쿼리를 활용하여 그리고 선수들의 랭킹을 추가한다. 상위 5개만 추출 : OFFSET 0 ROWS FETCH NEXT 5 ROWS ONLY A3.123456789With basis AS ( SELECT ATHLETE, COUNT() AS MEDALS FROM summer_medals GROUP BY ATHLETE ORDER BY COUNT() desc )SELECT MEDALS, ATHLETE, ROWNUM FROM basis OFFSET 0 ROWS FETCH NEXT 5 ROWS ONLY; Q4.다음 쿼리는 남자 69KG 역도 경기에서 매년 금메달리스트 조회하는 쿼리이다. 이때 매년 전년도 챔피언도 같이 조회하도록 한다. (LAG &amp; WITH절 사용) 123456SELECT Year, Country AS champion FROM summer_medals WHERE Discipline = &#x27;Weightlifting&#x27; AND Event = &#x27;69KG&#x27; AND Gender = &#x27;Men&#x27; AND Medal = &#x27;Gold&#x27;; A4.1234567891011WITH basis AS ( SELECT Year, Country AS champion FROM summer_medals WHERE Discipline = &#x27;Weightlifting&#x27; AND Event = &#x27;69KG&#x27; AND Gender = &#x27;Men&#x27; AND Medal = &#x27;Gold&#x27; )SELECT year, champion , LAG(champion, 1) OVER(order by champion) AS LAST_CHAMPION FROM basis;","categories":[{"name":"sql","slug":"sql","permalink":"http://gonekng.github.io/categories/sql/"}],"tags":[{"name":"sql","slug":"sql","permalink":"http://gonekng.github.io/tags/sql/"},{"name":"oracle","slug":"oracle","permalink":"http://gonekng.github.io/tags/oracle/"}],"author":"Jiwon Kang"},{"title":"SQL EXERCISE 6-7","slug":"SQL/SQL EXERCISE 6-7","date":"2022-05-02T00:32:11.000Z","updated":"2022-11-16T15:14:53.482Z","comments":true,"path":"2022/05/02/SQL/SQL EXERCISE 6-7/","link":"","permalink":"http://gonekng.github.io/2022/05/02/SQL/SQL%20EXERCISE%206-7/","excerpt":"","text":"CHAPTER 06 ‘오라클 SQL과 PL&#x2F;SQL을 다루는 기술 (길벗)’ Q1.101번 사원에 대해 아래의 결과를 산출하는 쿼리를 작성해 보자. 123---------------------------------------------------------------------------------------사번 사원명 job명칭 job시작일자 job종료일자 job수행부서명--------------------------------------------------------------------------------------- A1.1234567891011121314SELECT a.employee_id 사번 , a.emp_name 사원명 , b.job_title job 명칭 , c.start_date job 시작일자 , c.end_date job 종료일자 , d.department_name FROM employees a , jobs b , job_history c , departments d WHERE a.employee_id = c.employee_id AND b.job_id = c.job_id AND c.department_id = d.department_id AND a.employee_id = 101; 필요한 컬럼 및 테이블 사번(employee_id), 사원명(emp_name) → employees job명칭(job_title) → jobs job시작일자(start_date), job종료일자(end_date) → job_history job수행부서명(department_name) → departments 테이블 조인 조건 employees &amp; job_history → employee_id jobs &amp; job_history → job_id job_history &amp; departments → department_id 기타 조건 101번 사원에 대한 정보 : a.employee_id = 101 Q2.아래의 쿼리를 수행하면 오류가 발생한다. 오류의 원인은 무엇인가? 12345select a.employee_id, a.emp_name, b.job_id, b.department_idfrom employees a,job_history bwhere a.employee_id = b.employee_id(+)and a.department_id(+) = b.department_id; A2.(+) 연산자를 활용한 외부 조인의 경우 한쪽 방향으로만 가능하고, 이때 (+) 연산자는 데이터가 없는 테이블의 컬럼에만 붙여야 한다. 따라서, 위의 쿼리에서는 마지막 줄을 and a.department_id = b.department_id(+)로 수정해야 한다. Q3.외부조인시 (+)연산자를 같이 사용할 수 없는데, IN절에 사용하는 값이 1개인 경우는 사용 가능하다. 그 이유는 무엇일까? A3.IN절에 사용하는 값이 1개인 경우는 등호를 사용하는 것과 같은 의미이므로 사용 가능하다. Q4.다음의 쿼리를 ANSI 문법으로 변경해 보자. 1234567SELECT a.department_id , a.department_name FROM departments a , employees b WHERE a.department_id = b.department_id AND b.salary &gt; 3000 ORDER BY a.department_name; A4.123456SELECT a.department_id, a.department_name FROM departments a INNER JOIN employees b On (a.department_id = b.department_id AND b.salary &gt; 3000) ORDER BY a.department_name; 위의 쿼리는 departments 테이블과 employees 테이블의 내부 조인이다. ANSI 문법에서 내부 조인은 FROM절에서 INNER JOIN 으로 수행하며,조인 조건은 ON 절에 명시한다. Q5.다음은 연관성 있는 서브쿼리이다. 이를 연관성 없는 서브쿼리로 변환해 보자. 123456SELECT a.department_id , a.department_name FROM departments a WHERE EXISTS ( SELECT 1 FROM job_history b WHERE a.department_id = b.department_id ); A5.123456SELECT a.department_id , a.department_name FROM departments a WHERE a.department_id IN (SELECT b.department_id FROM job_history b); 위의 쿼리는 job_history 테이블에 존재하는 department_id에 대해departments 테이블의 department_id와 department_name을 출력한다. 이를 연관성 없는 서브쿼리로 변환하기 위해조인 조건 대신 IN 연산자를 통해 메인 쿼리의 조건으로 활용했다. Q6.연도별 이태리 최대매출액과 사원을 작성하는 쿼리를 학습했다. 이를 기준으로 최대 매출액, 최소매출액, 해당 사원을 조회하는 쿼리를 작성해 보자. A6.1234567891011121314151617181920212223242526272829303132333435363738SELECT emp.sales_year , emp.employee_id , emp2.emp_name , emp.amount_sold FROM (SELECT SUBSTR(a.sales_month, 1, 4) AS sales_year , a.employee_id , SUM(a.amount_sold) as amount_sold FROM sales a , customers b , countries c WHERE a.cust_id = b.cust_id AND b.country_id = c.country_id AND c.country_name = &#x27;Italy&#x27; GROUP BY SUBSTR(a.sales_month, 1, 4) , a.employee_id) emp , (SELECT sales_year , MAX(amount_sold) AS max_sold , MIN(amount_sold) AS min_sold FROM (SELECT SUBSTR(a.sales_month, 1, 4) AS sales_year , a.employee_id , SUM(a.amount_sold) as amount_sold FROM sales a , customers b , countries c WHERE a.cust_id = b.cust_id AND b.country_id = c.country_id AND c.country_name = &#x27;Italy&#x27; GROUP BY SUBSTR(a.sales_month, 1, 4) , a.employee_id) k GROUP BY sales_year) sale , employees emp2 WHERE emp.sales_year = sale.sales_year AND (emp.amount_sold = sale.max_sold OR emp.amount_sold = sale.min_sold) AND emp.employee_id = emp2.employee_id ORDER BY sales_year; 서브쿼리 1 : 연도, 사원별 이탈리아 매출액 (emp) sales, customers, countries를 조인하여 매출액 합계 계산 123456789101112SELECT SUBSTR(a.sales_month, 1, 4) AS sales_year , a.employee_id , SUM(a.amount_sold) as amount_sold FROM sales a , customers b , countries c WHERE a.cust_id = b.cust_id AND b.country_id = c.country_id AND c.country_name = &#x27;Italy&#x27; GROUP BY SUBSTR(a.sales_month, 1, 4) , a.employee_id 서브쿼리 2: 연도별 최대, 최소 매출액 (sale) emp 서브쿼리에서 연도별 최대, 최소값 계산 12345678910111213141516SELECT sales_year , MAX(amount_sold) AS max_sold , MIN(amount_sold) AS min_sold FROM (SELECT SUBSTR(a.sales_month, 1, 4) AS sales_year , a.employee_id , SUM(a.amount_sold) as amount_sold FROM sales a , customers b , countries c WHERE a.cust_id = b.cust_id AND b.country_id = c.country_id AND c.country_name = &#x27;Italy&#x27; GROUP BY SUBSTR(a.sales_month, 1, 4) , a.employee_id) k GROUP BY sales_year CHAPTER 07Q1.계층형 쿼리 응용편에서 LISTAGG 함수를 사용해 다음과 같이 로우를 컬럼으로 분리했었다. 12345SELECT department_id,LISTAGG(emp_name, &#x27;,&#x27;) WITHIN GROUP (ORDER BY emp_name) as empnamesFROM employeesWHERE department_id IS NOT NULLGROUP BY department_id; LISTAGG 함수 대신 계층형 쿼리, 분석함수를 사용해서 위 쿼리와 동일한 결과를 산출하는 쿼리를 작성해 보자. A1.123456789101112131415SELECT department_id , SUBSTR(SYS_CONNECT_BY_PATH(emp_name, &#x27;,&#x27;),2) empnames FROM ( SELECT emp_name , department_id , COUNT(*) OVER (PARTITION BY department_id) cnt , ROW_NUMBER() OVER (PARTITION BY department_id ORDER BY emp_name) rowseq FROM employees WHERE department_id IS NOT NULL ) WHERE rowseq = cnt START WITH rowseq = 1 CONNECT BY PRIOR rowseq + 1 = rowseq AND PRIOR department_id = department_id; 서브쿼리 : 부서별 사원명, 사원 수, 행 번호 구하기 부서별 파티션 : PARTITION BY department_id ORDER BY emp_name 1234567SELECT emp_name , department_id , COUNT(*) OVER (PARTITION BY department_id) cnt , ROW_NUMBER() OVER (PARTITION BY department_id ORDER BY emp_name) rowseq FROM employees WHERE department_id IS NOT NULL 각 파티션의 마지막 행에 대하여(WHERE rowseq = cnt)파티션의 첫 행부터(START WITH rowseq = 1)부서번호가 같은 직전 행까지(CONNECT BY PRIOR rowseq + 1 = rowseq AND PRIOR department_id = department_id)의 emp_name을연결하여 나타낸다.(SUBSTR(SYS_CONNECT_BY_PATH(emp_name, &#39;,&#39;),2)) Q2.아래의 쿼리는 사원테이블에서 JOB_ID가 ‘SH_CLERK‘인 사원을 조회하는 쿼리이다. 12345678910111213141516SELECT employee_id, emp_name, hire_dateFROM employeesWHERE job_id = &#x27;SH_CLERK&#x27;ORDER By hire_date;EMPLOYEE_ID EMP_NAME HIRE_DATE ----------- -------------------- ------------------- 184 Nandita Sarchand 2004/01/27 00:00:00 192 Sarah Bell 2004/02/04 00:00:00 185 Alexis Bull 2005/02/20 00:00:00 193 Britney Everett 2005/03/03 00:00:00 188 Kelly Chung 2005/06/14 00:00:00.... .... 199 Douglas Grant 2008/01/13 00:00:00 183 Girard Geoni 2008/02/03 00:00:00 사원테이블에서 퇴사일자(retire_date)는 모두 비어있는데,위 결과에서 사원번호가 184인 사원의 퇴사일자는 다음으로 입사일자가 빠른 192번 사원의 입사일자라고 가정해서다음과 같은 형태로 결과를 추출해낼 수 있도록 쿼리를 작성해 보자. (입사일자가 가장 최근인 183번 사원의 퇴사일자는 NULL이다) 1234567891011EMPLOYEE_ID EMP_NAME HIRE_DATE RETIRE_DATE----------- -------------------- ------------------- --------------------------- 184 Nandita Sarchand 2004/01/27 00:00:00 2004/02/04 00:00:00 192 Sarah Bell 2004/02/04 00:00:00 2005/02/20 00:00:00 185 Alexis Bull 2005/02/20 00:00:00 2005/03/03 00:00:00 193 Britney Everett 2005/03/03 00:00:00 2005/06/14 00:00:00 188 Kelly Chung 2005/06/14 00:00:00 2005/08/13 00:00:00.... .... 199 Douglas Grant 2008/01/13 00:00:00 2008/02/03 00:00:00 183 Girard Geoni 2008/02/03 00:00:00 A2.123456789SELECT employee_id , emp_name , hire_date , LEAD(hire_date) OVER (PARTITION BY job_id ORDER BY hire_date) AS retire_date FROM employees WHERE job_id = &#x27;SH_CLERK&#x27; ORDER BY hire_date; 문제에서 요구하는 퇴사일자(retire_date)는입사일자로 정렬했을 때 다음 사원의 입사일자(hire_date)와 같다. 따라서, 다음 행의 데이터를 가져오는 LEAD(hire_date) 함수를 통해각 사원의 퇴사일자(retire_date)를 산출할 수 있다. Q3.sales 테이블에는 판매데이터, customers 테이블에는 고객정보가 있다.2001년 12월 판매데이터 중 현재일자를 기준으로 고객의 나이를 계산해서 다음과 같이 연령대별 매출금액을 보여주는 쿼리를 작성해 보자. 12345678------------------------- 연령대 매출금액-------------------------10대 xxxxxx20대 ....30대 .... 40대 ....------------------------- A3.12345678910111213141516WITH age_amt AS ( SELECT TRUNC((TO_CHAR(SYSDATE, &#x27;yyyy&#x27;) - b.cust_year_of_birth), -1) AS age_seg , SUM(a.amount_sold) AS amount FROM sales a , customers b WHERE a.sales_month = &#x27;200112&#x27; AND a.cust_id = b.cust_id GROUP BY TRUNC((TO_CHAR(SYSDATE, &#x27;yyyy&#x27;) - b.cust_year_of_birth), -1) )SELECT * FROM age_amt ORDER BY age_seg; 서브쿼리 : 현재일자 기준 고객 연령대별 매출액 구하기 (age_amt) 현재일자를 기준으로 고객의 나이를 계산한 다음(TO_CHAR(SYSDATE, &#39;yyyy&#39;) - b.cust_year_of_birth)각 연령대별 amount_sold의 합계를 계산하였음 1234567891011SELECT TRUNC((TO_CHAR(SYSDATE, &#x27;yyyy&#x27;) - b.cust_year_of_birth), -1) AS age_seg , SUM(a.amount_sold) AS amount FROM sales a , customers b WHERE a.sales_month = &#x27;200112&#x27; AND a.cust_id = b.cust_id GROUP BY TRUNC((TO_CHAR(SYSDATE, &#x27;yyyy&#x27;) - b.cust_year_of_birth), -1) Q4.월별로 판매금액이 가장 하위에 속하는 대륙 목록을 뽑아보자.(대륙목록은 countries 테이블의 country_region에 있으며, country_id 컬럼으로 customers 테이블과 조인을 해서 구한다.) 1234567--------------------------------- 매출월 지역(대륙) 매출금액 ---------------------------------199801 Oceania xxxxxx199803 Oceania xxxxxx...--------------------------------- A4.12345678910111213141516171819202122232425WITH basis AS ( SELECT a.sales_month , c.country_region , SUM(a.amount_sold) as amt FROM sales a , customers b , countries c WHERE a.cust_id = b.cust_id AND b.country_id = c.country_id GROUP BY a.sales_month, c.country_region ) , month_amt AS ( SELECT sales_month AS &quot;매출월&quot; , country_region AS &quot;지역(대륙)&quot; , amt AS &quot;매출금액&quot; , RANK() OVER (PARTITION BY sales_month ORDER BY amt) AS ranks FROM basis )SELECT &quot;매출월&quot;, &quot;지역(대륙)&quot;, &quot;매출금액&quot; FROM month_amt WHERE ranks = 1; 서브쿼리 1 : 월별, 지역별 판매금액 합계 구하기 (basis) sales, customers, countries 조인 월별, 지역별 합계 : SUM(a.amount_sold) as amt 123456789SELECT a.sales_month , c.country_region , SUM(a.amount_sold) as amt FROM sales a , customers b , countries c WHERE a.cust_id = b.cust_id AND b.country_id = c.country_id GROUP BY a.sales_month, c.country_region 서브쿼리 2 : 월별로 각 대륙의 판매금액 합계 순위 구하기 (month_amt) basis 서브쿼리에서 sales_month 파티션별 amt 순위값 계산 1234567SELECT sales_month AS &quot;매출월&quot; , country_region AS &quot;지역(대륙)&quot; , amt AS &quot;매출금액&quot; , RANK() OVER (PARTITION BY sales_month ORDER BY amt) AS ranks FROM basis Q5.5장 연습문제 5번의 정답 결과를 이용해 다음과 같이 지역별, 대출종류별, 월별 대출잔액과 지역별 파티션을 만들어대출종류별 대출잔액의 %를 구하는 쿼리를 작성해보자. 123456789------------------------------------------------------------------------------------------------지역 대출종류 201111 201112 201210 201211 201212 203110 201311------------------------------------------------------------------------------------------------서울 기타대출 73996.9( 36% )서울 주택담보대출 130105.9( 64% ) 부산......------------------------------------------------------------------------------------------------- A5.123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354WITH basis AS ( SELECT region, gubun , CASE WHEN period = &#x27;201111&#x27; THEN loan_jan_amt ELSE 0 END amt1 , CASE WHEN period = &#x27;201112&#x27; THEN loan_jan_amt ELSE 0 END amt2 , CASE WHEN period = &#x27;201210&#x27; THEN loan_jan_amt ELSE 0 END amt3 , CASE WHEN period = &#x27;201211&#x27; THEN loan_jan_amt ELSE 0 END amt4 , CASE WHEN period = &#x27;201212&#x27; THEN loan_jan_amt ELSE 0 END amt5 , CASE WHEN period = &#x27;201310&#x27; THEN loan_jan_amt ELSE 0 END amt6 , CASE WHEN period = &#x27;201311&#x27; THEN loan_jan_amt ELSE 0 END amt7 FROM kor_loan_status ) , sum_amt AS ( SELECT region, gubun , SUM(amt1) AS amt1 , SUM(amt2) AS amt2 , SUM(amt3) AS amt3 , SUM(amt4) AS amt4 , SUM(amt5) AS amt5 , SUM(amt6) AS amt6 , SUM(amt7) AS amt7 FROM basis GROUP BY region, gubun )SELECT region AS &quot;지역&quot;, gubun AS &quot;대출종류&quot; , amt1 || &#x27;(&#x27; || ROUND(RATIO_TO_REPORT(amt1) OVER (PARTITION BY region), 3) *100 || &#x27;%)&#x27; AS &quot;201111&quot; , amt2 || &#x27;(&#x27; || ROUND(RATIO_TO_REPORT(amt2) OVER (PARTITION BY region), 3) *100 || &#x27;%)&#x27; AS &quot;201112&quot; , amt3 || &#x27;(&#x27; || ROUND(RATIO_TO_REPORT(amt3) OVER (PARTITION BY region), 3) *100 || &#x27;%)&#x27; AS &quot;201210&quot; , amt4 || &#x27;(&#x27; || ROUND(RATIO_TO_REPORT(amt4) OVER (PARTITION BY region), 3) *100 || &#x27;%)&#x27; AS &quot;201211&quot; , amt5 || &#x27;(&#x27; || ROUND(RATIO_TO_REPORT(amt5) OVER (PARTITION BY region), 3) *100 || &#x27;%)&#x27; AS &quot;201212&quot; , amt6 || &#x27;(&#x27; || ROUND(RATIO_TO_REPORT(amt6) OVER (PARTITION BY region), 3) *100 || &#x27;%)&#x27; AS &quot;201311&quot; , amt7 || &#x27;(&#x27; || ROUND(RATIO_TO_REPORT(amt7) OVER (PARTITION BY region), 3) *100 || &#x27;%)&#x27; AS &quot;201311&quot; FROM sum_amt ORDER BY region; 서브쿼리 1 : 월별 대출잔액 변수 만들기 (basis) CASE WHEN ~ THEN ~ ELSE 구문으로 월별 대출잔액 변수 생성 12345678910111213141516SELECT region, gubun , CASE WHEN period = &#x27;201111&#x27; THEN loan_jan_amt ELSE 0 END amt1 , CASE WHEN period = &#x27;201112&#x27; THEN loan_jan_amt ELSE 0 END amt2 , CASE WHEN period = &#x27;201210&#x27; THEN loan_jan_amt ELSE 0 END amt3 , CASE WHEN period = &#x27;201211&#x27; THEN loan_jan_amt ELSE 0 END amt4 , CASE WHEN period = &#x27;201212&#x27; THEN loan_jan_amt ELSE 0 END amt5 , CASE WHEN period = &#x27;201310&#x27; THEN loan_jan_amt ELSE 0 END amt6 , CASE WHEN period = &#x27;201311&#x27; THEN loan_jan_amt ELSE 0 END amt7 FROM kor_loan_status 서브쿼리 2 : 지역, 구분으로 그룹화하여 월별 합계 산출 (sum_amt) 1234567SELECT region, gubun , SUM(amt1) AS amt1, SUM(amt2) AS amt2 , SUM(amt3) AS amt3, SUM(amt4) AS amt4 , SUM(amt5) AS amt5, SUM(amt6) AS amt6 , SUM(amt7) AS amt7 FROM basis GROUP BY region, gubun 메인 쿼리 : 지역 내 대출종류별 대출잔액의 비율 산출 1234567891011121314151617SELECT region AS &quot;지역&quot;, gubun AS &quot;대출종류&quot; , amt1 || &#x27;(&#x27; || ROUND(RATIO_TO_REPORT(amt1) OVER (PARTITION BY region), 3) *100 || &#x27;%)&#x27; AS &quot;201111&quot; , amt2 || &#x27;(&#x27; || ROUND(RATIO_TO_REPORT(amt2) OVER (PARTITION BY region), 3) *100 || &#x27;%)&#x27; AS &quot;201112&quot; , amt3 || &#x27;(&#x27; || ROUND(RATIO_TO_REPORT(amt3) OVER (PARTITION BY region), 3) *100 || &#x27;%)&#x27; AS &quot;201210&quot; , amt4 || &#x27;(&#x27; || ROUND(RATIO_TO_REPORT(amt4) OVER (PARTITION BY region), 3) *100 || &#x27;%)&#x27; AS &quot;201211&quot; , amt5 || &#x27;(&#x27; || ROUND(RATIO_TO_REPORT(amt5) OVER (PARTITION BY region), 3) *100 || &#x27;%)&#x27; AS &quot;201212&quot; , amt6 || &#x27;(&#x27; || ROUND(RATIO_TO_REPORT(amt6) OVER (PARTITION BY region), 3) *100 || &#x27;%)&#x27; AS &quot;201311&quot; , amt7 || &#x27;(&#x27; || ROUND(RATIO_TO_REPORT(amt7) OVER (PARTITION BY region), 3) *100 || &#x27;%)&#x27; AS &quot;201311&quot; FROM sum_amt ORDER BY region","categories":[{"name":"sql","slug":"sql","permalink":"http://gonekng.github.io/categories/sql/"}],"tags":[{"name":"sql","slug":"sql","permalink":"http://gonekng.github.io/tags/sql/"},{"name":"oracle","slug":"oracle","permalink":"http://gonekng.github.io/tags/oracle/"}],"author":"Jiwon Kang"},{"title":"SQL Developer 깃허브 연동하기","slug":"SQL/Conneting SQL Developer with Github","date":"2022-04-26T07:02:41.000Z","updated":"2022-11-16T15:25:13.586Z","comments":true,"path":"2022/04/26/SQL/Conneting SQL Developer with Github/","link":"","permalink":"http://gonekng.github.io/2022/04/26/SQL/Conneting%20SQL%20Developer%20with%20Github/","excerpt":"","text":"Step 1. Github 준비 Github에서 SQL Developer와 연동할 새로운 Public Repository를 생성한다. Settings &gt; Developer settings 에서 새로운 Personal access token을 발급받는다. 새로 생성한 Repository의 이름을 입력하고 Select scopes에서 repo를 체크한 후 토큰을 생성한다. 이때 생성된 토큰 번호는 다시 알 수 없기 때문에, 발급 즉시 복사하여 다른 곳에 저장해두어야 함 Step 2. SQL Developer Git 복제 SQL Developer에서 팀 &gt; Git &gt; 복제 를 클릭하여 복제 마법사를 실행한다. 다음 버튼을 클릭한다. 앞서 생성한 Repository의 URL을 입력하고 Github 사용자 이름 및 비밀번호를 입력한다. main 분기를 선택한 후 다음 버튼을 클릭한다. 로컬 Git 저장소 경로 및 이름을 지정한다. 입력한 정보를 확인한 후 완료 버튼을 클릭한다. Step 3. Git Push 테스트 SQL Developer에서 파일 &gt; 새로 만들기 &gt; 모든 항목 을 클릭하여 SQL 파일을 생성한다. 새로운 파일의 이름을 입력한 후 디렉토리에는 Github와 연결한 로컬 폴더를 지정한다. 간단한 SQL 쿼리를 작성, 실행, 저장한 다음 팀 &gt; Git &gt; 모두 커밋 을 클릭한다. 작성자와 커밋한 사람에 이름을 입력한 다음 확인 버튼을 클릭한다. 팀 &gt; Git &gt; 푸시 를 클릭하여 푸시 마법사를 실행한다. 푸시 마법사의 안내에 따라 진행한다. 다음과 같은 에러가 발생할 경우 Step 2의 Git 복제 마법사를 다시 실행하고, Github 비밀번호에 앞서 발급받은 토큰 번호를 입력한다. Perform the push operation again and check that it is uploaded normally.","categories":[{"name":"sql","slug":"sql","permalink":"http://gonekng.github.io/categories/sql/"}],"tags":[{"name":"github","slug":"github","permalink":"http://gonekng.github.io/tags/github/"},{"name":"sql","slug":"sql","permalink":"http://gonekng.github.io/tags/sql/"},{"name":"oracle","slug":"oracle","permalink":"http://gonekng.github.io/tags/oracle/"}],"author":"Jiwon Kang"},{"title":"Crawling Music Chart Top100","slug":"Python/Crawling/Crawling Music Chart Top100","date":"2022-04-22T08:10:19.000Z","updated":"2022-10-05T05:39:51.855Z","comments":true,"path":"2022/04/22/Python/Crawling/Crawling Music Chart Top100/","link":"","permalink":"http://gonekng.github.io/2022/04/22/Python/Crawling/Crawling%20Music%20Chart%20Top100/","excerpt":"","text":"Website Info Request URL : https://music.bugs.co.kr/chart Request Method : GET User-Agent: Mozilla&#x2F;5.0 (Windows NT 10.0; Win64; x64) AppleWebKit&#x2F;537.36 (KHTML, like Gecko) Chrome&#x2F;100.0.4896.127 Safari&#x2F;537.36 Crawling Code step03_bugsTop100.py 12345678910111213141516171819202122232425262728293031323334353637383940import requestsimport warningsfrom bs4 import BeautifulSoupwarnings.filterwarnings(&#x27;ignore&#x27;)import pandas as pddef crawling(soup): chart = soup.find(&quot;table&quot;, class_=&quot;list trackList byChart&quot;) titles = [] artists = [] for p in chart.find_all(&quot;p&quot;, class_=&quot;title&quot;): titles.append(p.get_text()[1:-1]) for p in chart.find_all(&quot;p&quot;, class_=&quot;artist&quot;): artists.append(p.get_text()[1:-1]) return(titles, artists)def df_csv(tp): df = pd.DataFrame(&#123;&quot;title&quot; : tp[0], &quot;artist&quot; : tp[1]&#125;) print(df) df.to_csv(&quot;top100.csv&quot;, index=False) print(&quot;Crawling is done!&quot;)def main(): CUSTOM_HEADER = &#123; &#x27;user-agent&#x27; : &#x27;Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/100.0.4896.127 Safari/537.36&#x27; &#125; url = &#x27;https://music.bugs.co.kr/chart&#x27; req = requests.get(url = url, headers=CUSTOM_HEADER) print(req.status_code) soup = BeautifulSoup(req.text, &#x27;html.parser&#x27;) print(type(soup)) df_csv(crawling(soup))if __name__ == &quot;__main__&quot;: main() top100.csv","categories":[{"name":"python","slug":"python","permalink":"http://gonekng.github.io/categories/python/"},{"name":"crawling","slug":"python/crawling","permalink":"http://gonekng.github.io/categories/python/crawling/"}],"tags":[{"name":"python","slug":"python","permalink":"http://gonekng.github.io/tags/python/"},{"name":"crawling","slug":"crawling","permalink":"http://gonekng.github.io/tags/crawling/"},{"name":"BeautifulSoup","slug":"BeautifulSoup","permalink":"http://gonekng.github.io/tags/BeautifulSoup/"}],"author":"Jiwon Kang"},{"title":"Crawling Headline News","slug":"Python/Crawling/Crawling Headline News","date":"2022-04-22T06:22:10.000Z","updated":"2022-10-05T05:39:51.695Z","comments":true,"path":"2022/04/22/Python/Crawling/Crawling Headline News/","link":"","permalink":"http://gonekng.github.io/2022/04/22/Python/Crawling/Crawling%20Headline%20News/","excerpt":"","text":"Check the Website Info Access Developer Tools of the website and enter the Nework tab. Type ctrl + R and enter the Doc tap. Enter a site and check the Headers tap with the site. Copy the value of referer and user-agent. Crawling Code step01_headlinenews.py 123456789101112131415161718192021222324252627282930313233343536373839404142434445import warningsimport requestsfrom bs4 import BeautifulSoupwarnings.filterwarnings(&#x27;ignore&#x27;)import pandas as pddef crawling(soup): div = soup.find(&quot;div&quot;, class_=&quot;list_issue&quot;) print(type(div)) titles = [] urls = [] for a in div.find_all(&quot;a&quot;): titles.append(a.get_text()) urls.append(a[&#x27;href&#x27;]) results = (titles, urls) return(results)def df_csv(tp): df = pd.DataFrame(&#123;&quot;newstitle&quot; : tp[0], &quot;url&quot; : tp[1]&#125;) print(df) df.to_csv(&quot;headlinecrawling.csv&quot;, index=False) print(&quot;Crawling is done!&quot;)def main(): CUSTOM_HEADER = &#123; &#x27;referer&#x27; : &#x27;https://www.naver.com/&#x27;, &#x27;user-agent&#x27; : &#x27;Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/100.0.4896.127 Safari/537.36&#x27; &#125; url = &#x27;https://www.naver.com/&#x27; req = requests.get(url = url, headers=CUSTOM_HEADER) print(req.status_code) # 200 : Good # 404 : URL Error # 503 : Server Down soup = BeautifulSoup(req.text, &#x27;html.parser&#x27;, from_encoding=&#x27;utf-8&#x27;) df_csv(crawling(soup))if __name__ == &quot;__main__&quot;: main()","categories":[{"name":"python","slug":"python","permalink":"http://gonekng.github.io/categories/python/"},{"name":"crawling","slug":"python/crawling","permalink":"http://gonekng.github.io/categories/python/crawling/"}],"tags":[{"name":"python","slug":"python","permalink":"http://gonekng.github.io/tags/python/"},{"name":"crawling","slug":"crawling","permalink":"http://gonekng.github.io/tags/crawling/"},{"name":"BeautifulSoup","slug":"BeautifulSoup","permalink":"http://gonekng.github.io/tags/BeautifulSoup/"}],"author":"Jiwon Kang"},{"title":"Crawling Data from Web","slug":"Python/Crawling/Crawling Data from Web","date":"2022-04-22T03:39:12.000Z","updated":"2022-10-05T05:39:51.545Z","comments":true,"path":"2022/04/22/Python/Crawling/Crawling Data from Web/","link":"","permalink":"http://gonekng.github.io/2022/04/22/Python/Crawling/Crawling%20Data%20from%20Web/","excerpt":"","text":"Step 1. Set virtual environment Create a new directory under the C drive and virtual environment. 123$ mkdir crawling &amp;&amp; cd crawling$ virtualenv venv$ sourve venv/Scipts/activate Install some required packages. 123$ pip install beautifulsoup4$ pip install numpy pandas matplotlib seaborn$ pip install requests Step 2. Crawling Practice 1 Create a HTML file index.html 1234567891011121314151617181920&lt;!DOCTYPE html&gt;&lt;html lang=&quot;en&quot;&gt;&lt;head&gt; &lt;meta charset=&quot;UTF-8&quot;&gt; &lt;titl&gt;test&lt;/titl&gt;&lt;/head&gt;&lt;body&gt; &lt;h1&gt;aaaaaaaa&lt;/h1&gt; &lt;h2&gt;dddd&lt;/h2&gt; &lt;div class=&quot;chapter01&quot;&gt; &lt;p&gt;Don&#x27;t Crawl here &lt;/p&gt; &lt;/div&gt; &lt;div class=&quot;chapter02&quot;&gt; &lt;p&gt;Just Crawling here&lt;/p&gt; &lt;/div&gt; &lt;div id=&quot;main&quot;&gt; &lt;p&gt; Crawling .................. &lt;/p&gt; &lt;/div&gt;&lt;/body&gt;&lt;/html&gt; Create a python file main.py crawling text from index.html 12345678910111213141516from bs4 import BeautifulSoupdef main(): # Convert index.html to BeautifulSoup Object soup = BeautifulSoup(open(&quot;index.html&quot;, encoding=&#x27;UTF-8&#x27;), &quot;html.parser&quot;) print(type(soup)) print(soup.find(&quot;p&quot;)) print(&quot;----------------&quot;) print(soup.find_all(&quot;p&quot;)) print(&quot;----------------&quot;) print(soup.find(&quot;div&quot;, class_ = &quot;chapter02&quot;)) print(&quot;----------------&quot;) print(soup.find(&quot;div&quot;, id = &quot;main&quot;).find(&quot;p&quot;).get_text())if __name__ == &quot;__main__&quot;: main() Run the main.py and check the result printed. 1234567891011$ python main.py&lt;class &#x27;bs4.BeautifulSoup&#x27;&gt;&lt;p&gt;Don&#x27;t crawl here!&lt;/p&gt;----------------[&lt;p&gt;Don&#x27;t crawl here!&lt;/p&gt;, &lt;p&gt;Just Crawl here!&lt;/p&gt;, &lt;p&gt; Crawling .................. &lt;/p&gt;]----------------&lt;div class=&quot;chapter02&quot;&gt;&lt;p&gt;Just Crawl here!&lt;/p&gt;&lt;/div&gt;---------------- Step 3. Quick Start BeautifulSoup4 URL : https://www.crummy.com/software/BeautifulSoup/bs4/doc/#quick-start index2.html 1234567891011121314151617&lt;!DOCTYPE html&gt;&lt;html&gt; &lt;head&gt; &lt;title&gt;The Dormouse&#x27;s story&lt;/title&gt; &lt;/head&gt; &lt;body&gt; &lt;p class=&quot;title&quot;&gt;&lt;b&gt;The Dormouse&#x27;s story&lt;/b&gt;&lt;/p&gt; &lt;p class=&quot;story&quot;&gt; Once upon a time there were three little sisters; and their names were &lt;a href=&quot;http://example.com/elsie&quot; class=&quot;sister&quot; id=&quot;link1&quot;&gt;Elsie&lt;/a&gt;, &lt;a href=&quot;http://example.com/lacie&quot; class=&quot;sister&quot; id=&quot;link2&quot;&gt;Lacie&lt;/a&gt;and &lt;a href=&quot;http://example.com/tillie&quot; class=&quot;sister&quot; id=&quot;link3&quot;&gt;Tillie&lt;/a&gt;; and they lived at the bottom of a well. &lt;/p&gt; &lt;p class=&quot;story&quot;&gt;...&lt;/p&gt; &lt;/body&gt;&lt;/html&gt; temp1.py 1234from bs4 import BeautifulSoupsoup = BeautifulSoup(open(&quot;index2.html&quot;), &#x27;html.parser&#x27;)print(soup.prettify()) 123456789101112131415161718192021222324252627282930313233343536$ python temp1.py&lt;!DOCTYPE html&gt;&lt;html&gt; &lt;head&gt; &lt;title&gt; The Dormouse&#x27;s story &lt;/title&gt; &lt;/head&gt; &lt;body&gt; &lt;p class=&quot;title&quot;&gt; &lt;b&gt; The Dormouse&#x27;s story &lt;/b&gt; &lt;/p&gt; &lt;p class=&quot;story&quot;&gt; Once upon a time there were three little sisters; and their names were &lt;a class=&quot;sister&quot; href=&quot;http://example.com/elsie&quot; id=&quot;link1&quot;&gt; Elsie &lt;/a&gt; , &lt;a class=&quot;sister&quot; href=&quot;http://example.com/lacie&quot; id=&quot;link2&quot;&gt; Lacie &lt;/a&gt; and &lt;a class=&quot;sister&quot; href=&quot;http://example.com/tillie&quot; id=&quot;link3&quot;&gt; Tillie &lt;/a&gt; ; and they lived at the bottom of a well. &lt;/p&gt; &lt;p class=&quot;story&quot;&gt; ... &lt;/p&gt; &lt;/body&gt;&lt;/html&gt; temp2.py 1234567891011121314151617181920from bs4 import BeautifulSoupsoup = BeautifulSoup(open(&quot;index2.html&quot;), &#x27;html.parser&#x27;)print(soup.title)print(&quot;----------------&quot;)print(soup.title.name)print(&quot;----------------&quot;)print(soup.title.string)print(&quot;----------------&quot;)print(soup.title.parent.name)print(&quot;----------------&quot;)print(soup.p)print(&quot;----------------&quot;)print(soup.p[&#x27;class&#x27;])print(&quot;----------------&quot;)print(soup.a)print(&quot;----------------&quot;)print(soup.find_all(&#x27;a&#x27;))print(&quot;----------------&quot;)print(soup.find(id=&quot;link3&quot;)) 12345678910111213141516171819$ python temp2.py&lt;title&gt;The Dormouse&#x27;s story&lt;/title&gt;----------------title----------------The Dormouse&#x27;s story----------------head----------------&lt;p class=&quot;title&quot;&gt;&lt;b&gt;The Dormouse&#x27;s story&lt;/b&gt;&lt;/p&gt;----------------[&#x27;title&#x27;]----------------&lt;a class=&quot;sister&quot; href=&quot;http://example.com/elsie&quot; id=&quot;link1&quot;&gt;Elsie&lt;/a&gt;----------------[&lt;a class=&quot;sister&quot; href=&quot;http://example.com/elsie&quot; id=&quot;link1&quot;&gt;Elsie&lt;/a&gt;, &lt;a class=&quot;sister&quot; href=&quot;http://example.com/lacie&quot; id=&quot;link2&quot;&gt;Lacie&lt;/a&gt;, &lt;a class=&quot;sister&quot; href=&quot;http://example.com/tillie&quot; id=&quot;link3&quot;&gt;Tillie&lt;/a&gt;]----------------&lt;a class=&quot;sister&quot; href=&quot;http://example.com/tillie&quot; id=&quot;link3&quot;&gt;Tillie&lt;/a&gt; temp3.py 1234567from bs4 import BeautifulSoupsoup = BeautifulSoup(open(&quot;index2.html&quot;), &#x27;html.parser&#x27;)for link in soup.find_all(&#x27;a&#x27;): print(link.get(&#x27;href&#x27;))print(soup.get_text()) 1234567891011121314151617$ python temp3.pyhttp://example.com/elsiehttp://example.com/laciehttp://example.com/tillieThe Dormouse&#x27;s storyThe Dormouse&#x27;s story Once upon a time there were three little sisters; and their names were Elsie, Lacieand Tillie; and they lived at the bottom of a well....","categories":[{"name":"python","slug":"python","permalink":"http://gonekng.github.io/categories/python/"},{"name":"crawling","slug":"python/crawling","permalink":"http://gonekng.github.io/categories/python/crawling/"}],"tags":[{"name":"python","slug":"python","permalink":"http://gonekng.github.io/tags/python/"},{"name":"crawling","slug":"crawling","permalink":"http://gonekng.github.io/tags/crawling/"},{"name":"BeautifulSoup","slug":"BeautifulSoup","permalink":"http://gonekng.github.io/tags/BeautifulSoup/"}],"author":"Jiwon Kang"},{"title":"Python Basic 4","slug":"Python/Basic/python_basic_4","date":"2022-03-22T08:31:40.000Z","updated":"2024-12-16T12:33:49.093Z","comments":true,"path":"2022/03/22/Python/Basic/python_basic_4/","link":"","permalink":"http://gonekng.github.io/2022/03/22/Python/Basic/python_basic_4/","excerpt":"","text":"클래스(Class) 목적 : 코드의 간결화, 코드의 재사용, 유지보수 용이 여러 클래스가 모여서 하나의 라이브러리가 됨 장고 &#x2F; 웹개발 &#x2F; 머신러닝 &#x2F; 시각화 &#x2F; 전처리 클래스명은 대문자로 시작해야 함 1234567891011121314151617class Person: # class attribute (선택) country = &quot;korean&quot; # instance attribute (필수) def __init__(self, name, age): self.name = name self.age = ageif __name__ == &quot;__main__&quot;: kim = Person(&quot;Kim&quot;, 30) lee = Person(&quot;Lee&quot;, 28) # access class attribute print(&quot;Kim은 &#123;&#125;&quot;.format(kim.__class__.country)) print(&quot;Lee는 &#123;&#125;&quot;.format(lee.__class__.country)) Kim은 korean Lee는 korean 인스턴스 메서드 생성 list.append(), list.extend() 123456789101112131415161718192021class Person: # class attribute (선택) country = &quot;korean&quot; # instance attribute (필수) def __init__(self, name, age): self.name = name self.age = age # instance method 정의 def singing(self, songtitle): return &quot;&#123;&#125;: &#x27;&#123;&#125;&#x27; 노래를 부릅니다.&quot;.format(self.name, songtitle)if __name__ == &quot;__main__&quot;: kim = Person(&quot;Kim&quot;, 30) lee = Person(&quot;Lee&quot;, 28) # call instance method print(kim.singing(&quot;creep&quot;)) print(lee.singing(&quot;peaches&quot;)) Kim: &#39;creep&#39; 노래를 부릅니다. Lee: &#39;peaches&#39; 노래를 부릅니다. 클래스 상속12345678910111213141516171819202122232425262728293031323334353637383940class Parent: # init constructor def __init__(self, name, age): self.name = name self.age = age # instance method def whoAmI(self): print(&quot;I am Parent!&quot;) def singing(self, songtitle): return &quot;&#123;&#125;: &#x27;&#123;&#125;&#x27; 노래를 부릅니다.&quot;.format(self.name, songtitle) def dancing(self): return &quot;&#123;&#125;: 춤을 춥니다.&quot;.format(self.name)class Child(Parent): # instance attribute def __init__(self, name, age): super().__init__(name, age) # 부모 클래스의 생성자 그대로 가져오기 print(&quot;Child Class On.&quot;) # instance method def whoAmI(self): print(&quot;I am Child!&quot;) def studying(self, subject): return &quot;&#123;&#125; : &#123;&#125; 공부를 합니다.&quot;.format(self.name, subject)if __name__ == &quot;__main__&quot;: child_kim = Child(&quot;kim&quot;, 13) parent_kim = Parent(&quot;kim&quot;, 49) child_kim.whoAmI() parent_kim.whoAmI() print(parent_kim.dancing()) # print(parent_kim.studying()) -&gt; AttributeError 발생 print(child_kim.singing(&quot;fake love&quot;)) print(child_kim.studying(&quot;math&quot;)) Child Class On. I am Child! I am Parent! kim: 춤을 춥니다. kim: &#39;fake love&#39; 노래를 부릅니다. kim : math 공부를 합니다. 123456789101112131415161718192021222324252627class TV: def __init__(self): # private variable (외부 접근 불가능) self.__maxprice = 500 def sell(self): print(&quot;Selling Price: &#123;&#125;&quot;.format(self.__maxprice)) # set method, get method def setMaxPrice(self, price): self.__maxprice = price print(&quot;Price Updated&quot;) def getMaxPrice(self): return self.__maxprice if __name__==&quot;__main__&quot;: tv = TV() tv.sell() # 강제로 값을 변경할 수 없음 tv.__maxprice = 100 tv.sell() # 별도의 method를 통해 변경 가능 tv.setMaxPrice(400) tv.sell() Selling Price: 500 Selling Price: 500 Price Updated Selling Price: 400 클래스 내부 조건문 init constructor 1234567891011121314151617181920212223242526272829303132class Employee: # init constructor def __init__(self, name, salary = 0): self.name = name # public variable (외부 접근 가능) if salary &gt; 0: self.salary = salary else: self.salary = 0 print(&quot;급여는 0원이 될 수 없습니다. 다시 입력하세요.&quot;) def update_salary(self, amount): self.salary += amount def weekly_salary(self): return int(self.salary / 7)if __name__==&quot;__main__&quot;: emp1 = Employee(&quot;David&quot;, -50000) print(&quot;&#123;&#125;의 급여는 &#123;&#125;원입니다.&quot;.format(emp1.name, emp1.salary)) emp1.salary = emp1.salary + 1500 print(&quot;&#123;&#125;의 급여는 &#123;&#125;원입니다.&quot;.format(emp1.name, emp1.salary)) emp1.update_salary(3000) print(&quot;&#123;&#125;의 급여는 &#123;&#125;원입니다.&quot;.format(emp1.name, emp1.salary)) week_salary = emp1.weekly_salary() print(&quot;&#123;&#125;의 주 급여는 &#123;&#125;원입니다.&quot;.format(emp1.name, week_salary)) 급여는 0원이 될 수 없습니다. 다시 입력하세요. David의 급여는 0원입니다. David의 급여는 1500원입니다. David의 급여는 4500원입니다. David의 주 급여는 642원입니다. 클래스 Docstring12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455class Person: &quot;&quot;&quot; 사람을 표현하는 클래스 *** Attributes ---------- name: str Name of the person age: int Age of the person Methods ------- info(additional=&quot;&quot;): Prints the person&#x27;s name and age &quot;&quot;&quot; def __init__(self, name, age): &quot;&quot;&quot; Constructs all the neccessary attributes for the person object Parameters ---------- name: str Name of the person age: int Age of the person &quot;&quot;&quot; self.name = name self.age = age def info(self, additional=None): &quot;&quot;&quot; Prints the person&#x27;s information Parameters ---------- additional: str, optional more info to be diplayed (Default is None) / A, B, C Returns ------- None &quot;&quot;&quot; print(f&#x27;My name is &#123;self.name&#125;. I am &#123;self.age&#125; years old. &#x27; + additional)if __name__==&quot;__main__&quot;: print(Person.__doc__) person = Person(&quot;Jiwon&quot;, age = 27) person.info(&quot;I wanna be a data analyst.&quot;) 사람을 표현하는 클래스 *** Attributes ---------- name: str Name of the person age: int Age of the person Methods ------- info(additional=&quot;&quot;): Prints the person&#39;s name and age My name is Jiwon. I am 27 years old. I wanna be a data analyst.","categories":[{"name":"python","slug":"python","permalink":"http://gonekng.github.io/categories/python/"},{"name":"basic","slug":"python/basic","permalink":"http://gonekng.github.io/categories/python/basic/"}],"tags":[{"name":"python","slug":"python","permalink":"http://gonekng.github.io/tags/python/"},{"name":"google colab","slug":"google-colab","permalink":"http://gonekng.github.io/tags/google-colab/"}],"author":"Jiwon Kang"},{"title":"Python Basic 3","slug":"Python/Basic/python_basic_3","date":"2022-03-22T08:31:10.000Z","updated":"2024-12-16T12:33:45.083Z","comments":true,"path":"2022/03/22/Python/Basic/python_basic_3/","link":"","permalink":"http://gonekng.github.io/2022/03/22/Python/Basic/python_basic_3/","excerpt":"","text":"기초 문법 리뷰리스트, 튜플, 딕셔너리1234567891011121314# 리스트book_list = [&#x27;A&#x27;, &#x27;B&#x27;, &#x27;C&#x27;]print(book_list)# append, extend, insert, remove, pop, etc# 튜플book_tuple = (&#x27;A&#x27;, &#x27;B&#x27;, &#x27;C&#x27;)print(book_tuple)# 수정, 삭제 불가능# 딕셔너리book_dictionary = &#123;&quot;title&quot; : [&quot;A&quot;, &quot;B&quot;], &quot;year&quot; : [2011, 2002]&#125;print(book_dictionary)# keys(), values(), items(), get() [&#39;A&#39;, &#39;B&#39;, &#39;C&#39;] (&#39;A&#39;, &#39;B&#39;, &#39;C&#39;) &#123;&#39;title&#39;: [&#39;A&#39;, &#39;B&#39;], &#39;year&#39;: [2011, 2002]&#125; 조건문 &amp; 반복문123456if True: print(&quot;코드 실행&quot;) # 들여쓰기 주의elif True: print(&quot;코드 실행&quot;)else: print(&quot;코드 실행&quot;) 12for i in range(3): print(i+1, &quot;안녕하세요&quot;) 1 안녕하세요 2 안녕하세요 3 안녕하세요 123456789101112131415161718book_list = [&quot;R&quot;, &quot;Python&quot;]for book in book_list: print(book, end=&quot; &quot;)print(&quot;\\n&quot;)strings01 = &quot;Hello&quot;for char in strings01: print(char, end=&quot; &quot;)num_tuple = (1, 2, 3, 4)for num in num_tuple: print(num, end=&quot; &quot;)print(&quot;\\n&quot;)num_dict = &#123;&quot;A&quot;:1, &quot;B&quot;:2&#125;for num in num_dict: print(num, end=&quot; &quot;) # key 값 print(num_dict[num], end=&quot; &quot;) # value 값 R Python H e l l o 1 2 3 4 A 1 B 2 반복문의 필요성123456789name_list = [&quot;요구르트&quot;, &quot;우유&quot;, &quot;콜라&quot;, &quot;사이다&quot;, &quot;과자&quot;]price_list = [1000, 1500, 1200, 1200, 1000]quantity_list = [5, 3, 1, 2, 4]for i in range(len(name_list)): name = name_list[i] sales = price_list[i] * quantity_list[i] print(name + &quot;의 매출액 : &quot; + str(sales) + &quot;원&quot;) 요구르트의 매출액 : 5000원 우유의 매출액 : 4500원 콜라의 매출액 : 1200원 사이다의 매출액 : 2400원 과자의 매출액 : 4000원 while 조건식이 들어간 반복문 1234count = 5while count &gt; 0: print(count, &quot;안녕하세요.&quot;) count = count - 1 5 안녕하세요. 4 안녕하세요. 3 안녕하세요. 2 안녕하세요. 1 안녕하세요. 리스트 컴프리핸션 for-loop 반복문을 한 줄로 처리 123456789letters = []for char in &quot;helloworld&quot;: letters.append(char)print(&quot;for-loop 반복문 사용 :&quot;)print(&quot;\\t&quot;, letters)letters2 = [char for char in &quot;helloworld&quot;]print(&quot;리스트 컴프리핸션 사용 :&quot;)print(&quot;\\t&quot;, letters2) for-loop 반복문 사용 : [&#39;h&#39;, &#39;e&#39;, &#39;l&#39;, &#39;l&#39;, &#39;o&#39;, &#39;w&#39;, &#39;o&#39;, &#39;r&#39;, &#39;l&#39;, &#39;d&#39;] 리스트 컴프리핸션 사용 : [&#39;h&#39;, &#39;e&#39;, &#39;l&#39;, &#39;l&#39;, &#39;o&#39;, &#39;w&#39;, &#39;o&#39;, &#39;r&#39;, &#39;l&#39;, &#39;d&#39;] 1234567891011121314# 중첩 리스트를 단일 리스트로my_list = [[10],[20,30]]print(my_list)# for-loop 중첩 반복문 사용flattened_list1 = []for value_list in my_list: for value in value_list: flattened_list1.append(value)print(&quot;중첩 반복문 사용 :&quot;, flattened_list1)# 리스트 컴프리핸션 사용flattened_list2 = [value for value_list in my_list for value in value_list]print(&quot;리스트 컴프리핸션 사용 :&quot;, flattened_list2) [[10], [20, 30]] 중첩 반복문 사용 : [10, 20, 30] 리스트 컴프리핸션 사용 : [10, 20, 30] 사용자 정의 함수1234567891011121314151617181920def plus(a,b): c = a + b return cdef minus(a,b): c = a - b return cdef multiply(a,b): c = a * b return cdef divide(a,b): c = a / b return cprint(plus(1,5))print(minus(10,3))print(multiply(2,4))print(divide(8,2)) 6 7 8 4.0 basic.py로 저장할 때 예시 1!which python /usr/local/bin/python 12345678910111213# /usr/local/bin/python# -*- coding: utf-8 -*-def add(a, b): c = a + b return cif __name__ == &quot;__main__&quot;: a = 1 b = 2 c= add(a, b) print(c) 3 파이썬 함수 주석 처리 Docstring(문서화) 1234567891011121314151617181920212223# /usr/local/bin/python# -*- coding: utf-8 -*-def temp(content, letter): &quot;&quot;&quot; content 안에 있는 문자를 세는 함수입니다. Args: content(str) : 탐색 문자열 letter(str) : 찾을 문자열 Returns: int &quot;&quot;&quot; print(&quot;함수 테스트&quot;) cnt = len([char for char in content if char == letter]) return cntif __name__ == &quot;__main__&quot;: # help(temp) print(temp.__doc__) content 안에 있는 문자를 세는 함수입니다. Args: content(str) : 탐색 문자열 letter(str) : 찾을 문자열 Returns: int 12345678910111213141516171819202122232425262728def mean_and_median(value_list): &quot;&quot;&quot; 숫자 리스트 요소들의 평균과 중간값을 구하는 함수 Args: value_list (iterable of int / float) : A list of int numbers Returns: tuple(float, float) &quot;&quot;&quot; # 평균 mean = sum(value_list) / len(value_list) # 중간값 midpoint = int(len(value_list) / 2) if len(value_list) % 2 == 0: median = (value_list[midpoint - 1] + value_list[midpoint]) / 2 else: median = value_list[midpoint] return mean, medianif __name__ == &quot;__main__&quot;: value_list = [1, 1, 2, 2, 3, 4, 5] avg, median = mean_and_median(value_list) print(&quot;avg:&quot;, avg) print(&quot;median:&quot;, median) avg: 2.5714285714285716 median: 2 12345678910111213141516171819202122232425262728293031def calculation(num1,num2): &quot;&quot;&quot; 두 수에 대한 사칙연산을 수행하는 함수 Args: num1 : float number num2 : float number Returns: tuple(float, float, float, float) &quot;&quot;&quot; # 덧셈 plus_num = num1 + num2 # 뺄셈 minus_num = num1 - num2 # 곱셈 multiply_num = num1 * num2 # 나눗셈(소수점 둘째 자리까지) divide_num = round(num1 / num2, 2) return plus_num, minus_num, multiply_num, divide_numif __name__ == &quot;__main__&quot;: num1 = 13 num2 = 7 plus, minus, multiply, divide = calculation(num1, num2) print(&quot;+ :&quot;, plus) print(&quot;- :&quot;, minus) print(&quot;* :&quot;, multiply) print(&quot;/ :&quot;, divide) + : 20 - : 6 * : 91 / : 1.86 이터레이터, 제너레이터, 데코레이터 변수명 immutable or mutable, context manager","categories":[{"name":"python","slug":"python","permalink":"http://gonekng.github.io/categories/python/"},{"name":"basic","slug":"python/basic","permalink":"http://gonekng.github.io/categories/python/basic/"}],"tags":[{"name":"python","slug":"python","permalink":"http://gonekng.github.io/tags/python/"},{"name":"google colab","slug":"google-colab","permalink":"http://gonekng.github.io/tags/google-colab/"}],"author":"Jiwon Kang"},{"title":"Python Basic 2","slug":"Python/Basic/python_basic_2","date":"2022-03-22T08:30:50.000Z","updated":"2024-12-16T12:33:41.213Z","comments":true,"path":"2022/03/22/Python/Basic/python_basic_2/","link":"","permalink":"http://gonekng.github.io/2022/03/22/Python/Basic/python_basic_2/","excerpt":"","text":"리스트 시퀀스 데이터 타입 데이터에 순서가 존재하며, 인덱싱 및 슬라이싱 가능 대괄호(‘[값1, 값2, 값3]’)를 사용하여 표현 12345678910111213a = [] # 빈 리스트a_func = list() # 함수를 통해 생성b = [1]c = [&#x27;apple&#x27;]d = [1,2,[&#x27;apple&#x27;]] # 리스트 안에 리스트print(a)print(a_func)print(b)print(c)print(d)print(type(d)) [] [] [1] [&#39;apple&#39;] [1, 2, [&#39;apple&#39;]] &lt;class &#39;list&#39;&gt; 리스트 Indexing, Slicing12345678910a = [1,2,3,4,5,6,7,8,9,10]print(a)print(a[0])print(a[5])print(a[:5])print(a[8:])print(a[3:9:2])print(a[:-3:3])print(a[::-1]) [1, 2, 3, 4, 5, 6, 7, 8, 9, 10] 1 6 [1, 2, 3, 4, 5] [9, 10] [4, 6, 8] [1, 4, 7] [10, 9, 8, 7, 6, 5, 4, 3, 2, 1] 1234a = [[&quot;apple&quot;, &quot;banana&quot;, &quot;cherry&quot;], 10]print(a[0])print(a[0][1])print(a[0][2][2]) [&#39;apple&#39;, &#39;banana&#39;, &#39;cherry&#39;] banana e 리스트 연산자 사용12345a = [&quot;john&quot;, &quot;evan&quot;]b = [&quot;alice&quot;, &quot;eva&quot;]c = a + b # 리스트가 하나로 합쳐짐print(c) [&#39;john&#39;, &#39;evan&#39;, &#39;alice&#39;, &#39;eva&#39;] 1234c = a * 3d = b * 0print(&quot;a * 3 =&quot;, c) # 숫자만큼 반복print(&quot;b * 0 =&quot;, d) # 빈 리스트 출력 a * 3 = [&#39;john&#39;, &#39;evan&#39;, &#39;john&#39;, &#39;evan&#39;, &#39;john&#39;, &#39;evan&#39;] b * 0 = [] 리스트 수정 및 삭제123a = [0, 1, 2]a[1] = &#x27;b&#x27;print(a) [0, &#39;b&#39;, 2] 리스트 값 추가123456a = [100,200,300]a.append(400)print(a)a.append([500,600]) # 리스트 자체를 요소로 추가print(a) [100, 200, 300, 400] [100, 200, 300, 400, [500, 600]] 123456a = [100,200,300]a.append(400)print(a)a.extend([500,600]) # 리스트의 값들을 요소로 추가print(a) [100, 200, 300, 400] [100, 200, 300, 400, 500, 600] 123a = [0,1,2]a.insert(1, 100) # 원하는 위치에 원하는 값 추가print(a) [0, 100, 1, 2] 리스트 값 삭제1234a = [4,3,2,1,&quot;A&quot;]a.remove(1) # 해당되는 값 제거 a.remove(&quot;A&quot;)print(a) [4, 3, 2] 123456a = [1,2,3,4,5,6,7,8,9,10]del a[1] # 인덱스 번호를 이용하여 제거print(a)del a[1:5]print(a) [1, 3, 4, 5, 6, 7, 8, 9, 10] [1, 7, 8, 9, 10] 1234567b = [&quot;a&quot;, &quot;b&quot;, &quot;c&quot;, &quot;d&quot;, &quot;e&quot;]x = b.pop(2)print(x)print(b)y = b.pop() # 인덱스를 지정하지 않으면 마지막 요소 추출 및 제거print(y)print(b) c [&#39;a&#39;, &#39;b&#39;, &#39;d&#39;, &#39;e&#39;] e [&#39;a&#39;, &#39;b&#39;, &#39;d&#39;] 그 외 메서드12345a = [0,1,2,3]print(a)a.clear()print(a) [0, 1, 2, 3] [] 12a = [&quot;a&quot;,&quot;a&quot;,&quot;b&quot;,&quot;b&quot;]print(a.index(&quot;b&quot;)) # 해당 요소가 처음으로 등장하는 위치 2 12345678a = [1,4,5,2,3]b = [1,4,5,2,3]a.sort() # 오름차순print(a)b.sort(reverse=True) # 내림차순print(b) [1, 2, 3, 4, 5] [5, 4, 3, 2, 1] 12345678c = [&#x27;d&#x27;,&#x27;bye&#x27;,&#x27;five&#x27;,&#x27;a&#x27;]d = [&#x27;d&#x27;,&#x27;bye&#x27;,&#x27;five&#x27;,&#x27;a&#x27;]c.sort()print(c)d.sort(reverse=True)print(d) [&#39;a&#39;, &#39;bye&#39;, &#39;d&#39;, &#39;five&#39;] [&#39;five&#39;, &#39;d&#39;, &#39;bye&#39;, &#39;a&#39;] 튜플 리스트와 비슷한 형태로 Indexing, Slicing 가능 리스트와 달리 수정 및 삭제가 안 됨 소괄호(‘(값1, 값2, 값3)’)를 사용하여 표현 123456789tuple1 = (0) # 끝에 comma(,)를 붙이지 않으면 int 자료형tuple2 = (0,) # 끝에 comma(,)를 붙여야 tuple 자료형tuple3 = 0, 1, 2print(tuple1)print(type(tuple1))print(tuple2)print(type(tuple2))print(tuple3)print(type(tuple3)) 0 &lt;class &#39;int&#39;&gt; (0,) &lt;class &#39;tuple&#39;&gt; (0, 1, 2) &lt;class &#39;tuple&#39;&gt; 123456789a = (0,1,2,3,&#x27;a&#x27;)print(type(a))# del a[4] : 튜플에서는 수정, 삭제 안 됨b = list(a)print(b)b[1] = &#x27;b&#x27;a = tuple(b)print(a) &lt;class &#39;tuple&#39;&gt; [0, 1, 2, 3, &#39;a&#39;] (0, &#39;b&#39;, 2, 3, &#39;a&#39;) 튜플 Indexing, Slicing1234567a = (0,1,2,3,&#x27;a&#x27;)print(type(a))print(a[1])print(a[-2])print(a[1:3])print(a[::2]) &lt;class &#39;tuple&#39;&gt; 1 3 (1, 2) (0, 2, &#39;a&#39;) 튜플 연산자 사용123456t1 = (0,1,2)t2 = (&quot;a&quot;, &quot;b&quot;, &quot;c&quot;)print(t1 + t2)print(t1 * 3)print(t1 * 0) (0, 1, 2, &#39;a&#39;, &#39;b&#39;, &#39;c&#39;) (0, 1, 2, 0, 1, 2, 0, 1, 2) () 딕셔너리 Key와 Value로 구분됨 중괄호({‘키1’:’값1’, ‘키2’:’값2’})를 사용하여 표현 12345678dict_01 = &#123;&#x27;teacher&#x27; : &#x27;evan&#x27;, &#x27;class&#x27; : &#x27;601호&#x27;, &#x27;open&#x27; : &#x27;2022-03-10&#x27;, &#x27;students&#x27; : 24, &#x27;names&#x27; : [&#x27;A&#x27;, &#x27;B&#x27;, &#x27;R&#x27;, &#x27;Z&#x27;]&#125;print(dict_01[&#x27;teacher&#x27;])print(dict_01[&#x27;open&#x27;])print(dict_01[&#x27;names&#x27;]) evan 2022-03-10 [&#39;A&#39;, &#39;B&#39;, &#39;R&#39;, &#39;Z&#39;] 123print(dict_01.keys())print(type(dict_01.keys()))print(list(dict_01.keys())) # 다양한 연산과 메서드를 적용할 수 있는 리스트형으로 변환 dict_keys([&#39;teacher&#39;, &#39;class&#39;, &#39;open&#39;, &#39;students&#39;, &#39;names&#39;]) &lt;class &#39;dict_keys&#39;&gt; [&#39;teacher&#39;, &#39;class&#39;, &#39;open&#39;, &#39;students&#39;, &#39;names&#39;] 123print(dict_01.values())print(type(dict_01.values()))print(list(dict_01.values())) # 다양한 연산과 메서드를 적용할 수 있는 리스트형으로 변환 dict_values([&#39;evan&#39;, &#39;601호&#39;, &#39;2022-03-10&#39;, 24, [&#39;A&#39;, &#39;B&#39;, &#39;R&#39;, &#39;Z&#39;]]) &lt;class &#39;dict_values&#39;&gt; [&#39;evan&#39;, &#39;601호&#39;, &#39;2022-03-10&#39;, 24, [&#39;A&#39;, &#39;B&#39;, &#39;R&#39;, &#39;Z&#39;]] 1dict_01.items() # 각 key와 value가 튜플 형태로 출력됨 dict_items([(&#39;teacher&#39;, &#39;evan&#39;), (&#39;class&#39;, &#39;601호&#39;), (&#39;open&#39;, &#39;2022-03-10&#39;), (&#39;students&#39;, 24), (&#39;names&#39;, [&#39;A&#39;, &#39;B&#39;, &#39;R&#39;, &#39;Z&#39;])]) 1234567print(dict_01.get(&quot;teacher&quot;))# print(dict_01[&#x27;선생님&#x27;])print(dict_01.get(&quot;선생님&quot;)) # key가 없으면 None을 반환print(dict_01.get(&quot;선생님&quot;, &quot;없음&quot;)) # key가 없을 때 대체값 지정 가능print(dict_01.get(&quot;class&quot;))# 그냥 값을 출력해도 되지만, get 메서드를 사용하면 key가 없더라도 에러 없이 출력 가능 evan None 없음 601호 조건문 &amp; 반복문조건문12345weather = &#x27;맑음&#x27;if weather == &quot;비&quot;: print(&quot;우산을 가져간다.&quot;)else: print(&quot;우산을 가져가지 않는다.&quot;) 우산을 가져가지 않는다. 1234567# 60점 이상 합격score = int(input(&quot;점수를 입력하시오. : &quot;))if score &gt;= 60: print(&quot;합격입니다.&quot;)else: print(&quot;불합격입니다.&quot;) 점수를 입력하시오. : 50 불합격입니다. 12345678910111213141516# 90점 이상은 A, 80점 이상은 B, 70점 이상은 C, 나머지는 Fscore = int(input(&quot;점수를 입력하시오. : &quot;))grade = &quot;&quot;if score &gt;= 90: grade = &quot;A&quot;elif score &gt;= 80: grade = &quot;B&quot;elif score &gt;= 70: grade = &quot;C&quot;elif score &gt;= 60: grade = &quot;D&quot;else: grade = &quot;F&quot; print(grade) 점수를 입력하시오. : 68 D 반복문12for i in range(4): print(i+1, &quot;안녕하세요!&quot;) 1 안녕하세요! 2 안녕하세요! 3 안녕하세요! 4 안녕하세요! 123456789count = range(5)print(count)for n in count: print(str(n+1) + &quot;번째&quot;) if (n+1) == 3: print(&quot;stop!&quot;) break print(&quot;shoot!&quot;) range(0, 5) 1번째 shoot! 2번째 shoot! 3번째 stop! 1234567a = &quot;hello&quot;for x in a: if x==&#x27;l&#x27;: break print(x) h e 반복문 작성 방식 : zip, range, enumerate, len, etc 12345alphabets = [&#x27;A&#x27;, &#x27;B&#x27;, &#x27;C&#x27;]# enumerate는 인덱스와 값을 튜플 형태로 묶어주는 객체for i, value in enumerate(alphabets): print(i, value) 0 A 1 B 2 C","categories":[{"name":"python","slug":"python","permalink":"http://gonekng.github.io/categories/python/"},{"name":"basic","slug":"python/basic","permalink":"http://gonekng.github.io/categories/python/basic/"}],"tags":[{"name":"python","slug":"python","permalink":"http://gonekng.github.io/tags/python/"},{"name":"google colab","slug":"google-colab","permalink":"http://gonekng.github.io/tags/google-colab/"}],"author":"Jiwon Kang"},{"title":"Python Basic 1","slug":"Python/Basic/python_basic_1","date":"2022-03-22T08:30:00.000Z","updated":"2024-12-16T12:33:35.278Z","comments":true,"path":"2022/03/22/Python/Basic/python_basic_1/","link":"","permalink":"http://gonekng.github.io/2022/03/22/Python/Basic/python_basic_1/","excerpt":"","text":"Hello World1print(&quot;Hello, World!&quot;) Hello, World! 주석 처리 코드 작업 시, 특정 코드에 대해 설명 사용자 정의 함수 작성 시, 클래스 작성 시 중요 (도움말 작성) 123456# 한 줄 주석 처리&quot;&quot;&quot;여러 줄 주석 처리&quot;&quot;&quot;print(&quot;Hello, World!&quot;) Hello, World! 변수 (Scalar) 객체(OBject)로 구현이 됨 하나의 자료형(Type)을 가진다. 클래스(Class)로 정의된다. 다양한 함수들 존재 int int 정수를 표현하는 데 사용 12345num_int = 1num_int2 = 3print(num_int)print(num_int2)print(type(num_int)) 1 3 &lt;class &#39;int&#39;&gt; float 실수를 표현하는 데 사용 123num_float = 0.2print(num_float)print(type(num_float)) 0.2 &lt;class &#39;float&#39;&gt; bool True와 False로 나타나는 Boolean 값을 표현하는 데 사용 123bool_true = Trueprint(bool_true)print(type(bool_true)) True &lt;class &#39;bool&#39;&gt; None Null을 나타내는 자료형으로 None이라는 한 가지 값만 가진다. 123none_x = Noneprint(none_x)print(type(none_x)) None &lt;class &#39;NoneType&#39;&gt; 사칙연산정수형 사칙연산123456789a = 15 # intb = 2 # intprint(&#x27;a + b = &#x27;, a+b) # intprint(&#x27;a - b = &#x27;, a-b) # intprint(&#x27;a * b = &#x27;, a*b) # intprint(&#x27;a / b = &#x27;, a/b) # floatprint(&#x27;a // b = &#x27;, a//b) # intprint(&#x27;a % b = &#x27;, a%b) # intprint(&#x27;a ** b = &#x27;, a**b) # int a + b = 17 a - b = 13 a * b = 30 a / b = 7.5 a // b = 7 a % b = 1 a ** b = 225 실수형 사칙연산123456789a = 15.0 # floatb = 2.0 # floatprint(&#x27;a + b =&#x27;, a+b) # floatprint(&#x27;a - b =&#x27;, a-b) # floatprint(&#x27;a * b =&#x27;, a*b) # floatprint(&#x27;a / b =&#x27;, a/b) # floatprint(&#x27;a // b =&#x27;, a//b) # floatprint(&#x27;a % b =&#x27;, a%b) # floatprint(&#x27;a ** b =&#x27;, a**b) # float a + b = 17.0 a - b = 13.0 a * b = 30.0 a / b = 7.5 a // b = 7.0 a % b = 1.0 a ** b = 225.0 논리형 연산자 Bool형은 True와 False 값으로 정의 AND, OR, NOT 123456789101112x = 5 &gt; 4print(&#x27;x =&#x27;, x)y = 3 &gt; 9print(&#x27;y =&#x27;, y)print(&#x27;x and x =&#x27;, x and x)print(&#x27;x and y =&#x27;, x and y)print(&#x27;y and x =&#x27;, y and x)print(&#x27;y and y =&#x27;, y and y)print(&#x27;x or x =&#x27;, x or x)print(&#x27;x or y =&#x27;, x or y)print(&#x27;y or x =&#x27;, y or x)print(&#x27;y or y =&#x27;, y or y) x = True y = False x and x = True x and y = False y and x = False y and y = False x or x = True x or y = True y or x = True y or y = False 비교 연산자 부등호를 의미 비교 연산자를 True와 False 값을 도출 논리 &amp; 비교 연산자 응용123var = input(&quot;숫자를 입력하시오. :&quot;)print(var)print(type(var)) 숫자를 입력하시오. :24 24 &lt;class &#39;str&#39;&gt; 123var = int(input(&quot;숫자를 입력하시오. :&quot;))print(var)print(type(var)) 숫자를 입력하시오. :92 92 &lt;class &#39;int&#39;&gt; 123456789num1 = int(input(&quot;숫자를 입력하시오. :&quot;))num2 = int(input(&quot;숫자를 입력하시오. :&quot;))num3 = int(input(&quot;숫자를 입력하시오. :&quot;))num4 = int(input(&quot;숫자를 입력하시오. :&quot;))var1 = num1 &gt;= num2 var2 = num3 &lt; num4print(var1 and var2)print(var1 or var2) 숫자를 입력하시오. :29 숫자를 입력하시오. :15 숫자를 입력하시오. :8 숫자를 입력하시오. :10 True True 문자열문자열 입력 방법 문자열을 입력하는 4가지 방법 1234print(&quot;Hello, World&quot;)print(&#x27;Hello, World&#x27;)print(&quot;&#x27;Hello, World&#x27;&quot;)print(&#x27;&quot;Hello, World&quot;&#x27;) Hello, World Hello, World &#39;Hello, World &quot;Hello, World&quot; 문자열에 작은따옴표, 큰따옴표 포함하는 방법 123456789food = &quot;Python&#x27;s favorite food is perl&quot;print(food)say = &#x27;&quot;Python is very easy.&quot; he says.&#x27;print(say)food2 = &#x27;Python\\&#x27;s favorite food is perl&#x27;print(food2)say2 = &quot;\\&quot;Python is very easy.\\&quot; he says.&quot;print(say2) Python&#39;s favorite food is perl &quot;Python is very easy.&quot; he says. Python&#39;s favorite food is perl &quot;Python is very easy.&quot; he says. 변수에 여러 줄의 문자열 대입 12multiline = &quot;Life is too short.\\nYou need python.&quot;print(multiline) Life is too short. You need python. 12345multiline =&#x27;&#x27;&#x27;Life is too short.You need python&#x27;&#x27;&#x27;print(multiline) Life is too short. You need python String 연산자 덧셈 연산자 1234str1 = &quot;Hello &quot;str2 = &quot;World! &quot;print(str1 + str2) Hello World! 곱셈 연산자 12greeting = str1 + str2print(greeting * 3) Hello World! Hello World! Hello World! Indexing 문자열 인덱싱은 문자열 안에서 범위를 지정하여 특정 단일문자 추출 12345greeting = &quot;Hello Kaggle!&quot;print(greeting[0])print(greeting[6])print(greeting[len(greeting)-1])print(greeting[-1]) H K ! ! Slicing 문자열 슬라이싱은 문자열 안에서 범위를 지정하고 특정 문자열 추출 1234567print(greeting[:])print(greeting[:5])print(greeting[6:])print(greeting[3:9])print(greeting[0:9:2])print(greeting[6:-1])print(greeting[::-1]) Hello Kaggle! Hello Kaggle! lo Kag HloKg Kaggle !elggaK olleH Formattingformat 코드1234567print(&quot;I eat %d apples.&quot; % 3) # 숫자 대입print(&quot;I eat %s apples.&quot; % &quot;five&quot;) # 문자열 대입num = 10day = &quot;three&quot;say = &quot;I ate %d apples, so I was sick for %s days.&quot; % (num, day)print(say) I eat 3 apples. I eat five apples. I ate 10 apples, so I was sick for three days. 123print(&quot;I have %s apples&quot; % 3)print(&quot;rate is %s&quot; % 3.234)print(&quot;Error is %d%%.&quot; % 98) # fomatting 연산자와 %를 함께 쓸 때는 %% I have 3 apples rate is 3.234 Error is 98%. 123456print(&quot;%10s,Jane!&quot; % &quot;hi&quot;)print(&quot;%-10s,Jane!&quot; % &quot;hi&quot;)print(&quot;&#x27;%0.4f&#x27;&quot; % 3.42134234)print(&quot;&#x27;%10.4f&#x27;&quot; % 3.42134234)print(&quot;&#x27;%-10.4f&#x27;&quot; % 3.42134234) hi,Jane! hi ,Jane! &#39;3.4213&#39; &#39; 3.4213&#39; &#39;3.4213 &#39; format 함수12345678910print(&quot;I eat &#123;0&#125; apples.&quot;.format(7))print(&quot;I eat &#123;0&#125; apples.&quot;.format(&quot;five&quot;))num = 8day = 3print(&quot;I ate &#123;0&#125; apples.&quot;.format(num))print(&quot;I ate &#123;0&#125; apples, so I was sick for &#123;1&#125; days.&quot;.format(num, day))print(&quot;I ate &#123;num&#125; apples, so I was sick for &#123;day&#125; days.&quot;.format(num=6,day=2))print(&quot;I ate &#123;0&#125; apples, so I was sick for &#123;day&#125; days.&quot;.format(4,day=1)) I eat 7 apples. I eat five apples. I ate 8 apples. I ate 8 apples, so I was sick for 3 days. I ate 6 apples, so I was sick for 2 days. I ate 4 apples, so I was sick for 1 days. 123456print(&quot;&#x27;&#123;0:&lt;10&#125;&#x27;&quot;.format(&quot;hi&quot;))print(&quot;&#x27;&#123;0:^10&#125;&#x27;&quot;.format(&quot;hi&quot;))print(&quot;&#x27;&#123;0:&gt;10&#125;&#x27;&quot;.format(&quot;hi&quot;))print(&quot;&#x27;&#123;0:=^10&#125;&#x27;&quot;.format(&quot;hi&quot;))print(&quot;&#x27;&#123;0:!&lt;10&#125;&#x27;&quot;.format(&quot;hi&quot;)) &#39;hi &#39; &#39; hi &#39; &#39; hi&#39; &#39;====hi====&#39; &#39;hi!!!!!!!!&#39; 12345y = 3.42134234print(&quot;&#x27;&#123;0:0.4f&#125;&#x27;&quot;.format(y))print(&quot;&#x27;&#123;0:10.4f&#125;&#x27;&quot;.format(y))print(&quot;&#x27;&#123;0:^10.4f&#125;&#x27;&quot;.format(y))print(&quot;&#x27;&#123;0:&lt;10.4f&#125;&#x27;&quot;.format(y)) &#39;3.4213&#39; &#39; 3.4213&#39; &#39; 3.4213 &#39; &#39;3.4213 &#39; 123name1 = &quot;John&quot;name2 = &quot;Marry&quot;print(&quot;&#123;0&#125; &#123;&#123;and&#125;&#125; &#123;1&#125;&quot;.format(name1, name2)) John &#123;and&#125; Marry f 문자열1234567name = &#x27;Sally&#x27;age = 29print(f&quot;My name is &#123;name&#125;, and I&#x27;m &#123;age&#125; years old.&quot;)print(f&quot;Next year, I&#x27;m going to be &#123;age+1&#125; years old.&quot;)d = &#123;&#x27;name&#x27;:&#x27;Sally&#x27;, &#x27;age&#x27;:29&#125;print(f&quot;My name is &#123;d[&#x27;name&#x27;]&#125;, and I&#x27;m &#123;d[&#x27;age&#x27;]&#125; years old.&quot;) # 딕셔너리 자료형 활용 My name is Sally, and I&#39;m 29 years old. Next year, I&#39;m going to be 30 years old. My name is Sally, and I&#39;m 29 years old. 123456print(f&#x27;&#123;&quot;hi&quot;:&lt;10&#125;&#x27;)print(f&#x27;&#123;&quot;hi&quot;:^10&#125;&#x27;)print(f&#x27;&#123;&quot;hi&quot;:&gt;10&#125;&#x27;)print(f&#x27;&#123;&quot;hi&quot;:=^10&#125;&#x27;)print(f&#x27;&#123;&quot;hi&quot;:!&lt;10&#125;&#x27;) hi hi hi ====hi==== hi!!!!!!!! 12345y = 3.42134234print(f&#x27;&#123;y:0.4f&#125;&#x27;)print(f&#x27;&#123;y:10.4f&#125;&#x27;)print(f&#x27;&#123;y:^10.4f&#125;&#x27;)print(f&#x27;&#123;y:&lt;10.4f&#125;&#x27;) 3.4213 3.4213 3.4213 3.4213 123name1 = &quot;John&quot;name2 = &quot;Marry&quot;print(f&quot;&#123;name1&#125; &#123;&#123;and&#125;&#125; &#123;name2&#125;&quot;) John &#123;and&#125; Marry 문자열 함수12345678910# counta = &#x27;hobby&#x27;print(a.count(&#x27;b&#x27;))# find, indexa = &quot;Python is the best choice&quot;print(a.find(&quot;b&quot;))print(a.find(&quot;k&quot;)) # 없으면 -1 반환print(a.index(&quot;t&quot;))# print(a.index(&quot;k&quot;)) # 없으면 에러 2 14 -1 2 12345678910111213# joinprint(&quot;,&quot;.join(&#x27;abcdefg&#x27;))# upper, lowera = &quot;Hello&quot;print(a.upper())print(a.lower())# lstrip, rstrip, stripa = &quot; OK &quot;print(a.lstrip())print(a.rstrip())print(a.strip()) a,b,c,d,e,f,g HELLO hello OK OK OK 123456789# replacea = &quot;That&#x27;s right!&quot;print(a.replace(&#x27;right&#x27;, &#x27;wrong&#x27;))# splita = &quot;I Love You&quot;print(a.split()) # 공백 기준b = &quot;a:b:c:d&quot;print(b.split(&#x27;:&#x27;)) # 특정 구분자 기준 That&#39;s wrong! [&#39;I&#39;, &#39;Love&#39;, &#39;You&#39;] [&#39;a&#39;, &#39;b&#39;, &#39;c&#39;, &#39;d&#39;]","categories":[{"name":"python","slug":"python","permalink":"http://gonekng.github.io/categories/python/"},{"name":"basic","slug":"python/basic","permalink":"http://gonekng.github.io/categories/python/basic/"}],"tags":[{"name":"python","slug":"python","permalink":"http://gonekng.github.io/tags/python/"},{"name":"google colab","slug":"google-colab","permalink":"http://gonekng.github.io/tags/google-colab/"}],"author":"Jiwon Kang"},{"title":"R_markdown Sample","slug":"R/R_sample","date":"2022-03-18T01:02:35.000Z","updated":"2022-10-05T05:39:55.091Z","comments":true,"path":"2022/03/18/R/R_sample/","link":"","permalink":"http://gonekng.github.io/2022/03/18/R/R_sample/","excerpt":"","text":"개요 R에서 만든 sample 파일 github에 업로드 R MarkdownThis is an R Markdown document. Markdown is a simple formatting syntax for authoring HTML, PDF, and MS Word documents. For more details on using R Markdown see http://rmarkdown.rstudio.com. When you click the Knit button a document will be generated that includes both content as well as the output of any embedded R code chunks within the document. You can embed an R code chunk like this: 1summary(cars) 1234567## speed dist ## Min. : 4.0 Min. : 2.00 ## 1st Qu.:12.0 1st Qu.: 26.00 ## Median :15.0 Median : 36.00 ## Mean :15.4 Mean : 42.98 ## 3rd Qu.:19.0 3rd Qu.: 56.00 ## Max. :25.0 Max. :120.00 Including PlotsYou can also embed plots, for example: Note that the echo = FALSE parameter was added to the code chunk to prevent printing of the R code that generated the plot.","categories":[{"name":"r","slug":"r","permalink":"http://gonekng.github.io/categories/r/"}],"tags":[{"name":"r","slug":"r","permalink":"http://gonekng.github.io/tags/r/"}],"author":"Jiwon Kang"},{"title":"Hexo 블로그 생성","slug":"hexo/hexo_blog","date":"2022-03-17T02:14:21.000Z","updated":"2022-11-16T09:54:09.424Z","comments":true,"path":"2022/03/17/hexo/hexo_blog/","link":"","permalink":"http://gonekng.github.io/2022/03/17/hexo/hexo_blog/","excerpt":"","text":"Hexo 설치 node.js 설치 옵션 - Chocolatey도 함께 설치 바탕화면 git bash에 입력 node -v : 버전 확인 npm install -g hexo-cli : hexo command line 설치 hexo init myblog : 바탕화면에 myblog 폴더 생성 myblog 폴더 위치에서 Git Bash 열고 hexo server 입력 출력되는 링크로 이동하여 hexo 서버가 잘 열리는지 확인 깃허브 레포지토리 생성 깃허브 로그인 후 profile - new repositories - new 클릭 Repository 이름은 myblog로 지정 (로컬에 생성한 폴더 이름으로 지정해야함) 별도의 옵션 없이 Creating repository 클릭 myblog 폴더 위치에서 Git Bash 열고 아래 코드 한 줄씩 입력 12345671 echo &quot;# myblog&quot; &gt;&gt; README.md2 git init3 git add README.md4 git commit -m &quot;first commit&quot;5 git branch -M main6 git remote add origin https://github.com/[깃허브아이디]/myblog.git7 git push -u origin main 해당 레포지토리에 README.md 파일 생성 새로운 git 저장소를 해당 로컬 폴더에 초기화 README.md 파일을 git에 추가 git에 추가된 모든 내용 커밋 (커밋 메시지는 자유롭게 지정 가능) 사용자 에러 발생 시 아래 코드 입력 12git config --global user.email “[이메일주소]”git config --global user.name “[깃허브아이디]” git 브랜치를 main으로 변경 git 초기화 시 기본값은 master이나, 대부분의 프로젝트에서 main을 사용하기 때문에 초기에 변경해주는 것이 좋음 해당 로컬 폴더에 깃허브 레포지토리를 연결 커밋한 내용 푸시 초기 세팅 이후에는 add, commit, push 명령어만 입력 깃허브에서 새로고침 후 업로드된 README.md 파일 확인 Hexo 블로그 생성 깃허브에서 새로운 Repository 생성 (이름 : [깃허브아이디].github.io) myblog 폴더 위치에서 Git Bash 열고 아래 코드 입력 123$ npm install$ npm install hexo-server --save$ npm install hexo-deployer-git --save 블로그 폴더 안에 잇는 _config.yml 파일 내용 수정 title, subtitle, author 등 세부사항 입력 깃허브 블로그 연결 : url에 깃허브 블로그 주소 입력 (ex. https://[깃허브아이디].github.io) 배포 관련 설정 : 맨 아래 deploy에 다음과 같이 입력 1234deploy: type: git repo: https://github.com/[깃허브아이디]/[깃허브아이디].github.io.git branch: main myblog 폴더 위치에서 Git Bash 열고 hexo generate --deploy 입력 Deploy done이라는 메시지가 출력되면 배포 완료된 것 게시글 추가 또는 수정할 때마다 위의 코드 입력 블로그 테마 변경 https://hexo.io/themes/ 에서 테마 정해서 해당 테마의 Github으로 이동 TIP : 최근에도 지속적으로 업데이트 되고 있는지 확인 npm install hexo-theme-[테마명] 입력 hexo config theme [테마명] 입력 hexo server 입력 이때 에러가 발생하는 경우 npm install --save bulma-stylus@0.8.0 hexo-renderer-inferno@^0.1.3 입력 hexo clean 을 통해 정리한 후 hexo generate --deploy 로 블로그에 배포 R 마크다운 업로드 R 마크다운 소스에서 개요 부분 수정 123output: html_document: keep_md: true R에서 Knit 버튼 클릭하면 해당 디렉토리에 md 파일 생성됨 myblog&#x2F;source&#x2F;_posts 경로에 해당 파일 복사 후 내용 수정 R 디렉토리에 있는 blog_files 폴더를 myblog&#x2F;source&#x2F;images 경로에 복사 후 md 파일에 있는 이미지 링크 수정 및 배포 Google Colab 업로드 google colab &gt; 파일 &gt; 다운로드 &gt; .ipynb 다운로드 Jupiter Lab에서 다운로드한 파일 열고 File &gt; Save and Export Notebook As &gt; Markdown 생성된 md 파일 및 이미지를 블로그 폴더로 복사 후 배포","categories":[{"name":"hexo","slug":"hexo","permalink":"http://gonekng.github.io/categories/hexo/"}],"tags":[{"name":"hexo","slug":"hexo","permalink":"http://gonekng.github.io/tags/hexo/"},{"name":"github","slug":"github","permalink":"http://gonekng.github.io/tags/github/"}],"author":"Jiwon Kang"},{"title":"R_basic_statistics","slug":"R/R_basic_stat","date":"2022-03-15T07:42:09.000Z","updated":"2022-10-05T05:39:54.984Z","comments":true,"path":"2022/03/15/R/R_basic_stat/","link":"","permalink":"http://gonekng.github.io/2022/03/15/R/R_basic_stat/","excerpt":"","text":"통계 분석 개요 기술통계(discriptive Statistics) : 평균, 최솟값, 최댓값, 중앙값 등 데이터의 특징을 서술하는 것 추론통계(inferential Statistics) : 변수 간의 관계를 파악하여 변수 간 인과관계나 새로운 사실을 밝혀내는 것 평균 차이 검정 : 집단별 평균의 차이가 실제로 있는가를 검정하는 것 교차분석 : 범주형 변수로 구성된 집단들의 관련성을 검정하는 것 상관관계분석 : 변수 간의 상관관계(correlation)를 알아보는 것 상관관계는 한 변수가 변화하면 다른 변수도 변화하는 관계를 의미 상관계수(r) : 변화의 강도와 방향을 나타내는 계수 (-1 &lt;&#x3D; r &lt;&#x3D; 1) 수치가 클수록 영향을 주는 강도가 크며, ‘+’는 정의 관계, ‘-‘는 역의 관계 회귀분석 : 독립변수와 종속변수 간의 인과관계를 분석하는 것 독립변수 : 영향을 주는 변수 &#x2F; 종속변수 : 영향을 받는 변수 단순회귀분석 : 종속변수 1개, 독립변수 1개 (y &#x3D; a + b*x) 다중회귀분석 : 종속변수 1개, 독립변수 2개 이상 (y &#x3D; a + b1x1 + b2x2 +…) 통계 검정 가설(hypothesis) 어떤 현상을 설명하기 위해서 가정하는 명제 귀무가설(H0) : 처음부터 기각될 것으로 예상되는 가설 (영가설) 대립가설(H1) : 귀무가설이 기각될 경우 받아들여지는 가설 유의수준(significance level, p값) 귀무가설이 맞는데도 대립가설을 채택할 확률 (제1종 오류의 최대 허용 범위) 가설 검정에서 인정하는 유의수준 : 5%, 1%, 0.1% 신뢰수준(confidence level) : 신뢰할 수 있는 범위 (1-유의수준) 척도(scale) 명목척도 : 측정대상의 특성이나 범주를 구분하는 척도 등번호, 성별, 인종, 지역 등 산술 연산을 할 수 없음 서열척도 : 측정대상의 등급순위를 나타내는 척도 계급, 사회계층, 자격등급 등 산술 연산을 할 수 없음 척도 간의 거리나 간격을 나타내지는 않음 등간척도 : 측정대상을 일정한 간격으로 구분한 척도 온도, 학력, 시험점수 등 서열 뿐만 아니라 거리와 간격도 표현 가능 덧셈, 뺄셈을 할 수 있음 비율척도 : 측정대상을 비율로 나타낼 수 있는 척도 연령, 키, 무게 등 사칙연산을 모두 할 수 있음 통계 분석 사례1. 두 집단의 평균 차이 검정 - 독립표본 t검정(t.test()) 독립변수는 명목척도, 종속변수는 등간척도 또는 비율척도이어야 함 귀무가설 : auto와 manual의 cty평균은 차이가 없다. 12mpg1 &lt;- read.csv(&quot;mpg1.csv&quot;)str(mpg1) 123456## &#x27;data.frame&#x27;: 234 obs. of 5 variables:## $ manufacturer : chr &quot;audi&quot; &quot;audi&quot; &quot;audi&quot; &quot;audi&quot; ...## $ trans : chr &quot;auto&quot; &quot;manual&quot; &quot;manual&quot; &quot;auto&quot; ...## $ drv : chr &quot;f&quot; &quot;f&quot; &quot;f&quot; &quot;f&quot; ...## $ cty : int 18 21 20 21 16 18 18 18 16 20 ...## $ hwy : int 29 29 31 30 26 26 27 26 25 28 ... 1t.test(data=mpg1, cty~trans) 1234567891011## ## Welch Two Sample t-test## ## data : cty by trans## t = -4.5375, df = 132.32, p-value = 1.263e-05## alternative hypothesis : true difference in means between group auto and group manual is not equal to 0## 95 percent confidence interval:## -3.887311 -1.527033## sample estimates:## mean in group auto mean in group manual ## 15.96815 18.67532 &gt;&gt; p-value &#x3D; 1.263e-05, 귀무가설 기각(유의수준 .05에서 유의미한 차이가 있음)2. 교차분석 - 카이제곱 검정(chisq.test()) 귀무가설 : trans에 따라 drv의 차이가 없다. 12mpg1 &lt;- read.csv(&quot;mpg1.csv&quot;)str(mpg1) 123456## &#x27;data.frame&#x27;: 234 obs. of 5 variables:## $ manufacturer : chr &quot;audi&quot; &quot;audi&quot; &quot;audi&quot; &quot;audi&quot; ...## $ trans : chr &quot;auto&quot; &quot;manual&quot; &quot;manual&quot; &quot;auto&quot; ...## $ drv : chr &quot;f&quot; &quot;f&quot; &quot;f&quot; &quot;f&quot; ...## $ cty : int 18 21 20 21 16 18 18 18 16 20 ...## $ hwy : int 29 29 31 30 26 26 27 26 25 28 ... 1table(mpg1$trans, mpg1$drv) 1234## ## 4 f r## auto 75 65 17## manual 28 41 8 1prop.table(table(mpg1$trans, mpg1$drv),1) 1234## ## 4 f r## auto 0.4777070 0.4140127 0.1082803## manual 0.3636364 0.5324675 0.1038961 1chisq.test(mpg1$trans, mpg1$drv) 12345## ## Pearson&#x27;s Chi-squared test## ## data : mpg1$trans and mpg1$drv## X-squared = 3.1368, df = 2, p-value = 0.2084 &gt;&gt; p-value &#x3D; 0.2084, 귀무가설 채택(유의수준 .05에서 유의미한 차이가 없음)3) 상관관계분석 - cor.test()- 귀무가설 : cty와 hwy는 상관관계가 없다. 12mpg1 &lt;- read.csv(&quot;mpg1.csv&quot;)str(mpg1) 123456## &#x27;data.frame&#x27;: 234 obs. of 5 variables:## $ manufacturer : chr &quot;audi&quot; &quot;audi&quot; &quot;audi&quot; &quot;audi&quot; ...## $ trans : chr &quot;auto&quot; &quot;manual&quot; &quot;manual&quot; &quot;auto&quot; ...## $ drv : chr &quot;f&quot; &quot;f&quot; &quot;f&quot; &quot;f&quot; ...## $ cty : int 18 21 20 21 16 18 18 18 16 20 ...## $ hwy : int 29 29 31 30 26 26 27 26 25 28 ... 1cor.test(mpg1$cty, mpg1$hwy) 1234567891011## ## Pearson&#x27;s product-moment correlation## ## data : mpg1$cty and mpg1$hwy## t = 49.585, df = 232, p-value &lt; 2.2e-16## alternative hypothesis : true correlation is not equal to 0## 95 percent confidence interval:## 0.9433129 0.9657663## sample estimates:## cor ## 0.9559159 &gt;&gt; p-value &lt; 2.2e-16, 귀무가설 기각(유의수준 .05에서 상관관계가 있음)&gt;&gt; 상관계수 r &#x3D; 0.9559159 (매우 높은 상관관계)4. 단순회귀분석 - lm() 독립변수와 종속변수가 모두 등간척도 또는 비율척도이어야 함 귀무가설 : disp는 mpg에 영향을 주지 않는다. 12RA &lt;- lm(data=mtcars, mpg~disp)summary(RA) 123456789101112131415161718## ## Call:## lm(formula = mpg ~ disp, data = mtcars)## ## Residuals:## Min 1Q Median 3Q Max ## -4.8922 -2.2022 -0.9631 1.6272 7.2305 ## ## Coefficients:## Estimate Std. Error t value Pr(&gt;|t|) ## (Intercept) 29.599855 1.229720 24.070 &lt; 2e-16 ***## disp -0.041215 0.004712 -8.747 9.38e-10 ***## ---## Signif. codes : 0 &#x27;***&#x27; 0.001 &#x27;**&#x27; 0.01 &#x27;*&#x27; 0.05 &#x27;.&#x27; 0.1 &#x27; &#x27; 1## ## Residual standard error : 3.251 on 30 degrees of freedom## Multiple R-squared : 0.7183, Adjusted R-squared : 0.709 ## F-statistic : 76.51 on 1 and 30 DF, p-value : 9.38e-10 12plot(data=mtcars, mpg~disp)abline(RA, col=&quot;red&quot;) &gt;&gt; p-value &#x3D; 9.38e-10, 귀무가설 기각(유의수준 .05에서 회귀모형이 적합함)&gt;&gt; 절편(Intercept) &#x3D; 29.599855 (유의수준 .05에서 유의함)&gt;&gt; 회귀계수(Estimate) &#x3D; -0.041215 (유의수준 .05에서 유의함)&gt;&gt; 회귀식 : mpg &#x3D; 29.599855 - 0.041215 * disp&gt;&gt; 수정된 결정계수(Adjusted R-Squared) &#x3D; .7095. 다중회귀분석 - lm()12RA &lt;- lm(data=mtcars, mpg~disp+hp+wt)summary(RA) 1234567891011121314151617181920## ## Call:## lm(formula = mpg ~ disp + hp + wt, data = mtcars)## ## Residuals:## Min 1Q Median 3Q Max ## -3.891 -1.640 -0.172 1.061 5.861 ## ## Coefficients:## Estimate Std. Error t value Pr(&gt;|t|) ## (Intercept) 37.105505 2.110815 17.579 &lt; 2e-16 ***## disp -0.000937 0.010350 -0.091 0.92851 ## hp -0.031157 0.011436 -2.724 0.01097 * ## wt -3.800891 1.066191 -3.565 0.00133 ** ## ---## Signif. codes : 0 &#x27;***&#x27; 0.001 &#x27;**&#x27; 0.01 &#x27;*&#x27; 0.05 &#x27;.&#x27; 0.1 &#x27; &#x27; 1## ## Residual standard error : 2.639 on 28 degrees of freedom## Multiple R-squared : 0.8268, Adjusted R-squared : 0.8083 ## F-statistic : 44.57 on 3 and 28 DF, p-value : 8.65e-11 &gt;&gt; p-value &#x3D; 8.65e-11, 귀무가설 기각(유의수준 .05에서 회귀모형이 적합함)&gt;&gt; 절편(Intercept) &#x3D; 29.599855 (유의수준 .05에서 유의함)&gt;&gt; dist의 계수 &#x3D; -0.000937 (유의수준 .05에서 통계적으로 유의하지 않음)&gt;&gt; hp의 계수 &#x3D; -0.031157 (유의수준 .05에서 유의함)&gt;&gt; wt의 계수 &#x3D; -3.800891 (유의수준 .05에서 유의함)&gt;&gt; 회귀식 : mpg &#x3D; 29.599855 - 0.000937 * disp - 0.031157 * hp - 3.800891 * wt&gt;&gt; 수정된 결정계수(Adjusted R-Squared) &#x3D; .8083","categories":[{"name":"r","slug":"r","permalink":"http://gonekng.github.io/categories/r/"}],"tags":[{"name":"r","slug":"r","permalink":"http://gonekng.github.io/tags/r/"},{"name":"statistic","slug":"statistic","permalink":"http://gonekng.github.io/tags/statistic/"}],"author":"Jiwon Kang"}],"categories":[{"name":"데이터 분석","slug":"데이터-분석","permalink":"http://gonekng.github.io/categories/%EB%8D%B0%EC%9D%B4%ED%84%B0-%EB%B6%84%EC%84%9D/"},{"name":"etc","slug":"etc","permalink":"http://gonekng.github.io/categories/etc/"},{"name":"python","slug":"python","permalink":"http://gonekng.github.io/categories/python/"},{"name":"pandas","slug":"python/pandas","permalink":"http://gonekng.github.io/categories/python/pandas/"},{"name":"django","slug":"python/django","permalink":"http://gonekng.github.io/categories/python/django/"},{"name":"streamlit","slug":"python/streamlit","permalink":"http://gonekng.github.io/categories/python/streamlit/"},{"name":"etc","slug":"python/etc","permalink":"http://gonekng.github.io/categories/python/etc/"},{"name":"ML","slug":"python/ML","permalink":"http://gonekng.github.io/categories/python/ML/"},{"name":"sql","slug":"sql","permalink":"http://gonekng.github.io/categories/sql/"},{"name":"hexo","slug":"hexo","permalink":"http://gonekng.github.io/categories/hexo/"},{"name":"coding test","slug":"python/coding-test","permalink":"http://gonekng.github.io/categories/python/coding-test/"},{"name":"crawling","slug":"python/crawling","permalink":"http://gonekng.github.io/categories/python/crawling/"},{"name":"basic","slug":"python/basic","permalink":"http://gonekng.github.io/categories/python/basic/"},{"name":"r","slug":"r","permalink":"http://gonekng.github.io/categories/r/"}],"tags":[{"name":"데이터 분석","slug":"데이터-분석","permalink":"http://gonekng.github.io/tags/%EB%8D%B0%EC%9D%B4%ED%84%B0-%EB%B6%84%EC%84%9D/"},{"name":"비즈니스 분석","slug":"비즈니스-분석","permalink":"http://gonekng.github.io/tags/%EB%B9%84%EC%A6%88%EB%8B%88%EC%8A%A4-%EB%B6%84%EC%84%9D/"},{"name":"git","slug":"git","permalink":"http://gonekng.github.io/tags/git/"},{"name":"sql","slug":"sql","permalink":"http://gonekng.github.io/tags/sql/"},{"name":"python","slug":"python","permalink":"http://gonekng.github.io/tags/python/"},{"name":"pandas","slug":"pandas","permalink":"http://gonekng.github.io/tags/pandas/"},{"name":"development","slug":"development","permalink":"http://gonekng.github.io/tags/development/"},{"name":"django","slug":"django","permalink":"http://gonekng.github.io/tags/django/"},{"name":"api","slug":"api","permalink":"http://gonekng.github.io/tags/api/"},{"name":"streamlit","slug":"streamlit","permalink":"http://gonekng.github.io/tags/streamlit/"},{"name":"sqlite","slug":"sqlite","permalink":"http://gonekng.github.io/tags/sqlite/"},{"name":"machine learning","slug":"machine-learning","permalink":"http://gonekng.github.io/tags/machine-learning/"},{"name":"scikit-learn","slug":"scikit-learn","permalink":"http://gonekng.github.io/tags/scikit-learn/"},{"name":"oracle","slug":"oracle","permalink":"http://gonekng.github.io/tags/oracle/"},{"name":"hexo","slug":"hexo","permalink":"http://gonekng.github.io/tags/hexo/"},{"name":"hueman","slug":"hueman","permalink":"http://gonekng.github.io/tags/hueman/"},{"name":"disqus","slug":"disqus","permalink":"http://gonekng.github.io/tags/disqus/"},{"name":"programmers","slug":"programmers","permalink":"http://gonekng.github.io/tags/programmers/"},{"name":"windows11","slug":"windows11","permalink":"http://gonekng.github.io/tags/windows11/"},{"name":"github","slug":"github","permalink":"http://gonekng.github.io/tags/github/"},{"name":"crawling","slug":"crawling","permalink":"http://gonekng.github.io/tags/crawling/"},{"name":"BeautifulSoup","slug":"BeautifulSoup","permalink":"http://gonekng.github.io/tags/BeautifulSoup/"},{"name":"google colab","slug":"google-colab","permalink":"http://gonekng.github.io/tags/google-colab/"},{"name":"r","slug":"r","permalink":"http://gonekng.github.io/tags/r/"},{"name":"statistic","slug":"statistic","permalink":"http://gonekng.github.io/tags/statistic/"}]}